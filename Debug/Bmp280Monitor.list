
Bmp280Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007394  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080074a4  080074a4  000174a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075f0  080075f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080075f0  080075f0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075f0  080075f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075f0  080075f0  000175f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075f4  080075f4  000175f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080075f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011a8  20000078  0800766c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001220  0800766c  00021220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018597  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c2d  00000000  00000000  00038634  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015c8  00000000  00000000  0003c268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  0003d830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b778  00000000  00000000  0003ec00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000135d1  00000000  00000000  0005a378  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096d6e  00000000  00000000  0006d949  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001046b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006158  00000000  00000000  00104734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800748c 	.word	0x0800748c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800748c 	.word	0x0800748c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <bmp280_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b087      	sub	sp, #28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4603      	mov	r3, r0
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	73bb      	strb	r3, [r7, #14]
	int8_t rslt;

	rslt = null_ptr_check(dev);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 fcbe 	bl	80013e0 <null_ptr_check>
 8000a64:	4603      	mov	r3, r0
 8000a66:	75fb      	strb	r3, [r7, #23]

	if ((rslt == BMP280_OK) && (reg_data != NULL)) {
 8000a68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d11c      	bne.n	8000aaa <bmp280_get_regs+0x5e>
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d019      	beq.n	8000aaa <bmp280_get_regs+0x5e>
		/* Mask the register address' MSB if interface selected is SPI */
		if (dev->intf == BMP280_SPI_INTF)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	789b      	ldrb	r3, [r3, #2]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d103      	bne.n	8000a86 <bmp280_get_regs+0x3a>
			reg_addr = reg_addr | 0x80;
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a84:	73fb      	strb	r3, [r7, #15]

		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	685c      	ldr	r4, [r3, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7858      	ldrb	r0, [r3, #1]
 8000a8e:	7bbb      	ldrb	r3, [r7, #14]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	7bf9      	ldrb	r1, [r7, #15]
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	47a0      	blx	r4
 8000a98:	4603      	mov	r3, r0
 8000a9a:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error and mask with an internal error code */
		if (rslt != BMP280_OK)
 8000a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d004      	beq.n	8000aae <bmp280_get_regs+0x62>
			rslt = BMP280_E_COMM_FAIL;
 8000aa4:	23fc      	movs	r3, #252	; 0xfc
 8000aa6:	75fb      	strb	r3, [r7, #23]
		if (rslt != BMP280_OK)
 8000aa8:	e001      	b.n	8000aae <bmp280_get_regs+0x62>
	} else {
		rslt = BMP280_E_NULL_PTR;
 8000aaa:	23ff      	movs	r3, #255	; 0xff
 8000aac:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8000aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	371c      	adds	r7, #28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd90      	pop	{r4, r7, pc}

08000aba <bmp280_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bmp280_dev *dev)
{
 8000aba:	b590      	push	{r4, r7, lr}
 8000abc:	b089      	sub	sp, #36	; 0x24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	if (len > 4)
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d901      	bls.n	8000ad4 <bmp280_set_regs+0x1a>
		len = 4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	71fb      	strb	r3, [r7, #7]

	rslt = null_ptr_check(dev);
 8000ad4:	6838      	ldr	r0, [r7, #0]
 8000ad6:	f000 fc83 	bl	80013e0 <null_ptr_check>
 8000ada:	4603      	mov	r3, r0
 8000adc:	77fb      	strb	r3, [r7, #31]

	if ((rslt == BMP280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8000ade:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d14d      	bne.n	8000b82 <bmp280_set_regs+0xc8>
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d04a      	beq.n	8000b82 <bmp280_set_regs+0xc8>
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d047      	beq.n	8000b82 <bmp280_set_regs+0xc8>
		if (len != 0) {
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d041      	beq.n	8000b7c <bmp280_set_regs+0xc2>
			temp_buff[0] = reg_data[0];
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	743b      	strb	r3, [r7, #16]
			/* Mask the register address' MSB if interface selected is SPI */
			if (dev->intf == BMP280_SPI_INTF) {
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	789b      	ldrb	r3, [r3, #2]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d114      	bne.n	8000b30 <bmp280_set_regs+0x76>
				/* Converting all the reg address into proper SPI write address
				 i.e making MSB(R/`W) bit 0 */
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	76fb      	strb	r3, [r7, #27]
 8000b0a:	e00d      	b.n	8000b28 <bmp280_set_regs+0x6e>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000b0c:	7efb      	ldrb	r3, [r7, #27]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4413      	add	r3, r2
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	7efb      	ldrb	r3, [r7, #27]
 8000b16:	68f9      	ldr	r1, [r7, #12]
 8000b18:	440b      	add	r3, r1
 8000b1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000b22:	7efb      	ldrb	r3, [r7, #27]
 8000b24:	3301      	adds	r3, #1
 8000b26:	76fb      	strb	r3, [r7, #27]
 8000b28:	7efa      	ldrb	r2, [r7, #27]
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d3ed      	bcc.n	8000b0c <bmp280_set_regs+0x52>
			}

			/* Burst write mode */
			if (len > 1) {
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d90d      	bls.n	8000b52 <bmp280_set_regs+0x98>
				/* Interleave register address w.r.t data for burst write*/
				interleave_data(reg_addr, temp_buff, reg_data, len);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f107 0110 	add.w	r1, r7, #16
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f000 fc6d 	bl	800141e <interleave_data>
				temp_len = ((len * 2) - 1);
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	83bb      	strh	r3, [r7, #28]
 8000b50:	e001      	b.n	8000b56 <bmp280_set_regs+0x9c>
			} else {
				temp_len = len;
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	83bb      	strh	r3, [r7, #28]
			}

			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689c      	ldr	r4, [r3, #8]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	7858      	ldrb	r0, [r3, #1]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	7819      	ldrb	r1, [r3, #0]
 8000b62:	8bbb      	ldrh	r3, [r7, #28]
 8000b64:	f107 0210 	add.w	r2, r7, #16
 8000b68:	47a0      	blx	r4
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	77fb      	strb	r3, [r7, #31]
			/* Check for communication error and mask with an internal error code */
			if (rslt != BMP280_OK)
 8000b6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d008      	beq.n	8000b88 <bmp280_set_regs+0xce>
				rslt = BMP280_E_COMM_FAIL;
 8000b76:	23fc      	movs	r3, #252	; 0xfc
 8000b78:	77fb      	strb	r3, [r7, #31]
		if (len != 0) {
 8000b7a:	e005      	b.n	8000b88 <bmp280_set_regs+0xce>
		} else {
			rslt = BMP280_E_INVALID_LEN;
 8000b7c:	23fd      	movs	r3, #253	; 0xfd
 8000b7e:	77fb      	strb	r3, [r7, #31]
		if (len != 0) {
 8000b80:	e002      	b.n	8000b88 <bmp280_set_regs+0xce>
		}
	} else {
		rslt = BMP280_E_NULL_PTR;
 8000b82:	23ff      	movs	r3, #255	; 0xff
 8000b84:	77fb      	strb	r3, [r7, #31]
 8000b86:	e000      	b.n	8000b8a <bmp280_set_regs+0xd0>
		if (len != 0) {
 8000b88:	bf00      	nop
	}

	return rslt;
 8000b8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd90      	pop	{r4, r7, pc}

08000b96 <bmp280_soft_reset>:

/*!
 * @brief This API triggers the soft reset of the sensor.
 */
int8_t bmp280_soft_reset(const struct bmp280_dev *dev)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b084      	sub	sp, #16
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BMP280_SOFT_RESET_ADDR;
 8000b9e:	23e0      	movs	r3, #224	; 0xe0
 8000ba0:	73bb      	strb	r3, [r7, #14]
	uint8_t soft_rst_cmd = BMP280_SOFT_RESET_CMD;
 8000ba2:	23b6      	movs	r3, #182	; 0xb6
 8000ba4:	737b      	strb	r3, [r7, #13]

	rslt = null_ptr_check(dev);
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 fc1a 	bl	80013e0 <null_ptr_check>
 8000bac:	4603      	mov	r3, r0
 8000bae:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMP280_OK) {
 8000bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10d      	bne.n	8000bd4 <bmp280_soft_reset+0x3e>
		rslt = bmp280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000bb8:	f107 010d 	add.w	r1, r7, #13
 8000bbc:	f107 000e 	add.w	r0, r7, #14
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f7ff ff79 	bl	8000aba <bmp280_set_regs>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	73fb      	strb	r3, [r7, #15]

		/* As per the datasheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	4798      	blx	r3
	}

	return rslt;
 8000bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <bmp280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp280_init(struct bmp280_dev *dev)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* Maximum number of tries before timeout */
	uint8_t try_count = 5;
 8000be8:	2305      	movs	r3, #5
 8000bea:	73bb      	strb	r3, [r7, #14]

	rslt = null_ptr_check(dev);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 fbf7 	bl	80013e0 <null_ptr_check>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMP280_OK) {
 8000bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d150      	bne.n	8000ca0 <bmp280_init+0xc0>
		while (try_count) {
 8000bfe:	e02d      	b.n	8000c5c <bmp280_init+0x7c>
			rslt = bmp280_get_regs(BMP280_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2201      	movs	r2, #1
 8000c06:	20d0      	movs	r0, #208	; 0xd0
 8000c08:	f7ff ff20 	bl	8000a4c <bmp280_get_regs>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	73fb      	strb	r3, [r7, #15]

			/* Check for chip id validity */
			if ((rslt == BMP280_OK) && (dev->chip_id == BMP280_CHIP_ID1
 8000c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d11a      	bne.n	8000c4e <bmp280_init+0x6e>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b56      	cmp	r3, #86	; 0x56
 8000c1e:	d007      	beq.n	8000c30 <bmp280_init+0x50>
			|| dev->chip_id == BMP280_CHIP_ID2
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b57      	cmp	r3, #87	; 0x57
 8000c26:	d003      	beq.n	8000c30 <bmp280_init+0x50>
			|| dev->chip_id == BMP280_CHIP_ID3)) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b58      	cmp	r3, #88	; 0x58
 8000c2e:	d10e      	bne.n	8000c4e <bmp280_init+0x6e>

				rslt = bmp280_soft_reset(dev);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ffb0 	bl	8000b96 <bmp280_soft_reset>
 8000c36:	4603      	mov	r3, r0
 8000c38:	73fb      	strb	r3, [r7, #15]

				if (rslt == BMP280_OK)
 8000c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d110      	bne.n	8000c64 <bmp280_init+0x84>
					rslt = get_calib_param(dev);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 fc15 	bl	8001472 <get_calib_param>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73fb      	strb	r3, [r7, #15]
				break;
 8000c4c:	e00a      	b.n	8000c64 <bmp280_init+0x84>
			}

			/* Wait for 10 ms */
			dev->delay_ms(10);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	200a      	movs	r0, #10
 8000c54:	4798      	blx	r3
			--try_count;
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1ce      	bne.n	8000c00 <bmp280_init+0x20>
 8000c62:	e000      	b.n	8000c66 <bmp280_init+0x86>
				break;
 8000c64:	bf00      	nop
		}

		/* Chip id check failed, and timed out */
		if (!try_count)
 8000c66:	7bbb      	ldrb	r3, [r7, #14]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d101      	bne.n	8000c70 <bmp280_init+0x90>
			rslt = BMP280_E_DEV_NOT_FOUND;
 8000c6c:	23fe      	movs	r3, #254	; 0xfe
 8000c6e:	73fb      	strb	r3, [r7, #15]

		if (rslt == BMP280_OK) {
 8000c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d113      	bne.n	8000ca0 <bmp280_init+0xc0>
			/* Set values to default */
			dev->conf.filter = BMP280_FILTER_OFF;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			dev->conf.os_pres = BMP280_OS_NONE;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			dev->conf.os_temp = BMP280_OS_NONE;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			dev->conf.odr = BMP280_ODR_0_5_MS;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			dev->conf.spi3w_en = BMP280_SPI3_WIRE_DISABLE;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
	}

	return rslt;
 8000ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <bmp280_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp280_get_config(struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t temp[2] = {0, 0};
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	733b      	strb	r3, [r7, #12]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	737b      	strb	r3, [r7, #13]

	rslt = null_ptr_check(dev);
 8000cbe:	6838      	ldr	r0, [r7, #0]
 8000cc0:	f000 fb8e 	bl	80013e0 <null_ptr_check>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	73fb      	strb	r3, [r7, #15]

	if ((rslt == BMP280_OK) && (conf != NULL)) {
 8000cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d137      	bne.n	8000d40 <bmp280_get_config+0x94>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d034      	beq.n	8000d40 <bmp280_get_config+0x94>
		rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 8000cd6:	f107 010c 	add.w	r1, r7, #12
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	2202      	movs	r2, #2
 8000cde:	20f4      	movs	r0, #244	; 0xf4
 8000ce0:	f7ff feb4 	bl	8000a4c <bmp280_get_regs>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]

		if (rslt == BMP280_OK) {
 8000ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d129      	bne.n	8000d44 <bmp280_get_config+0x98>
			conf->os_temp = BMP280_GET_BITS(BMP280_OS_TEMP, temp[0]);
 8000cf0:	7b3b      	ldrb	r3, [r7, #12]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	701a      	strb	r2, [r3, #0]
			conf->os_pres = BMP280_GET_BITS(BMP280_OS_PRES, temp[0]);
 8000cfa:	7b3b      	ldrb	r3, [r7, #12]
 8000cfc:	109b      	asrs	r3, r3, #2
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	705a      	strb	r2, [r3, #1]
			conf->odr = BMP280_GET_BITS(BMP280_STANDBY_DURN, temp[1]);
 8000d0a:	7b7b      	ldrb	r3, [r7, #13]
 8000d0c:	095b      	lsrs	r3, r3, #5
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	709a      	strb	r2, [r3, #2]
			conf->filter = BMP280_GET_BITS(BMP280_FILTER, temp[1]);
 8000d14:	7b7b      	ldrb	r3, [r7, #13]
 8000d16:	109b      	asrs	r3, r3, #2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	70da      	strb	r2, [r3, #3]
			conf->spi3w_en = BMP280_GET_BITS_POS_0(BMP280_SPI3_ENABLE, temp[1]);
 8000d24:	7b7b      	ldrb	r3, [r7, #13]
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	711a      	strb	r2, [r3, #4]

			dev->conf = *conf;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	332c      	adds	r3, #44	; 0x2c
 8000d36:	6810      	ldr	r0, [r2, #0]
 8000d38:	6018      	str	r0, [r3, #0]
 8000d3a:	7912      	ldrb	r2, [r2, #4]
 8000d3c:	711a      	strb	r2, [r3, #4]
		if (rslt == BMP280_OK) {
 8000d3e:	e001      	b.n	8000d44 <bmp280_get_config+0x98>
		}
	} else {
		rslt = BMP280_E_NULL_PTR;
 8000d40:	23ff      	movs	r3, #255	; 0xff
 8000d42:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <bmp280_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the temperature and pressure over-sampling configuration,
 * power mode configuration, sleep duration and IIR filter coefficient.
 */
int8_t bmp280_set_config(const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
	return conf_sensor(BMP280_SLEEP_MODE, conf, dev);
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 fc24 	bl	80015ac <conf_sensor>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <bmp280_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp280_set_power_mode(uint8_t mode, struct bmp280_dev *dev)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	6039      	str	r1, [r7, #0]
 8000d78:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;

	rslt = null_ptr_check(dev);
 8000d7a:	6838      	ldr	r0, [r7, #0]
 8000d7c:	f000 fb30 	bl	80013e0 <null_ptr_check>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMP280_OK)
 8000d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d109      	bne.n	8000da0 <bmp280_set_power_mode+0x32>
		rslt = conf_sensor(mode, &dev->conf, dev);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fc08 	bl	80015ac <conf_sensor>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8000da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <bmp280_get_uncomp_data>:
/*!
 * @brief This API reads the temperature and pressure data registers.
 * It gives the raw temperature and pressure data .
 */
int8_t bmp280_get_uncomp_data(struct bmp280_uncomp_data *uncomp_data, const struct bmp280_dev *dev)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t temp[6] = {0};
 8000db6:	f107 0308 	add.w	r3, r7, #8
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	809a      	strh	r2, [r3, #4]

	rslt = null_ptr_check(dev);
 8000dc0:	6838      	ldr	r0, [r7, #0]
 8000dc2:	f000 fb0d 	bl	80013e0 <null_ptr_check>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	73fb      	strb	r3, [r7, #15]

	if ((rslt == BMP280_OK) && (uncomp_data != NULL)) {
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d123      	bne.n	8000e1a <bmp280_get_uncomp_data+0x6e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d020      	beq.n	8000e1a <bmp280_get_uncomp_data+0x6e>
		rslt = bmp280_get_regs(BMP280_PRES_MSB_ADDR, temp, 6, dev);
 8000dd8:	f107 0108 	add.w	r1, r7, #8
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	2206      	movs	r2, #6
 8000de0:	20f7      	movs	r0, #247	; 0xf7
 8000de2:	f7ff fe33 	bl	8000a4c <bmp280_get_regs>
 8000de6:	4603      	mov	r3, r0
 8000de8:	73fb      	strb	r3, [r7, #15]
		uncomp_data->uncomp_press = (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4)
 8000dea:	7a3b      	ldrb	r3, [r7, #8]
 8000dec:	031a      	lsls	r2, r3, #12
 8000dee:	7a7b      	ldrb	r3, [r7, #9]
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	4313      	orrs	r3, r2
		| ((uint32_t) temp[2] >> 4));
 8000df4:	7aba      	ldrb	r2, [r7, #10]
 8000df6:	0912      	lsrs	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	431a      	orrs	r2, r3
		uncomp_data->uncomp_press = (int32_t) ((((uint32_t) (temp[0])) << 12) | (((uint32_t) (temp[1])) << 4)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	605a      	str	r2, [r3, #4]

		uncomp_data->uncomp_temp = (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4)
 8000e00:	7afb      	ldrb	r3, [r7, #11]
 8000e02:	031a      	lsls	r2, r3, #12
 8000e04:	7b3b      	ldrb	r3, [r7, #12]
 8000e06:	011b      	lsls	r3, r3, #4
 8000e08:	4313      	orrs	r3, r2
		| (((int32_t) (temp[5])) >> 4));
 8000e0a:	7b7a      	ldrb	r2, [r7, #13]
 8000e0c:	0912      	lsrs	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
		uncomp_data->uncomp_temp = (int32_t) ((((int32_t) (temp[3])) << 12) | (((int32_t) (temp[4])) << 4)
 8000e10:	4313      	orrs	r3, r2
 8000e12:	461a      	mov	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	e001      	b.n	8000e1e <bmp280_get_uncomp_data+0x72>
	} else {
		rslt = BMP280_E_NULL_PTR;
 8000e1a:	23ff      	movs	r3, #255	; 0xff
 8000e1c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <bmp280_comp_temp_double>:
/*!
 * @brief This API is used to get the compensated temperature from
 * uncompensated temperature. This API uses double floating precision.
 */
double bmp280_comp_temp_double(uint32_t uncomp_temp, struct bmp280_dev *dev)
{
 8000e2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000e30:	b08a      	sub	sp, #40	; 0x28
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature = 0;
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	f04f 0400 	mov.w	r4, #0
 8000e40:	e9c7 3408 	strd	r3, r4, [r7, #32]

	int8_t rslt;

	rslt = null_ptr_check(dev);
 8000e44:	6838      	ldr	r0, [r7, #0]
 8000e46:	f000 facb 	bl	80013e0 <null_ptr_check>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	77fb      	strb	r3, [r7, #31]

	if (rslt == BMP280_OK) {
 8000e4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f040 80aa 	bne.w	8000fac <bmp280_comp_temp_double+0x180>
		var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0)
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fabb 	bl	80003d4 <__aeabi_ui2d>
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	4b56      	ldr	r3, [pc, #344]	; (8000fbc <bmp280_comp_temp_double+0x190>)
 8000e64:	f7ff fc5a 	bl	800071c <__aeabi_ddiv>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	460c      	mov	r4, r1
 8000e6c:	4625      	mov	r5, r4
 8000e6e:	461c      	mov	r4, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	8a1b      	ldrh	r3, [r3, #16]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff faad 	bl	80003d4 <__aeabi_ui2d>
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b50      	ldr	r3, [pc, #320]	; (8000fc0 <bmp280_comp_temp_double+0x194>)
 8000e80:	f7ff fc4c 	bl	800071c <__aeabi_ddiv>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4620      	mov	r0, r4
 8000e8a:	4629      	mov	r1, r5
 8000e8c:	f7ff f964 	bl	8000158 <__aeabi_dsub>
 8000e90:	4603      	mov	r3, r0
 8000e92:	460c      	mov	r4, r1
 8000e94:	4625      	mov	r5, r4
 8000e96:	461c      	mov	r4, r3
		* ((double) dev->calib_param.dig_t2);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff faa8 	bl	80003f4 <__aeabi_i2d>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
		var1 = (((double) uncomp_temp) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0)
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	4629      	mov	r1, r5
 8000eac:	f7ff fb0c 	bl	80004c8 <__aeabi_dmul>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	460c      	mov	r4, r1
 8000eb4:	e9c7 3404 	strd	r3, r4, [r7, #16]
		var2 = ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff fa8b 	bl	80003d4 <__aeabi_ui2d>
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8000ec6:	f7ff fc29 	bl	800071c <__aeabi_ddiv>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460c      	mov	r4, r1
 8000ece:	4625      	mov	r5, r4
 8000ed0:	461c      	mov	r4, r3
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	8a1b      	ldrh	r3, [r3, #16]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fa7c 	bl	80003d4 <__aeabi_ui2d>
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <bmp280_comp_temp_double+0x198>)
 8000ee2:	f7ff fc1b 	bl	800071c <__aeabi_ddiv>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4620      	mov	r0, r4
 8000eec:	4629      	mov	r1, r5
 8000eee:	f7ff f933 	bl	8000158 <__aeabi_dsub>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	460c      	mov	r4, r1
 8000ef6:	4625      	mov	r5, r4
 8000ef8:	461c      	mov	r4, r3
		* (((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0))
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fa6a 	bl	80003d4 <__aeabi_ui2d>
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8000f08:	f7ff fc08 	bl	800071c <__aeabi_ddiv>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4690      	mov	r8, r2
 8000f12:	4699      	mov	r9, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	8a1b      	ldrh	r3, [r3, #16]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fa5b 	bl	80003d4 <__aeabi_ui2d>
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	4b28      	ldr	r3, [pc, #160]	; (8000fc4 <bmp280_comp_temp_double+0x198>)
 8000f24:	f7ff fbfa 	bl	800071c <__aeabi_ddiv>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	4649      	mov	r1, r9
 8000f30:	f7ff f912 	bl	8000158 <__aeabi_dsub>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4620      	mov	r0, r4
 8000f3a:	4629      	mov	r1, r5
 8000f3c:	f7ff fac4 	bl	80004c8 <__aeabi_dmul>
 8000f40:	4603      	mov	r3, r0
 8000f42:	460c      	mov	r4, r1
 8000f44:	4625      	mov	r5, r4
 8000f46:	461c      	mov	r4, r3
		* ((double) dev->calib_param.dig_t3);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fa50 	bl	80003f4 <__aeabi_i2d>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
		var2 = ((((double) uncomp_temp) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)
 8000f58:	4620      	mov	r0, r4
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	f7ff fab4 	bl	80004c8 <__aeabi_dmul>
 8000f60:	4603      	mov	r3, r0
 8000f62:	460c      	mov	r4, r1
 8000f64:	e9c7 3402 	strd	r3, r4, [r7, #8]
		dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8000f68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f70:	f7ff f8f4 	bl	800015c <__adddf3>
 8000f74:	4603      	mov	r3, r0
 8000f76:	460c      	mov	r4, r1
 8000f78:	4618      	mov	r0, r3
 8000f7a:	4621      	mov	r1, r4
 8000f7c:	f7ff fd3e 	bl	80009fc <__aeabi_d2iz>
 8000f80:	4602      	mov	r2, r0
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
		temperature = (var1 + var2) / 5120.0;
 8000f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f8e:	f7ff f8e5 	bl	800015c <__adddf3>
 8000f92:	4603      	mov	r3, r0
 8000f94:	460c      	mov	r4, r1
 8000f96:	4618      	mov	r0, r3
 8000f98:	4621      	mov	r1, r4
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <bmp280_comp_temp_double+0x19c>)
 8000fa0:	f7ff fbbc 	bl	800071c <__aeabi_ddiv>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	460c      	mov	r4, r1
 8000fa8:	e9c7 3408 	strd	r3, r4, [r7, #32]
	}

	return temperature;
 8000fac:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	4621      	mov	r1, r4
 8000fb4:	3728      	adds	r7, #40	; 0x28
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000fbc:	40d00000 	.word	0x40d00000
 8000fc0:	40900000 	.word	0x40900000
 8000fc4:	40c00000 	.word	0x40c00000
 8000fc8:	40b40000 	.word	0x40b40000
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <bmp280_comp_pres_double>:
/*!
 * @brief This API is used to get the compensated pressure from
 * uncompensated pressure. This API uses double floating precision.
 */
double bmp280_comp_pres_double(uint32_t uncomp_pres, const struct bmp280_dev *dev)
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double pressure = 0;
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	f04f 0400 	mov.w	r4, #0
 8000fe2:	e9c7 3408 	strd	r3, r4, [r7, #32]
	int8_t rslt;

	rslt = null_ptr_check(dev);
 8000fe6:	6838      	ldr	r0, [r7, #0]
 8000fe8:	f000 f9fa 	bl	80013e0 <null_ptr_check>
 8000fec:	4603      	mov	r3, r0
 8000fee:	77fb      	strb	r3, [r7, #31]

	if (rslt == BMP280_OK) {
 8000ff0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f040 8180 	bne.w	80012fa <bmp280_comp_pres_double+0x32a>
		var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f9f8 	bl	80003f4 <__aeabi_i2d>
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800100c:	f7ff fb86 	bl	800071c <__aeabi_ddiv>
 8001010:	4603      	mov	r3, r0
 8001012:	460c      	mov	r4, r1
 8001014:	4618      	mov	r0, r3
 8001016:	4621      	mov	r1, r4
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	4bbc      	ldr	r3, [pc, #752]	; (8001310 <bmp280_comp_pres_double+0x340>)
 800101e:	f7ff f89b 	bl	8000158 <__aeabi_dsub>
 8001022:	4603      	mov	r3, r0
 8001024:	460c      	mov	r4, r1
 8001026:	e9c7 3404 	strd	r3, r4, [r7, #16]
		var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 800102a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800102e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001032:	f7ff fa49 	bl	80004c8 <__aeabi_dmul>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	4625      	mov	r5, r4
 800103c:	461c      	mov	r4, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f9d5 	bl	80003f4 <__aeabi_i2d>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4620      	mov	r0, r4
 8001050:	4629      	mov	r1, r5
 8001052:	f7ff fa39 	bl	80004c8 <__aeabi_dmul>
 8001056:	4603      	mov	r3, r0
 8001058:	460c      	mov	r4, r1
 800105a:	4618      	mov	r0, r3
 800105c:	4621      	mov	r1, r4
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4bac      	ldr	r3, [pc, #688]	; (8001314 <bmp280_comp_pres_double+0x344>)
 8001064:	f7ff fb5a 	bl	800071c <__aeabi_ddiv>
 8001068:	4603      	mov	r3, r0
 800106a:	460c      	mov	r4, r1
 800106c:	e9c7 3402 	strd	r3, r4, [r7, #8]
		var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f9bc 	bl	80003f4 <__aeabi_i2d>
 800107c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001080:	f7ff fa22 	bl	80004c8 <__aeabi_dmul>
 8001084:	4603      	mov	r3, r0
 8001086:	460c      	mov	r4, r1
 8001088:	4618      	mov	r0, r3
 800108a:	4621      	mov	r1, r4
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	f7ff f864 	bl	800015c <__adddf3>
 8001094:	4603      	mov	r3, r0
 8001096:	460c      	mov	r4, r1
 8001098:	461a      	mov	r2, r3
 800109a:	4623      	mov	r3, r4
 800109c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010a0:	f7ff f85c 	bl	800015c <__adddf3>
 80010a4:	4603      	mov	r3, r0
 80010a6:	460c      	mov	r4, r1
 80010a8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b99      	ldr	r3, [pc, #612]	; (8001318 <bmp280_comp_pres_double+0x348>)
 80010b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010b6:	f7ff fb31 	bl	800071c <__aeabi_ddiv>
 80010ba:	4603      	mov	r3, r0
 80010bc:	460c      	mov	r4, r1
 80010be:	4625      	mov	r5, r4
 80010c0:	461c      	mov	r4, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f993 	bl	80003f4 <__aeabi_i2d>
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b92      	ldr	r3, [pc, #584]	; (800131c <bmp280_comp_pres_double+0x34c>)
 80010d4:	f7ff f9f8 	bl	80004c8 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4620      	mov	r0, r4
 80010de:	4629      	mov	r1, r5
 80010e0:	f7ff f83c 	bl	800015c <__adddf3>
 80010e4:	4603      	mov	r3, r0
 80010e6:	460c      	mov	r4, r1
 80010e8:	e9c7 3402 	strd	r3, r4, [r7, #8]
		var1 = (((double) dev->calib_param.dig_p3) * var1 * var1 / 524288.0
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f97e 	bl	80003f4 <__aeabi_i2d>
 80010f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010fc:	f7ff f9e4 	bl	80004c8 <__aeabi_dmul>
 8001100:	4603      	mov	r3, r0
 8001102:	460c      	mov	r4, r1
 8001104:	4618      	mov	r0, r3
 8001106:	4621      	mov	r1, r4
 8001108:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800110c:	f7ff f9dc 	bl	80004c8 <__aeabi_dmul>
 8001110:	4603      	mov	r3, r0
 8001112:	460c      	mov	r4, r1
 8001114:	4618      	mov	r0, r3
 8001116:	4621      	mov	r1, r4
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	4b80      	ldr	r3, [pc, #512]	; (8001320 <bmp280_comp_pres_double+0x350>)
 800111e:	f7ff fafd 	bl	800071c <__aeabi_ddiv>
 8001122:	4603      	mov	r3, r0
 8001124:	460c      	mov	r4, r1
 8001126:	4625      	mov	r5, r4
 8001128:	461c      	mov	r4, r3
		+ ((double) dev->calib_param.dig_p2) * var1) / 524288.0;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f95f 	bl	80003f4 <__aeabi_i2d>
 8001136:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800113a:	f7ff f9c5 	bl	80004c8 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4620      	mov	r0, r4
 8001144:	4629      	mov	r1, r5
 8001146:	f7ff f809 	bl	800015c <__adddf3>
 800114a:	4603      	mov	r3, r0
 800114c:	460c      	mov	r4, r1
 800114e:	4618      	mov	r0, r3
 8001150:	4621      	mov	r1, r4
		var1 = (((double) dev->calib_param.dig_p3) * var1 * var1 / 524288.0
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b72      	ldr	r3, [pc, #456]	; (8001320 <bmp280_comp_pres_double+0x350>)
 8001158:	f7ff fae0 	bl	800071c <__aeabi_ddiv>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	e9c7 3404 	strd	r3, r4, [r7, #16]
		var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b6a      	ldr	r3, [pc, #424]	; (8001314 <bmp280_comp_pres_double+0x344>)
 800116a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800116e:	f7ff fad5 	bl	800071c <__aeabi_ddiv>
 8001172:	4603      	mov	r3, r0
 8001174:	460c      	mov	r4, r1
 8001176:	4618      	mov	r0, r3
 8001178:	4621      	mov	r1, r4
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b69      	ldr	r3, [pc, #420]	; (8001324 <bmp280_comp_pres_double+0x354>)
 8001180:	f7fe ffec 	bl	800015c <__adddf3>
 8001184:	4603      	mov	r3, r0
 8001186:	460c      	mov	r4, r1
 8001188:	4625      	mov	r5, r4
 800118a:	461c      	mov	r4, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	8adb      	ldrh	r3, [r3, #22]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f91f 	bl	80003d4 <__aeabi_ui2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4620      	mov	r0, r4
 800119c:	4629      	mov	r1, r5
 800119e:	f7ff f993 	bl	80004c8 <__aeabi_dmul>
 80011a2:	4603      	mov	r3, r0
 80011a4:	460c      	mov	r4, r1
 80011a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
		pressure = 1048576.0 - (double) uncomp_pres;
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff f912 	bl	80003d4 <__aeabi_ui2d>
 80011b0:	4603      	mov	r3, r0
 80011b2:	460c      	mov	r4, r1
 80011b4:	461a      	mov	r2, r3
 80011b6:	4623      	mov	r3, r4
 80011b8:	f04f 0000 	mov.w	r0, #0
 80011bc:	495a      	ldr	r1, [pc, #360]	; (8001328 <bmp280_comp_pres_double+0x358>)
 80011be:	f7fe ffcb 	bl	8000158 <__aeabi_dsub>
 80011c2:	4603      	mov	r3, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (var1 != 0) {
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011d6:	f7ff fbdf 	bl	8000998 <__aeabi_dcmpeq>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f040 8086 	bne.w	80012ee <bmp280_comp_pres_double+0x31e>
			pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	4b51      	ldr	r3, [pc, #324]	; (800132c <bmp280_comp_pres_double+0x35c>)
 80011e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ec:	f7ff fa96 	bl	800071c <__aeabi_ddiv>
 80011f0:	4603      	mov	r3, r0
 80011f2:	460c      	mov	r4, r1
 80011f4:	461a      	mov	r2, r3
 80011f6:	4623      	mov	r3, r4
 80011f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011fc:	f7fe ffac 	bl	8000158 <__aeabi_dsub>
 8001200:	4603      	mov	r3, r0
 8001202:	460c      	mov	r4, r1
 8001204:	4618      	mov	r0, r3
 8001206:	4621      	mov	r1, r4
 8001208:	a33f      	add	r3, pc, #252	; (adr r3, 8001308 <bmp280_comp_pres_double+0x338>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7ff f95b 	bl	80004c8 <__aeabi_dmul>
 8001212:	4603      	mov	r3, r0
 8001214:	460c      	mov	r4, r1
 8001216:	4618      	mov	r0, r3
 8001218:	4621      	mov	r1, r4
 800121a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800121e:	f7ff fa7d 	bl	800071c <__aeabi_ddiv>
 8001222:	4603      	mov	r3, r0
 8001224:	460c      	mov	r4, r1
 8001226:	e9c7 3408 	strd	r3, r4, [r7, #32]
			var1 = ((double) dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f8df 	bl	80003f4 <__aeabi_i2d>
 8001236:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800123a:	f7ff f945 	bl	80004c8 <__aeabi_dmul>
 800123e:	4603      	mov	r3, r0
 8001240:	460c      	mov	r4, r1
 8001242:	4618      	mov	r0, r3
 8001244:	4621      	mov	r1, r4
 8001246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800124a:	f7ff f93d 	bl	80004c8 <__aeabi_dmul>
 800124e:	4603      	mov	r3, r0
 8001250:	460c      	mov	r4, r1
 8001252:	4618      	mov	r0, r3
 8001254:	4621      	mov	r1, r4
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b35      	ldr	r3, [pc, #212]	; (8001330 <bmp280_comp_pres_double+0x360>)
 800125c:	f7ff fa5e 	bl	800071c <__aeabi_ddiv>
 8001260:	4603      	mov	r3, r0
 8001262:	460c      	mov	r4, r1
 8001264:	e9c7 3404 	strd	r3, r4, [r7, #16]
			var2 = pressure * ((double) dev->calib_param.dig_p8) / 32768.0;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f8c0 	bl	80003f4 <__aeabi_i2d>
 8001274:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001278:	f7ff f926 	bl	80004c8 <__aeabi_dmul>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	4618      	mov	r0, r3
 8001282:	4621      	mov	r1, r4
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <bmp280_comp_pres_double+0x344>)
 800128a:	f7ff fa47 	bl	800071c <__aeabi_ddiv>
 800128e:	4603      	mov	r3, r0
 8001290:	460c      	mov	r4, r1
 8001292:	e9c7 3402 	strd	r3, r4, [r7, #8]
			pressure = pressure + (var1 + var2 + ((double) dev->calib_param.dig_p7)) / 16.0;
 8001296:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800129a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800129e:	f7fe ff5d 	bl	800015c <__adddf3>
 80012a2:	4603      	mov	r3, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	4625      	mov	r5, r4
 80012a8:	461c      	mov	r4, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f89f 	bl	80003f4 <__aeabi_i2d>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7fe ff4d 	bl	800015c <__adddf3>
 80012c2:	4603      	mov	r3, r0
 80012c4:	460c      	mov	r4, r1
 80012c6:	4618      	mov	r0, r3
 80012c8:	4621      	mov	r1, r4
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <bmp280_comp_pres_double+0x364>)
 80012d0:	f7ff fa24 	bl	800071c <__aeabi_ddiv>
 80012d4:	4603      	mov	r3, r0
 80012d6:	460c      	mov	r4, r1
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012e0:	f7fe ff3c 	bl	800015c <__adddf3>
 80012e4:	4603      	mov	r3, r0
 80012e6:	460c      	mov	r4, r1
 80012e8:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80012ec:	e005      	b.n	80012fa <bmp280_comp_pres_double+0x32a>
		} else {
			pressure = 0;
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	f04f 0400 	mov.w	r4, #0
 80012f6:	e9c7 3408 	strd	r3, r4, [r7, #32]
		}
	}

	return pressure;
 80012fa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	4621      	mov	r1, r4
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bdb0      	pop	{r4, r5, r7, pc}
 8001308:	00000000 	.word	0x00000000
 800130c:	40b86a00 	.word	0x40b86a00
 8001310:	40ef4000 	.word	0x40ef4000
 8001314:	40e00000 	.word	0x40e00000
 8001318:	40100000 	.word	0x40100000
 800131c:	40f00000 	.word	0x40f00000
 8001320:	41200000 	.word	0x41200000
 8001324:	3ff00000 	.word	0x3ff00000
 8001328:	41300000 	.word	0x41300000
 800132c:	40b00000 	.word	0x40b00000
 8001330:	41e00000 	.word	0x41e00000
 8001334:	40300000 	.word	0x40300000

08001338 <bmp280_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in milliseconds for the
 * active configuration
 */
uint8_t bmp280_compute_meas_time(const struct bmp280_dev *dev)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	uint32_t period = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t t_dur = 0, p_dur = 0, p_startup = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
	const uint32_t startup = 1000, period_per_osrs = 2000; /* Typical timings in us. Maximum is +15% each */
 8001350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800135a:	613b      	str	r3, [r7, #16]
	int8_t rslt;

	rslt = null_ptr_check(dev);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f83f 	bl	80013e0 <null_ptr_check>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]

	if (rslt == BMP280_OK) {
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d12f      	bne.n	80013ce <bmp280_compute_meas_time+0x96>
		t_dur = period_per_osrs * ((UINT32_C(1) << dev->conf.os_temp) >> 1);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001374:	461a      	mov	r2, r3
 8001376:	2301      	movs	r3, #1
 8001378:	4093      	lsls	r3, r2
 800137a:	085a      	lsrs	r2, r3, #1
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	623b      	str	r3, [r7, #32]
		p_dur = period_per_osrs * ((UINT32_C(1) << dev->conf.os_pres) >> 1);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800138a:	461a      	mov	r2, r3
 800138c:	2301      	movs	r3, #1
 800138e:	4093      	lsls	r3, r2
 8001390:	085a      	lsrs	r2, r3, #1
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	fb02 f303 	mul.w	r3, r2, r3
 8001398:	61fb      	str	r3, [r7, #28]
		p_startup = (dev->conf.os_pres) ? 500 : 0;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <bmp280_compute_meas_time+0x72>
 80013a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013a8:	e000      	b.n	80013ac <bmp280_compute_meas_time+0x74>
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]

		/* Increment the value to next highest integer if greater than 0.5 */
		period = startup + t_dur + p_startup + p_dur + 500;
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	441a      	add	r2, r3
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	441a      	add	r2, r3
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	4413      	add	r3, r2
 80013bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
		period /= 1000; /* Convert to milliseconds */
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	4a05      	ldr	r2, [pc, #20]	; (80013dc <bmp280_compute_meas_time+0xa4>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	099b      	lsrs	r3, r3, #6
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
	}

	return (uint8_t)period;
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	b2db      	uxtb	r3, r3
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	10624dd3 	.word	0x10624dd3

080013e0 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp280_dev *dev)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00b      	beq.n	8001406 <null_ptr_check+0x26>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <null_ptr_check+0x26>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <null_ptr_check+0x26>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <null_ptr_check+0x2c>
		/* Null-pointer found */
		rslt = BMP280_E_NULL_PTR;
 8001406:	23ff      	movs	r3, #255	; 0xff
 8001408:	73fb      	strb	r3, [r7, #15]
 800140a:	e001      	b.n	8001410 <null_ptr_check+0x30>
	} else {
		rslt = BMP280_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800141e:	b480      	push	{r7}
 8001420:	b087      	sub	sp, #28
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 800142c:	2301      	movs	r3, #1
 800142e:	75fb      	strb	r3, [r7, #23]
 8001430:	e016      	b.n	8001460 <interleave_data+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	441a      	add	r2, r3
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	3b01      	subs	r3, #1
 800143e:	68b9      	ldr	r1, [r7, #8]
 8001440:	440b      	add	r3, r1
 8001442:	7812      	ldrb	r2, [r2, #0]
 8001444:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	441a      	add	r2, r3
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4619      	mov	r1, r3
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	440b      	add	r3, r1
 8001456:	7812      	ldrb	r2, [r2, #0]
 8001458:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	3301      	adds	r3, #1
 800145e:	75fb      	strb	r3, [r7, #23]
 8001460:	7dfa      	ldrb	r2, [r7, #23]
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	429a      	cmp	r2, r3
 8001466:	d3e4      	bcc.n	8001432 <interleave_data+0x14>
	}
}
 8001468:	bf00      	nop
 800146a:	371c      	adds	r7, #28
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp280_dev *dev)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b08a      	sub	sp, #40	; 0x28
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t temp[BMP280_CALIB_DATA_SIZE] = {0};
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	615a      	str	r2, [r3, #20]

	rslt = null_ptr_check(dev);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ffa7 	bl	80013e0 <null_ptr_check>
 8001492:	4603      	mov	r3, r0
 8001494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BMP280_OK) {
 8001498:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800149c:	2b00      	cmp	r3, #0
 800149e:	d17f      	bne.n	80015a0 <get_calib_param+0x12e>
		rslt = bmp280_get_regs(BMP280_DIG_T1_LSB_ADDR, temp, BMP280_CALIB_DATA_SIZE, dev);
 80014a0:	f107 010c 	add.w	r1, r7, #12
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2218      	movs	r2, #24
 80014a8:	2088      	movs	r0, #136	; 0x88
 80014aa:	f7ff facf 	bl	8000a4c <bmp280_get_regs>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BMP280_OK) {
 80014b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d171      	bne.n	80015a0 <get_calib_param+0x12e>
			dev->calib_param.dig_t1 = (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8)
 80014bc:	7b7b      	ldrb	r3, [r7, #13]
 80014be:	021b      	lsls	r3, r3, #8
			| ((uint16_t) temp[BMP280_DIG_T1_LSB_POS]));
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	7b3b      	ldrb	r3, [r7, #12]
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	4313      	orrs	r3, r2
 80014c8:	b21b      	sxth	r3, r3
			dev->calib_param.dig_t1 = (uint16_t) (((uint16_t) temp[BMP280_DIG_T1_MSB_POS] << 8)
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	821a      	strh	r2, [r3, #16]
			dev->calib_param.dig_t2 = (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8)
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	b21a      	sxth	r2, r3
			| ((int16_t) temp[BMP280_DIG_T2_LSB_POS]));
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	b21b      	sxth	r3, r3
			dev->calib_param.dig_t2 = (int16_t) (((int16_t) temp[BMP280_DIG_T2_MSB_POS] << 8)
 80014da:	4313      	orrs	r3, r2
 80014dc:	b21a      	sxth	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	825a      	strh	r2, [r3, #18]
			dev->calib_param.dig_t3 = (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8)
 80014e2:	7c7b      	ldrb	r3, [r7, #17]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b21a      	sxth	r2, r3
			| ((int16_t) temp[BMP280_DIG_T3_LSB_POS]));
 80014e8:	7c3b      	ldrb	r3, [r7, #16]
 80014ea:	b21b      	sxth	r3, r3
			dev->calib_param.dig_t3 = (int16_t) (((int16_t) temp[BMP280_DIG_T3_MSB_POS] << 8)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	829a      	strh	r2, [r3, #20]
			dev->calib_param.dig_p1 = (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8)
 80014f4:	7cfb      	ldrb	r3, [r7, #19]
 80014f6:	021b      	lsls	r3, r3, #8
			| ((uint16_t) temp[BMP280_DIG_P1_LSB_POS]));
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	7cbb      	ldrb	r3, [r7, #18]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b21b      	sxth	r3, r3
			dev->calib_param.dig_p1 = (uint16_t) (((uint16_t) temp[BMP280_DIG_P1_MSB_POS] << 8)
 8001502:	b29a      	uxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	82da      	strh	r2, [r3, #22]
			dev->calib_param.dig_p2 = (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8)
 8001508:	7d7b      	ldrb	r3, [r7, #21]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
			| ((int16_t) temp[BMP280_DIG_P2_LSB_POS]));
 800150e:	7d3b      	ldrb	r3, [r7, #20]
 8001510:	b21b      	sxth	r3, r3
			dev->calib_param.dig_p2 = (int16_t) (((int16_t) temp[BMP280_DIG_P2_MSB_POS] << 8)
 8001512:	4313      	orrs	r3, r2
 8001514:	b21a      	sxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	831a      	strh	r2, [r3, #24]
			dev->calib_param.dig_p3 = (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8)
 800151a:	7dfb      	ldrb	r3, [r7, #23]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
			| ((int16_t) temp[BMP280_DIG_P3_LSB_POS]));
 8001520:	7dbb      	ldrb	r3, [r7, #22]
 8001522:	b21b      	sxth	r3, r3
			dev->calib_param.dig_p3 = (int16_t) (((int16_t) temp[BMP280_DIG_P3_MSB_POS] << 8)
 8001524:	4313      	orrs	r3, r2
 8001526:	b21a      	sxth	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	835a      	strh	r2, [r3, #26]
			dev->calib_param.dig_p4 = (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8)
 800152c:	7e7b      	ldrb	r3, [r7, #25]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21a      	sxth	r2, r3
			| ((int16_t) temp[BMP280_DIG_P4_LSB_POS]));
 8001532:	7e3b      	ldrb	r3, [r7, #24]
 8001534:	b21b      	sxth	r3, r3
			dev->calib_param.dig_p4 = (int16_t) (((int16_t) temp[BMP280_DIG_P4_MSB_POS] << 8)
 8001536:	4313      	orrs	r3, r2
 8001538:	b21a      	sxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	839a      	strh	r2, [r3, #28]
			dev->calib_param.dig_p5 = (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8)
 800153e:	7efb      	ldrb	r3, [r7, #27]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	b21a      	sxth	r2, r3
			| ((int16_t) temp[BMP280_DIG_P5_LSB_POS]));
 8001544:	7ebb      	ldrb	r3, [r7, #26]
 8001546:	b21b      	sxth	r3, r3
			dev->calib_param.dig_p5 = (int16_t) (((int16_t) temp[BMP280_DIG_P5_MSB_POS] << 8)
 8001548:	4313      	orrs	r3, r2
 800154a:	b21a      	sxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	83da      	strh	r2, [r3, #30]
			dev->calib_param.dig_p6 = (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8)
 8001550:	7f7b      	ldrb	r3, [r7, #29]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
			| ((int16_t) temp[BMP280_DIG_P6_LSB_POS]));
 8001556:	7f3b      	ldrb	r3, [r7, #28]
 8001558:	b21b      	sxth	r3, r3
			dev->calib_param.dig_p6 = (int16_t) (((int16_t) temp[BMP280_DIG_P6_MSB_POS] << 8)
 800155a:	4313      	orrs	r3, r2
 800155c:	b21a      	sxth	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	841a      	strh	r2, [r3, #32]
			dev->calib_param.dig_p7 = (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8)
 8001562:	7ffb      	ldrb	r3, [r7, #31]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
			| ((int16_t) temp[BMP280_DIG_P7_LSB_POS]));
 8001568:	7fbb      	ldrb	r3, [r7, #30]
 800156a:	b21b      	sxth	r3, r3
			dev->calib_param.dig_p7 = (int16_t) (((int16_t) temp[BMP280_DIG_P7_MSB_POS] << 8)
 800156c:	4313      	orrs	r3, r2
 800156e:	b21a      	sxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	845a      	strh	r2, [r3, #34]	; 0x22
			dev->calib_param.dig_p8 = (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8)
 8001574:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
			| ((int16_t) temp[BMP280_DIG_P8_LSB_POS]));
 800157c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001580:	b21b      	sxth	r3, r3
			dev->calib_param.dig_p8 = (int16_t) (((int16_t) temp[BMP280_DIG_P8_MSB_POS] << 8)
 8001582:	4313      	orrs	r3, r2
 8001584:	b21a      	sxth	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	849a      	strh	r2, [r3, #36]	; 0x24
			dev->calib_param.dig_p9 = (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8)
 800158a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
			| ((int16_t) temp[BMP280_DIG_P9_LSB_POS]));
 8001592:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001596:	b21b      	sxth	r3, r3
			dev->calib_param.dig_p9 = (int16_t) (((int16_t) temp[BMP280_DIG_P9_MSB_POS] << 8)
 8001598:	4313      	orrs	r3, r2
 800159a:	b21a      	sxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	return rslt;
 80015a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3728      	adds	r7, #40	; 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp280_config *conf, struct bmp280_dev *dev)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t temp[2] = { 0, 0 };
 80015ba:	2300      	movs	r3, #0
 80015bc:	753b      	strb	r3, [r7, #20]
 80015be:	2300      	movs	r3, #0
 80015c0:	757b      	strb	r3, [r7, #21]
	uint8_t reg_addr[2] = { BMP280_CTRL_MEAS_ADDR, BMP280_CONFIG_ADDR };
 80015c2:	4b56      	ldr	r3, [pc, #344]	; (800171c <conf_sensor+0x170>)
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	823b      	strh	r3, [r7, #16]

	rslt = null_ptr_check(dev);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff09 	bl	80013e0 <null_ptr_check>
 80015ce:	4603      	mov	r3, r0
 80015d0:	75fb      	strb	r3, [r7, #23]

	if ((rslt == BMP280_OK) && (conf != NULL)) {
 80015d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 8095 	bne.w	8001706 <conf_sensor+0x15a>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8091 	beq.w	8001706 <conf_sensor+0x15a>

		rslt = bmp280_get_regs(BMP280_CTRL_MEAS_ADDR, temp, 2, dev);
 80015e4:	f107 0114 	add.w	r1, r7, #20
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2202      	movs	r2, #2
 80015ec:	20f4      	movs	r0, #244	; 0xf4
 80015ee:	f7ff fa2d 	bl	8000a4c <bmp280_get_regs>
 80015f2:	4603      	mov	r3, r0
 80015f4:	75fb      	strb	r3, [r7, #23]

		if (rslt == BMP280_OK) {
 80015f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 8086 	bne.w	800170c <conf_sensor+0x160>
			/* Here the intention is to put the device to sleep
			 * within the shortest period of time
			 */
			rslt = bmp280_soft_reset(dev);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fac8 	bl	8000b96 <bmp280_soft_reset>
 8001606:	4603      	mov	r3, r0
 8001608:	75fb      	strb	r3, [r7, #23]

			if (rslt == BMP280_OK) {
 800160a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d17c      	bne.n	800170c <conf_sensor+0x160>
				temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_TEMP, conf->os_temp);
 8001612:	7d3b      	ldrb	r3, [r7, #20]
 8001614:	b25b      	sxtb	r3, r3
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	b25a      	sxtb	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	015b      	lsls	r3, r3, #5
 8001622:	b25b      	sxtb	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b25b      	sxtb	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	753b      	strb	r3, [r7, #20]
				temp[0] = BMP280_SET_BITS(temp[0], BMP280_OS_PRES, conf->os_pres);
 800162c:	7d3b      	ldrb	r3, [r7, #20]
 800162e:	b25b      	sxtb	r3, r3
 8001630:	f023 031c 	bic.w	r3, r3, #28
 8001634:	b25a      	sxtb	r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	785b      	ldrb	r3, [r3, #1]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	b25b      	sxtb	r3, r3
 800163e:	f003 031c 	and.w	r3, r3, #28
 8001642:	b25b      	sxtb	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b25b      	sxtb	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	753b      	strb	r3, [r7, #20]
				temp[1] = BMP280_SET_BITS(temp[1], BMP280_STANDBY_DURN, conf->odr);
 800164c:	7d7b      	ldrb	r3, [r7, #21]
 800164e:	b25b      	sxtb	r3, r3
 8001650:	f003 031f 	and.w	r3, r3, #31
 8001654:	b25a      	sxtb	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	789b      	ldrb	r3, [r3, #2]
 800165a:	015b      	lsls	r3, r3, #5
 800165c:	b25b      	sxtb	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b25b      	sxtb	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	757b      	strb	r3, [r7, #21]
				temp[1] = BMP280_SET_BITS(temp[1], BMP280_FILTER, conf->filter);
 8001666:	7d7b      	ldrb	r3, [r7, #21]
 8001668:	b25b      	sxtb	r3, r3
 800166a:	f023 031c 	bic.w	r3, r3, #28
 800166e:	b25a      	sxtb	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	78db      	ldrb	r3, [r3, #3]
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	b25b      	sxtb	r3, r3
 8001678:	f003 031c 	and.w	r3, r3, #28
 800167c:	b25b      	sxtb	r3, r3
 800167e:	4313      	orrs	r3, r2
 8001680:	b25b      	sxtb	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	757b      	strb	r3, [r7, #21]
				temp[1] = BMP280_SET_BITS_POS_0(temp[1], BMP280_SPI3_ENABLE, conf->spi3w_en);
 8001686:	7d7b      	ldrb	r3, [r7, #21]
 8001688:	b25b      	sxtb	r3, r3
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	b25a      	sxtb	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	791b      	ldrb	r3, [r3, #4]
 8001694:	b25b      	sxtb	r3, r3
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	b25b      	sxtb	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	757b      	strb	r3, [r7, #21]

				rslt = bmp280_set_regs(reg_addr, temp, 2, dev);
 80016a4:	f107 0114 	add.w	r1, r7, #20
 80016a8:	f107 0010 	add.w	r0, r7, #16
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f7ff fa03 	bl	8000aba <bmp280_set_regs>
 80016b4:	4603      	mov	r3, r0
 80016b6:	75fb      	strb	r3, [r7, #23]

				if (rslt == BMP280_OK) {
 80016b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d125      	bne.n	800170c <conf_sensor+0x160>
					dev->conf = *conf;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	332c      	adds	r3, #44	; 0x2c
 80016c6:	6810      	ldr	r0, [r2, #0]
 80016c8:	6018      	str	r0, [r3, #0]
 80016ca:	7912      	ldrb	r2, [r2, #4]
 80016cc:	711a      	strb	r2, [r3, #4]
					if (mode != BMP280_SLEEP_MODE) {
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d01b      	beq.n	800170c <conf_sensor+0x160>
						/* Write only the power mode register in a separate write */
						temp[0] = BMP280_SET_BITS_POS_0(temp[0], BMP280_POWER_MODE, mode);
 80016d4:	7d3b      	ldrb	r3, [r7, #20]
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	f023 0303 	bic.w	r3, r3, #3
 80016dc:	b25a      	sxtb	r2, r3
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	753b      	strb	r3, [r7, #20]
						rslt = bmp280_set_regs(reg_addr, temp, 1, dev);
 80016f0:	f107 0114 	add.w	r1, r7, #20
 80016f4:	f107 0010 	add.w	r0, r7, #16
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f7ff f9dd 	bl	8000aba <bmp280_set_regs>
 8001700:	4603      	mov	r3, r0
 8001702:	75fb      	strb	r3, [r7, #23]
		if (rslt == BMP280_OK) {
 8001704:	e002      	b.n	800170c <conf_sensor+0x160>
				}

			}
		}
	} else {
		rslt = BMP280_E_NULL_PTR;
 8001706:	23ff      	movs	r3, #255	; 0xff
 8001708:	75fb      	strb	r3, [r7, #23]
 800170a:	e000      	b.n	800170e <conf_sensor+0x162>
		if (rslt == BMP280_OK) {
 800170c:	bf00      	nop
	}

	return rslt;
 800170e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	080074a4 	.word	0x080074a4

08001720 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <MX_DMA_Init+0x48>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <MX_DMA_Init+0x48>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <MX_DMA_Init+0x48>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2105      	movs	r1, #5
 8001742:	200e      	movs	r0, #14
 8001744:	f000 fe6b 	bl	800241e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001748:	200e      	movs	r0, #14
 800174a:	f000 fe84 	bl	8002456 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2105      	movs	r1, #5
 8001752:	200f      	movs	r0, #15
 8001754:	f000 fe63 	bl	800241e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001758:	200f      	movs	r0, #15
 800175a:	f000 fe7c 	bl	8002456 <HAL_NVIC_EnableIRQ>

}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4a06      	ldr	r2, [pc, #24]	; (8001794 <vApplicationGetIdleTaskMemory+0x28>)
 800177c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	4a05      	ldr	r2, [pc, #20]	; (8001798 <vApplicationGetIdleTaskMemory+0x2c>)
 8001782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	20000094 	.word	0x20000094
 8001798:	200000e8 	.word	0x200000e8

0800179c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800179c:	b5b0      	push	{r4, r5, r7, lr}
 800179e:	b092      	sub	sp, #72	; 0x48
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutex */
  osMutexDef(mutex);
 80017a2:	2300      	movs	r3, #0
 80017a4:	643b      	str	r3, [r7, #64]	; 0x40
 80017a6:	2300      	movs	r3, #0
 80017a8:	647b      	str	r3, [r7, #68]	; 0x44
  mutexHandle = osMutexCreate(osMutex(mutex));
 80017aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fe84 	bl	80044bc <osMutexCreate>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_FREERTOS_Init+0x88>)
 80017b8:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of semaphore */
  osSemaphoreDef(semaphore);
 80017ba:	2300      	movs	r3, #0
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80017be:	2300      	movs	r3, #0
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  semaphoreHandle = osSemaphoreCreate(osSemaphore(semaphore), 1);
 80017c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017c6:	2101      	movs	r1, #1
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 fe8f 	bl	80044ec <osSemaphoreCreate>
 80017ce:	4602      	mov	r2, r0
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <MX_FREERTOS_Init+0x8c>)
 80017d2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of bmp280Monitor */
  osThreadDef(bmp280Monitor, taskBmp280Monitor, osPriorityNormal, 0, 256);
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_FREERTOS_Init+0x90>)
 80017d6:	f107 041c 	add.w	r4, r7, #28
 80017da:	461d      	mov	r5, r3
 80017dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bmp280MonitorHandle = osThreadCreate(osThread(bmp280Monitor), NULL);
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 fe18 	bl	8004424 <osThreadCreate>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_FREERTOS_Init+0x94>)
 80017f8:	601a      	str	r2, [r3, #0]

  /* definition and creation of bluetooth */
  osThreadDef(bluetooth, taskBluetooth, osPriorityNormal, 0, 256);
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_FREERTOS_Init+0x98>)
 80017fc:	463c      	mov	r4, r7
 80017fe:	461d      	mov	r5, r3
 8001800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001804:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001808:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bluetoothHandle = osThreadCreate(osThread(bluetooth), NULL);
 800180c:	463b      	mov	r3, r7
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f002 fe07 	bl	8004424 <osThreadCreate>
 8001816:	4602      	mov	r2, r0
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <MX_FREERTOS_Init+0x9c>)
 800181a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800181c:	bf00      	nop
 800181e:	3748      	adds	r7, #72	; 0x48
 8001820:	46bd      	mov	sp, r7
 8001822:	bdb0      	pop	{r4, r5, r7, pc}
 8001824:	20001044 	.word	0x20001044
 8001828:	2000104c 	.word	0x2000104c
 800182c:	080074b8 	.word	0x080074b8
 8001830:	20001048 	.word	0x20001048
 8001834:	080074e0 	.word	0x080074e0
 8001838:	20001040 	.word	0x20001040

0800183c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <MX_GPIO_Init+0x8c>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <MX_GPIO_Init+0x8c>)
 8001856:	f043 0320 	orr.w	r3, r3, #32
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_GPIO_Init+0x8c>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0320 	and.w	r3, r3, #32
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MX_GPIO_Init+0x8c>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a16      	ldr	r2, [pc, #88]	; (80018c8 <MX_GPIO_Init+0x8c>)
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_GPIO_Init+0x8c>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_GPIO_Init+0x8c>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4a10      	ldr	r2, [pc, #64]	; (80018c8 <MX_GPIO_Init+0x8c>)
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	6193      	str	r3, [r2, #24]
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_GPIO_Init+0x8c>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	2110      	movs	r1, #16
 800189c:	480b      	ldr	r0, [pc, #44]	; (80018cc <MX_GPIO_Init+0x90>)
 800189e:	f001 f919 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80018a2:	2310      	movs	r3, #16
 80018a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2301      	movs	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	4619      	mov	r1, r3
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_GPIO_Init+0x90>)
 80018ba:	f000 ffb1 	bl	8002820 <HAL_GPIO_Init>

}
 80018be:	bf00      	nop
 80018c0:	3720      	adds	r7, #32
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010800 	.word	0x40010800

080018d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d4:	f000 fc9a 	bl	800220c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d8:	f000 f80d 	bl	80018f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018dc:	f7ff ffae 	bl	800183c <MX_GPIO_Init>
  MX_DMA_Init();
 80018e0:	f7ff ff1e 	bl	8001720 <MX_DMA_Init>
  MX_SPI1_Init();
 80018e4:	f000 f8f2 	bl	8001acc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80018e8:	f000 fb96 	bl	8002018 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80018ec:	f7ff ff56 	bl	800179c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80018f0:	f002 fd91 	bl	8004416 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <main+0x24>

080018f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b090      	sub	sp, #64	; 0x40
 80018fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fc:	f107 0318 	add.w	r3, r7, #24
 8001900:	2228      	movs	r2, #40	; 0x28
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f004 feca 	bl	800669e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001918:	2301      	movs	r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800191c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001920:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001926:	2301      	movs	r3, #1
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192a:	2302      	movs	r3, #2
 800192c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800192e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001934:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001938:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193a:	f107 0318 	add.w	r3, r7, #24
 800193e:	4618      	mov	r0, r3
 8001940:	f001 f8e0 	bl	8002b04 <HAL_RCC_OscConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800194a:	f000 f82b 	bl	80019a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800194e:	230f      	movs	r3, #15
 8001950:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001952:	2302      	movs	r3, #2
 8001954:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800195a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800195e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2102      	movs	r1, #2
 8001968:	4618      	mov	r0, r3
 800196a:	f001 fb4b 	bl	8003004 <HAL_RCC_ClockConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001974:	f000 f816 	bl	80019a4 <Error_Handler>
  }
}
 8001978:	bf00      	nop
 800197a:	3740      	adds	r7, #64	; 0x40
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d101      	bne.n	8001996 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001992:	f000 fc51 	bl	8002238 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40012c00 	.word	0x40012c00

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <SPIx_WriteRead>:
 *      Author: vbol
 */

#include "my_bmp280.h"

uint8_t SPIx_WriteRead(uint8_t Byte) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 80019be:	f107 020f 	add.w	r2, r7, #15
 80019c2:	1df9      	adds	r1, r7, #7
 80019c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2301      	movs	r3, #1
 80019cc:	4806      	ldr	r0, [pc, #24]	; (80019e8 <SPIx_WriteRead+0x38>)
 80019ce:	f001 fd69 	bl	80034a4 <HAL_SPI_TransmitReceive>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <SPIx_WriteRead+0x2e>
	  printf("hui");
 80019d8:	4804      	ldr	r0, [pc, #16]	; (80019ec <SPIx_WriteRead+0x3c>)
 80019da:	f004 fe69 	bl	80066b0 <iprintf>
  return receivedbyte;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20001050 	.word	0x20001050
 80019ec:	080074fc 	.word	0x080074fc

080019f0 <bmp280Read>:


uint8_t bmp280Read(uint8_t ID, uint8_t ReadAddr, uint8_t *pBuffer, uint16_t NumByteToRead) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	603a      	str	r2, [r7, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
 80019fe:	460b      	mov	r3, r1
 8001a00:	71bb      	strb	r3, [r7, #6]
 8001a02:	4613      	mov	r3, r2
 8001a04:	80bb      	strh	r3, [r7, #4]
  CS_OFF;
 8001a06:	2200      	movs	r2, #0
 8001a08:	2110      	movs	r1, #16
 8001a0a:	4811      	ldr	r0, [pc, #68]	; (8001a50 <bmp280Read+0x60>)
 8001a0c:	f001 f862 	bl	8002ad4 <HAL_GPIO_WritePin>
  SPIx_WriteRead(ReadAddr);
 8001a10:	79bb      	ldrb	r3, [r7, #6]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff ffcc 	bl	80019b0 <SPIx_WriteRead>
  while(NumByteToRead > 0x00) {
 8001a18:	e00c      	b.n	8001a34 <bmp280Read+0x44>
    /* Send dummy byte (0x00) to generate the SPI clock to bmp280 (Slave device) */
    *pBuffer = SPIx_WriteRead(0x00);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff ffc8 	bl	80019b0 <SPIx_WriteRead>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001a28:	88bb      	ldrh	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	80bb      	strh	r3, [r7, #4]
    pBuffer++;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	603b      	str	r3, [r7, #0]
  while(NumByteToRead > 0x00) {
 8001a34:	88bb      	ldrh	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1ef      	bne.n	8001a1a <bmp280Read+0x2a>
  }
  CS_ON;
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2110      	movs	r1, #16
 8001a3e:	4804      	ldr	r0, [pc, #16]	; (8001a50 <bmp280Read+0x60>)
 8001a40:	f001 f848 	bl	8002ad4 <HAL_GPIO_WritePin>
  return 0;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40010800 	.word	0x40010800

08001a54 <bmp280Write>:

uint8_t bmp280Write(uint8_t ID, uint8_t WriteAddr, uint8_t *pBuffer, uint16_t NumByteToWrite) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	603a      	str	r2, [r7, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
 8001a62:	460b      	mov	r3, r1
 8001a64:	71bb      	strb	r3, [r7, #6]
 8001a66:	4613      	mov	r3, r2
 8001a68:	80bb      	strh	r3, [r7, #4]
//	CS_ON;
	CS_OFF;
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2110      	movs	r1, #16
 8001a6e:	4810      	ldr	r0, [pc, #64]	; (8001ab0 <bmp280Write+0x5c>)
 8001a70:	f001 f830 	bl	8002ad4 <HAL_GPIO_WritePin>
	SPIx_WriteRead(WriteAddr);
 8001a74:	79bb      	ldrb	r3, [r7, #6]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff9a 	bl	80019b0 <SPIx_WriteRead>
	while(NumByteToWrite >= 0x01) {
 8001a7c:	e00a      	b.n	8001a94 <bmp280Write+0x40>
		SPIx_WriteRead(*pBuffer);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff94 	bl	80019b0 <SPIx_WriteRead>
		NumByteToWrite--;
 8001a88:	88bb      	ldrh	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	80bb      	strh	r3, [r7, #4]
		pBuffer++;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	603b      	str	r3, [r7, #0]
	while(NumByteToWrite >= 0x01) {
 8001a94:	88bb      	ldrh	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f1      	bne.n	8001a7e <bmp280Write+0x2a>
	}
	CS_ON;
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	4804      	ldr	r0, [pc, #16]	; (8001ab0 <bmp280Write+0x5c>)
 8001aa0:	f001 f818 	bl	8002ad4 <HAL_GPIO_WritePin>
}
 8001aa4:	bf00      	nop
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40010800 	.word	0x40010800

08001ab4 <Delay>:

void Delay(uint32_t time){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fbd7 	bl	8002270 <HAL_Delay>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001ad2:	4a18      	ldr	r2, [pc, #96]	; (8001b34 <MX_SPI1_Init+0x68>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001afc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001b00:	2228      	movs	r2, #40	; 0x28
 8001b02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001b18:	220a      	movs	r2, #10
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <MX_SPI1_Init+0x64>)
 8001b1e:	f001 fc3d 	bl	800339c <HAL_SPI_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b28:	f7ff ff3c 	bl	80019a4 <Error_Handler>
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20001050 	.word	0x20001050
 8001b34:	40013000 	.word	0x40013000

08001b38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <HAL_SPI_MspInit+0x88>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d12f      	bne.n	8001bb8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <HAL_SPI_MspInit+0x8c>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <HAL_SPI_MspInit+0x8c>)
 8001b5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b62:	6193      	str	r3, [r2, #24]
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_SPI_MspInit+0x8c>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <HAL_SPI_MspInit+0x8c>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <HAL_SPI_MspInit+0x8c>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <HAL_SPI_MspInit+0x8c>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b88:	23a0      	movs	r3, #160	; 0xa0
 8001b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <HAL_SPI_MspInit+0x90>)
 8001b9c:	f000 fe40 	bl	8002820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ba0:	2340      	movs	r3, #64	; 0x40
 8001ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <HAL_SPI_MspInit+0x90>)
 8001bb4:	f000 fe34 	bl	8002820 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001bb8:	bf00      	nop
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40013000 	.word	0x40013000
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010800 	.word	0x40010800

08001bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_MspInit+0x68>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_MspInit+0x68>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6193      	str	r3, [r2, #24]
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_MspInit+0x68>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_MspInit+0x68>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a11      	ldr	r2, [pc, #68]	; (8001c34 <HAL_MspInit+0x68>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	61d3      	str	r3, [r2, #28]
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_MspInit+0x68>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	210f      	movs	r1, #15
 8001c06:	f06f 0001 	mvn.w	r0, #1
 8001c0a:	f000 fc08 	bl	800241e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_MspInit+0x6c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_MspInit+0x6c>)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010000 	.word	0x40010000

08001c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08c      	sub	sp, #48	; 0x30
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	2019      	movs	r0, #25
 8001c52:	f000 fbe4 	bl	800241e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8001c56:	2019      	movs	r0, #25
 8001c58:	f000 fbfd 	bl	8002456 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <HAL_InitTick+0x9c>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_InitTick+0x9c>)
 8001c62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_InitTick+0x9c>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c74:	f107 0210 	add.w	r2, r7, #16
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f001 fb3e 	bl	8003300 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c84:	f001 fb28 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8001c88:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8c:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <HAL_InitTick+0xa0>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	0c9b      	lsrs	r3, r3, #18
 8001c94:	3b01      	subs	r3, #1
 8001c96:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_InitTick+0xa4>)
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_InitTick+0xa8>)
 8001c9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_InitTick+0xa4>)
 8001ca0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ca4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_InitTick+0xa4>)
 8001ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001caa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_InitTick+0xa4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_InitTick+0xa4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001cb8:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <HAL_InitTick+0xa4>)
 8001cba:	f001 fe3b 	bl	8003934 <HAL_TIM_Base_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d104      	bne.n	8001cce <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001cc4:	4806      	ldr	r0, [pc, #24]	; (8001ce0 <HAL_InitTick+0xa4>)
 8001cc6:	f001 fe8d 	bl	80039e4 <HAL_TIM_Base_Start_IT>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	e000      	b.n	8001cd0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3730      	adds	r7, #48	; 0x30
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	431bde83 	.word	0x431bde83
 8001ce0:	200010a8 	.word	0x200010a8
 8001ce4:	40012c00 	.word	0x40012c00

08001ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <HardFault_Handler+0x4>

08001cfa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <MemManage_Handler+0x4>

08001d00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <BusFault_Handler+0x4>

08001d06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <UsageFault_Handler+0x4>

08001d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <DMA1_Channel4_IRQHandler+0x10>)
 8001d1e:	f000 fc79 	bl	8002614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20001150 	.word	0x20001150

08001d2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <DMA1_Channel5_IRQHandler+0x10>)
 8001d32:	f000 fc6f 	bl	8002614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20001194 	.word	0x20001194

08001d40 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <TIM1_UP_IRQHandler+0x10>)
 8001d46:	f001 fe9f 	bl	8003a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200010a8 	.word	0x200010a8

08001d54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <USART1_IRQHandler+0x10>)
 8001d5a:	f002 f883 	bl	8003e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200011d8 	.word	0x200011d8

08001d68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	e00a      	b.n	8001d90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d7a:	f3af 8000 	nop.w
 8001d7e:	4601      	mov	r1, r0
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	60ba      	str	r2, [r7, #8]
 8001d86:	b2ca      	uxtb	r2, r1
 8001d88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbf0      	blt.n	8001d7a <_read+0x12>
	}

return len;
 8001d98:	687b      	ldr	r3, [r7, #4]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e009      	b.n	8001dc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60ba      	str	r2, [r7, #8]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	dbf1      	blt.n	8001db4 <_write+0x12>
	}
	return len;
 8001dd0:	687b      	ldr	r3, [r7, #4]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_close>:

int _close(int file)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
	return -1;
 8001de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e00:	605a      	str	r2, [r3, #4]
	return 0;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <_isatty>:

int _isatty(int file)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
	return 1;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
	return 0;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
	...

08001e3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <_sbrk+0x50>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x16>
		heap_end = &end;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <_sbrk+0x50>)
 8001e4e:	4a10      	ldr	r2, [pc, #64]	; (8001e90 <_sbrk+0x54>)
 8001e50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <_sbrk+0x50>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <_sbrk+0x50>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	466a      	mov	r2, sp
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d907      	bls.n	8001e76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001e66:	f004 fbe5 	bl	8006634 <__errno>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	230c      	movs	r3, #12
 8001e6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	e006      	b.n	8001e84 <_sbrk+0x48>
	}

	heap_end += incr;
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <_sbrk+0x50>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a03      	ldr	r2, [pc, #12]	; (8001e8c <_sbrk+0x50>)
 8001e80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200002e8 	.word	0x200002e8
 8001e90:	20001220 	.word	0x20001220

08001e94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <taskBluetooth>:
extern osSemaphoreId semaphoreHandle;
extern osMutexId mutexHandle;

double temperature;
double pressure;
void taskBluetooth(void const * argument){
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

	for(;;)
	{

		xSemaphoreTake(mutexHandle, portMAX_DELAY);
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <taskBluetooth+0x3c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 fe7b 	bl	8004bac <xQueueSemaphoreTake>
		temperature = temp;
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <taskBluetooth+0x40>)
 8001eb8:	cb18      	ldmia	r3, {r3, r4}
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <taskBluetooth+0x44>)
 8001ebc:	e9c2 3400 	strd	r3, r4, [r2]
		pressure = pres;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <taskBluetooth+0x48>)
 8001ec2:	cb18      	ldmia	r3, {r3, r4}
 8001ec4:	4a09      	ldr	r2, [pc, #36]	; (8001eec <taskBluetooth+0x4c>)
 8001ec6:	e9c2 3400 	strd	r3, r4, [r2]
		xSemaphoreGive(mutexHandle);
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <taskBluetooth+0x3c>)
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	f002 fd70 	bl	80049b8 <xQueueGenericSend>
		xSemaphoreTake(mutexHandle, portMAX_DELAY);
 8001ed8:	e7e6      	b.n	8001ea8 <taskBluetooth+0x8>
 8001eda:	bf00      	nop
 8001edc:	20001044 	.word	0x20001044
 8001ee0:	20001148 	.word	0x20001148
 8001ee4:	200010f0 	.word	0x200010f0
 8001ee8:	20001100 	.word	0x20001100
 8001eec:	200010f8 	.word	0x200010f8

08001ef0 <taskBmp280Monitor>:
struct bmp280_config conf;
double temp;
double pres;

void configBMP();
void taskBmp280Monitor(void const * argument){
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

	configBMP();
 8001ef8:	f000 f838 	bl	8001f6c <configBMP>
	struct bmp280_uncomp_data ucomp_data;
	uint8_t meas_dur;
	uint8_t rslt;
	for(;;)
	{
		meas_dur = bmp280_compute_meas_time(&bmp);
 8001efc:	4817      	ldr	r0, [pc, #92]	; (8001f5c <taskBmp280Monitor+0x6c>)
 8001efe:	f7ff fa1b 	bl	8001338 <bmp280_compute_meas_time>
 8001f02:	4603      	mov	r3, r0
 8001f04:	75fb      	strb	r3, [r7, #23]
		rslt = bmp280_get_uncomp_data(&ucomp_data, &bmp);
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	4914      	ldr	r1, [pc, #80]	; (8001f5c <taskBmp280Monitor+0x6c>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe ff4d 	bl	8000dac <bmp280_get_uncomp_data>
 8001f12:	4603      	mov	r3, r0
 8001f14:	75bb      	strb	r3, [r7, #22]
		xSemaphoreTake(mutexHandle, portMAX_DELAY);
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <taskBmp280Monitor+0x70>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 fe44 	bl	8004bac <xQueueSemaphoreTake>
		temp = bmp280_comp_temp_double(ucomp_data.uncomp_temp, &bmp);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	490d      	ldr	r1, [pc, #52]	; (8001f5c <taskBmp280Monitor+0x6c>)
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe ff7f 	bl	8000e2c <bmp280_comp_temp_double>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460c      	mov	r4, r1
 8001f32:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <taskBmp280Monitor+0x74>)
 8001f34:	e9c2 3400 	strd	r3, r4, [r2]
		pres = bmp280_comp_pres_double(ucomp_data.uncomp_press, &bmp);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <taskBmp280Monitor+0x6c>)
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f847 	bl	8000fd0 <bmp280_comp_pres_double>
 8001f42:	4603      	mov	r3, r0
 8001f44:	460c      	mov	r4, r1
 8001f46:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <taskBmp280Monitor+0x78>)
 8001f48:	e9c2 3400 	strd	r3, r4, [r2]
		xSemaphoreGive(mutexHandle);
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <taskBmp280Monitor+0x70>)
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	2300      	movs	r3, #0
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	f002 fd2f 	bl	80049b8 <xQueueGenericSend>
		meas_dur = bmp280_compute_meas_time(&bmp);
 8001f5a:	e7cf      	b.n	8001efc <taskBmp280Monitor+0xc>
 8001f5c:	20001110 	.word	0x20001110
 8001f60:	20001044 	.word	0x20001044
 8001f64:	20001148 	.word	0x20001148
 8001f68:	20001100 	.word	0x20001100

08001f6c <configBMP>:
	}

}

void configBMP(){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
	CS_OFF;
 8001f72:	2200      	movs	r2, #0
 8001f74:	2110      	movs	r1, #16
 8001f76:	4821      	ldr	r0, [pc, #132]	; (8001ffc <configBMP+0x90>)
 8001f78:	f000 fdac 	bl	8002ad4 <HAL_GPIO_WritePin>
	int8_t rslt;
//	  struct bmp280_dev bmp;
//	  struct bmp280_config conf;

	  /* Sensor interface over SPI with native chip select line */
	  bmp.dev_id  =  0;
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <configBMP+0x94>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	705a      	strb	r2, [r3, #1]
	  bmp.intf = BMP280_SPI_INTF;
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <configBMP+0x94>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	709a      	strb	r2, [r3, #2]
	  bmp.read = bmp280Read;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <configBMP+0x94>)
 8001f8a:	4a1e      	ldr	r2, [pc, #120]	; (8002004 <configBMP+0x98>)
 8001f8c:	605a      	str	r2, [r3, #4]
	  bmp.write = bmp280Write;
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <configBMP+0x94>)
 8001f90:	4a1d      	ldr	r2, [pc, #116]	; (8002008 <configBMP+0x9c>)
 8001f92:	609a      	str	r2, [r3, #8]
	  bmp.delay_ms = Delay;
 8001f94:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <configBMP+0x94>)
 8001f96:	4a1d      	ldr	r2, [pc, #116]	; (800200c <configBMP+0xa0>)
 8001f98:	60da      	str	r2, [r3, #12]

	  rslt = bmp280_init(&bmp);
 8001f9a:	4819      	ldr	r0, [pc, #100]	; (8002000 <configBMP+0x94>)
 8001f9c:	f7fe fe20 	bl	8000be0 <bmp280_init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]

	  if (rslt == BMP280_OK) {
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <configBMP+0x4c>
	    /* Sensor chip ID will be printed if initialization was successful */
	    printf("\n Device found with chip id 0x%x", bmp.chip_id);
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <configBMP+0x94>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4817      	ldr	r0, [pc, #92]	; (8002010 <configBMP+0xa4>)
 8001fb4:	f004 fb7c 	bl	80066b0 <iprintf>
	  }

	  rslt = bmp280_get_config(&conf, &bmp);
 8001fb8:	4911      	ldr	r1, [pc, #68]	; (8002000 <configBMP+0x94>)
 8001fba:	4816      	ldr	r0, [pc, #88]	; (8002014 <configBMP+0xa8>)
 8001fbc:	f7fe fe76 	bl	8000cac <bmp280_get_config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	71fb      	strb	r3, [r7, #7]
//	  if (rslt != BMP280_OK)
//	  			Error();
	  /* Check if rslt == BMP280_OK, if not, then handle accordingly */

	  /* Overwrite the desired settings */
	  conf.filter = BMP280_FILTER_COEFF_2;
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <configBMP+0xa8>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	70da      	strb	r2, [r3, #3]
	  conf.os_pres = BMP280_OS_16X;
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <configBMP+0xa8>)
 8001fcc:	2205      	movs	r2, #5
 8001fce:	705a      	strb	r2, [r3, #1]
	  conf.os_temp = BMP280_OS_4X;
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <configBMP+0xa8>)
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	701a      	strb	r2, [r3, #0]
	  conf.odr = BMP280_ODR_1000_MS;
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <configBMP+0xa8>)
 8001fd8:	2205      	movs	r2, #5
 8001fda:	709a      	strb	r2, [r3, #2]

	  rslt = bmp280_set_config(&conf, &bmp);
 8001fdc:	4908      	ldr	r1, [pc, #32]	; (8002000 <configBMP+0x94>)
 8001fde:	480d      	ldr	r0, [pc, #52]	; (8002014 <configBMP+0xa8>)
 8001fe0:	f7fe feb6 	bl	8000d50 <bmp280_set_config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
//	  if (rslt != BMP280_OK)
//	    			Error();
	  /* Check if rslt == BMP280_OK, if not, then handle accordingly */

	  /* Always set the power mode after setting the configuration */
	  rslt = bmp280_set_power_mode(BMP280_NORMAL_MODE, &bmp);
 8001fe8:	4905      	ldr	r1, [pc, #20]	; (8002000 <configBMP+0x94>)
 8001fea:	2003      	movs	r0, #3
 8001fec:	f7fe febf 	bl	8000d6e <bmp280_set_power_mode>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	71fb      	strb	r3, [r7, #7]
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40010800 	.word	0x40010800
 8002000:	20001110 	.word	0x20001110
 8002004:	080019f1 	.word	0x080019f1
 8002008:	08001a55 	.word	0x08001a55
 800200c:	08001ab5 	.word	0x08001ab5
 8002010:	08007500 	.word	0x08007500
 8002014:	20001108 	.word	0x20001108

08002018 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <MX_USART1_UART_Init+0x4c>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <MX_USART1_UART_Init+0x50>)
 8002020:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <MX_USART1_UART_Init+0x4c>)
 8002024:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002028:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <MX_USART1_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <MX_USART1_UART_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <MX_USART1_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <MX_USART1_UART_Init+0x4c>)
 800203e:	220c      	movs	r2, #12
 8002040:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <MX_USART1_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <MX_USART1_UART_Init+0x4c>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800204e:	4805      	ldr	r0, [pc, #20]	; (8002064 <MX_USART1_UART_Init+0x4c>)
 8002050:	f001 feba 	bl	8003dc8 <HAL_UART_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800205a:	f7ff fca3 	bl	80019a4 <Error_Handler>
  }

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200011d8 	.word	0x200011d8
 8002068:	40013800 	.word	0x40013800

0800206c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a47      	ldr	r2, [pc, #284]	; (80021a4 <HAL_UART_MspInit+0x138>)
 8002088:	4293      	cmp	r3, r2
 800208a:	f040 8086 	bne.w	800219a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800208e:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_UART_MspInit+0x13c>)
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	4a45      	ldr	r2, [pc, #276]	; (80021a8 <HAL_UART_MspInit+0x13c>)
 8002094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002098:	6193      	str	r3, [r2, #24]
 800209a:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_UART_MspInit+0x13c>)
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <HAL_UART_MspInit+0x13c>)
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	4a3f      	ldr	r2, [pc, #252]	; (80021a8 <HAL_UART_MspInit+0x13c>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	6193      	str	r3, [r2, #24]
 80020b2:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <HAL_UART_MspInit+0x13c>)
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	4619      	mov	r1, r3
 80020d2:	4836      	ldr	r0, [pc, #216]	; (80021ac <HAL_UART_MspInit+0x140>)
 80020d4:	f000 fba4 	bl	8002820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	4619      	mov	r1, r3
 80020ec:	482f      	ldr	r0, [pc, #188]	; (80021ac <HAL_UART_MspInit+0x140>)
 80020ee:	f000 fb97 	bl	8002820 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80020f2:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <HAL_UART_MspInit+0x144>)
 80020f4:	4a2f      	ldr	r2, [pc, #188]	; (80021b4 <HAL_UART_MspInit+0x148>)
 80020f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020f8:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_UART_MspInit+0x144>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020fe:	4b2c      	ldr	r3, [pc, #176]	; (80021b0 <HAL_UART_MspInit+0x144>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <HAL_UART_MspInit+0x144>)
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800210a:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <HAL_UART_MspInit+0x144>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_UART_MspInit+0x144>)
 8002112:	2200      	movs	r2, #0
 8002114:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002116:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <HAL_UART_MspInit+0x144>)
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_UART_MspInit+0x144>)
 800211e:	2200      	movs	r2, #0
 8002120:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002122:	4823      	ldr	r0, [pc, #140]	; (80021b0 <HAL_UART_MspInit+0x144>)
 8002124:	f000 f9a6 	bl	8002474 <HAL_DMA_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800212e:	f7ff fc39 	bl	80019a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <HAL_UART_MspInit+0x144>)
 8002136:	635a      	str	r2, [r3, #52]	; 0x34
 8002138:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <HAL_UART_MspInit+0x144>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_UART_MspInit+0x14c>)
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <HAL_UART_MspInit+0x150>)
 8002142:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002144:	4b1c      	ldr	r3, [pc, #112]	; (80021b8 <HAL_UART_MspInit+0x14c>)
 8002146:	2210      	movs	r2, #16
 8002148:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800214a:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_UART_MspInit+0x14c>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_UART_MspInit+0x14c>)
 8002152:	2280      	movs	r2, #128	; 0x80
 8002154:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <HAL_UART_MspInit+0x14c>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_UART_MspInit+0x14c>)
 800215e:	2200      	movs	r2, #0
 8002160:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_UART_MspInit+0x14c>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <HAL_UART_MspInit+0x14c>)
 800216a:	2200      	movs	r2, #0
 800216c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800216e:	4812      	ldr	r0, [pc, #72]	; (80021b8 <HAL_UART_MspInit+0x14c>)
 8002170:	f000 f980 	bl	8002474 <HAL_DMA_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800217a:	f7ff fc13 	bl	80019a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_UART_MspInit+0x14c>)
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
 8002184:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <HAL_UART_MspInit+0x14c>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2105      	movs	r1, #5
 800218e:	2025      	movs	r0, #37	; 0x25
 8002190:	f000 f945 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002194:	2025      	movs	r0, #37	; 0x25
 8002196:	f000 f95e 	bl	8002456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800219a:	bf00      	nop
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010800 	.word	0x40010800
 80021b0:	20001194 	.word	0x20001194
 80021b4:	40020058 	.word	0x40020058
 80021b8:	20001150 	.word	0x20001150
 80021bc:	40020044 	.word	0x40020044

080021c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80021c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80021c2:	e003      	b.n	80021cc <LoopCopyDataInit>

080021c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80021c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80021c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80021ca:	3104      	adds	r1, #4

080021cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80021cc:	480a      	ldr	r0, [pc, #40]	; (80021f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80021d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80021d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80021d4:	d3f6      	bcc.n	80021c4 <CopyDataInit>
  ldr r2, =_sbss
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80021d8:	e002      	b.n	80021e0 <LoopFillZerobss>

080021da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80021dc:	f842 3b04 	str.w	r3, [r2], #4

080021e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80021e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80021e4:	d3f9      	bcc.n	80021da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021e6:	f7ff fe55 	bl	8001e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ea:	f004 fa29 	bl	8006640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ee:	f7ff fb6f 	bl	80018d0 <main>
  bx lr
 80021f2:	4770      	bx	lr
  ldr r3, =_sidata
 80021f4:	080075f8 	.word	0x080075f8
  ldr r0, =_sdata
 80021f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80021fc:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8002200:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8002204:	20001220 	.word	0x20001220

08002208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002208:	e7fe      	b.n	8002208 <ADC1_2_IRQHandler>
	...

0800220c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <HAL_Init+0x28>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a07      	ldr	r2, [pc, #28]	; (8002234 <HAL_Init+0x28>)
 8002216:	f043 0310 	orr.w	r3, r3, #16
 800221a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221c:	2003      	movs	r0, #3
 800221e:	f000 f8f3 	bl	8002408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002222:	2000      	movs	r0, #0
 8002224:	f7ff fd0a 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002228:	f7ff fcd0 	bl	8001bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40022000 	.word	0x40022000

08002238 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_IncTick+0x1c>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_IncTick+0x20>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4413      	add	r3, r2
 8002248:	4a03      	ldr	r2, [pc, #12]	; (8002258 <HAL_IncTick+0x20>)
 800224a:	6013      	str	r3, [r2, #0]
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	20000008 	.word	0x20000008
 8002258:	20001218 	.word	0x20001218

0800225c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return uwTick;
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <HAL_GetTick+0x10>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20001218 	.word	0x20001218

08002270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff fff0 	bl	800225c <HAL_GetTick>
 800227c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d005      	beq.n	8002296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_Delay+0x40>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002296:	bf00      	nop
 8002298:	f7ff ffe0 	bl	800225c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d8f7      	bhi.n	8002298 <HAL_Delay+0x28>
  {
  }
}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000008 	.word	0x20000008

080022b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e6:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	60d3      	str	r3, [r2, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__NVIC_GetPriorityGrouping+0x18>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0307 	and.w	r3, r3, #7
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	2b00      	cmp	r3, #0
 8002328:	db0b      	blt.n	8002342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	4906      	ldr	r1, [pc, #24]	; (800234c <__NVIC_EnableIRQ+0x34>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	2001      	movs	r0, #1
 800233a:	fa00 f202 	lsl.w	r2, r0, r2
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100

08002350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db0a      	blt.n	800237a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	490c      	ldr	r1, [pc, #48]	; (800239c <__NVIC_SetPriority+0x4c>)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	0112      	lsls	r2, r2, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	440b      	add	r3, r1
 8002374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002378:	e00a      	b.n	8002390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4908      	ldr	r1, [pc, #32]	; (80023a0 <__NVIC_SetPriority+0x50>)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	3b04      	subs	r3, #4
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	440b      	add	r3, r1
 800238e:	761a      	strb	r2, [r3, #24]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e100 	.word	0xe000e100
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f1c3 0307 	rsb	r3, r3, #7
 80023be:	2b04      	cmp	r3, #4
 80023c0:	bf28      	it	cs
 80023c2:	2304      	movcs	r3, #4
 80023c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d902      	bls.n	80023d4 <NVIC_EncodePriority+0x30>
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b03      	subs	r3, #3
 80023d2:	e000      	b.n	80023d6 <NVIC_EncodePriority+0x32>
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	f04f 32ff 	mov.w	r2, #4294967295
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43da      	mvns	r2, r3
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	fa01 f303 	lsl.w	r3, r1, r3
 80023f6:	43d9      	mvns	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	4313      	orrs	r3, r2
         );
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff4f 	bl	80022b4 <__NVIC_SetPriorityGrouping>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002430:	f7ff ff64 	bl	80022fc <__NVIC_GetPriorityGrouping>
 8002434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f7ff ffb2 	bl	80023a4 <NVIC_EncodePriority>
 8002440:	4602      	mov	r2, r0
 8002442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff81 	bl	8002350 <__NVIC_SetPriority>
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff57 	bl	8002318 <__NVIC_EnableIRQ>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e043      	b.n	8002512 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_DMA_Init+0xa8>)
 8002492:	4413      	add	r3, r2
 8002494:	4a22      	ldr	r2, [pc, #136]	; (8002520 <HAL_DMA_Init+0xac>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	009a      	lsls	r2, r3, #2
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_DMA_Init+0xb0>)
 80024a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	bffdfff8 	.word	0xbffdfff8
 8002520:	cccccccd 	.word	0xcccccccd
 8002524:	40020000 	.word	0x40020000

08002528 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800253a:	2b02      	cmp	r3, #2
 800253c:	d005      	beq.n	800254a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2204      	movs	r2, #4
 8002542:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e051      	b.n	80025ee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 020e 	bic.w	r2, r2, #14
 8002558:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a22      	ldr	r2, [pc, #136]	; (80025f8 <HAL_DMA_Abort_IT+0xd0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d029      	beq.n	80025c8 <HAL_DMA_Abort_IT+0xa0>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a20      	ldr	r2, [pc, #128]	; (80025fc <HAL_DMA_Abort_IT+0xd4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d022      	beq.n	80025c4 <HAL_DMA_Abort_IT+0x9c>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1f      	ldr	r2, [pc, #124]	; (8002600 <HAL_DMA_Abort_IT+0xd8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d01a      	beq.n	80025be <HAL_DMA_Abort_IT+0x96>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <HAL_DMA_Abort_IT+0xdc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d012      	beq.n	80025b8 <HAL_DMA_Abort_IT+0x90>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <HAL_DMA_Abort_IT+0xe0>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00a      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x8a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1a      	ldr	r2, [pc, #104]	; (800260c <HAL_DMA_Abort_IT+0xe4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d102      	bne.n	80025ac <HAL_DMA_Abort_IT+0x84>
 80025a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80025aa:	e00e      	b.n	80025ca <HAL_DMA_Abort_IT+0xa2>
 80025ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b0:	e00b      	b.n	80025ca <HAL_DMA_Abort_IT+0xa2>
 80025b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b6:	e008      	b.n	80025ca <HAL_DMA_Abort_IT+0xa2>
 80025b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025bc:	e005      	b.n	80025ca <HAL_DMA_Abort_IT+0xa2>
 80025be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025c2:	e002      	b.n	80025ca <HAL_DMA_Abort_IT+0xa2>
 80025c4:	2310      	movs	r3, #16
 80025c6:	e000      	b.n	80025ca <HAL_DMA_Abort_IT+0xa2>
 80025c8:	2301      	movs	r3, #1
 80025ca:	4a11      	ldr	r2, [pc, #68]	; (8002610 <HAL_DMA_Abort_IT+0xe8>)
 80025cc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
    } 
  }
  return status;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40020008 	.word	0x40020008
 80025fc:	4002001c 	.word	0x4002001c
 8002600:	40020030 	.word	0x40020030
 8002604:	40020044 	.word	0x40020044
 8002608:	40020058 	.word	0x40020058
 800260c:	4002006c 	.word	0x4002006c
 8002610:	40020000 	.word	0x40020000

08002614 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	2204      	movs	r2, #4
 8002632:	409a      	lsls	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d04f      	beq.n	80026dc <HAL_DMA_IRQHandler+0xc8>
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d04a      	beq.n	80026dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0204 	bic.w	r2, r2, #4
 8002662:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a66      	ldr	r2, [pc, #408]	; (8002804 <HAL_DMA_IRQHandler+0x1f0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d029      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xae>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a65      	ldr	r2, [pc, #404]	; (8002808 <HAL_DMA_IRQHandler+0x1f4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d022      	beq.n	80026be <HAL_DMA_IRQHandler+0xaa>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a63      	ldr	r2, [pc, #396]	; (800280c <HAL_DMA_IRQHandler+0x1f8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01a      	beq.n	80026b8 <HAL_DMA_IRQHandler+0xa4>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a62      	ldr	r2, [pc, #392]	; (8002810 <HAL_DMA_IRQHandler+0x1fc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d012      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x9e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a60      	ldr	r2, [pc, #384]	; (8002814 <HAL_DMA_IRQHandler+0x200>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00a      	beq.n	80026ac <HAL_DMA_IRQHandler+0x98>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a5f      	ldr	r2, [pc, #380]	; (8002818 <HAL_DMA_IRQHandler+0x204>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d102      	bne.n	80026a6 <HAL_DMA_IRQHandler+0x92>
 80026a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026a4:	e00e      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026aa:	e00b      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026b0:	e008      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026b6:	e005      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026bc:	e002      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026be:	2340      	movs	r3, #64	; 0x40
 80026c0:	e000      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026c2:	2304      	movs	r3, #4
 80026c4:	4a55      	ldr	r2, [pc, #340]	; (800281c <HAL_DMA_IRQHandler+0x208>)
 80026c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8094 	beq.w	80027fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026da:	e08e      	b.n	80027fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	2202      	movs	r2, #2
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d056      	beq.n	800279a <HAL_DMA_IRQHandler+0x186>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d051      	beq.n	800279a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 020a 	bic.w	r2, r2, #10
 8002712:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a38      	ldr	r2, [pc, #224]	; (8002804 <HAL_DMA_IRQHandler+0x1f0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d029      	beq.n	800277a <HAL_DMA_IRQHandler+0x166>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a37      	ldr	r2, [pc, #220]	; (8002808 <HAL_DMA_IRQHandler+0x1f4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d022      	beq.n	8002776 <HAL_DMA_IRQHandler+0x162>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a35      	ldr	r2, [pc, #212]	; (800280c <HAL_DMA_IRQHandler+0x1f8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01a      	beq.n	8002770 <HAL_DMA_IRQHandler+0x15c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a34      	ldr	r2, [pc, #208]	; (8002810 <HAL_DMA_IRQHandler+0x1fc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d012      	beq.n	800276a <HAL_DMA_IRQHandler+0x156>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a32      	ldr	r2, [pc, #200]	; (8002814 <HAL_DMA_IRQHandler+0x200>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00a      	beq.n	8002764 <HAL_DMA_IRQHandler+0x150>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a31      	ldr	r2, [pc, #196]	; (8002818 <HAL_DMA_IRQHandler+0x204>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d102      	bne.n	800275e <HAL_DMA_IRQHandler+0x14a>
 8002758:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800275c:	e00e      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 800275e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002762:	e00b      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 8002764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002768:	e008      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 800276a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800276e:	e005      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 8002770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002774:	e002      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 8002776:	2320      	movs	r3, #32
 8002778:	e000      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 800277a:	2302      	movs	r3, #2
 800277c:	4a27      	ldr	r2, [pc, #156]	; (800281c <HAL_DMA_IRQHandler+0x208>)
 800277e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	2b00      	cmp	r3, #0
 800278e:	d034      	beq.n	80027fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002798:	e02f      	b.n	80027fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2208      	movs	r2, #8
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d028      	beq.n	80027fc <HAL_DMA_IRQHandler+0x1e8>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d023      	beq.n	80027fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 020e 	bic.w	r2, r2, #14
 80027c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f202 	lsl.w	r2, r1, r2
 80027d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
    }
  }
  return;
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
}
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40020008 	.word	0x40020008
 8002808:	4002001c 	.word	0x4002001c
 800280c:	40020030 	.word	0x40020030
 8002810:	40020044 	.word	0x40020044
 8002814:	40020058 	.word	0x40020058
 8002818:	4002006c 	.word	0x4002006c
 800281c:	40020000 	.word	0x40020000

08002820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002820:	b480      	push	{r7}
 8002822:	b08b      	sub	sp, #44	; 0x2c
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800282a:	2300      	movs	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800282e:	2300      	movs	r3, #0
 8002830:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002832:	e127      	b.n	8002a84 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002834:	2201      	movs	r2, #1
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	429a      	cmp	r2, r3
 800284e:	f040 8116 	bne.w	8002a7e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b12      	cmp	r3, #18
 8002858:	d034      	beq.n	80028c4 <HAL_GPIO_Init+0xa4>
 800285a:	2b12      	cmp	r3, #18
 800285c:	d80d      	bhi.n	800287a <HAL_GPIO_Init+0x5a>
 800285e:	2b02      	cmp	r3, #2
 8002860:	d02b      	beq.n	80028ba <HAL_GPIO_Init+0x9a>
 8002862:	2b02      	cmp	r3, #2
 8002864:	d804      	bhi.n	8002870 <HAL_GPIO_Init+0x50>
 8002866:	2b00      	cmp	r3, #0
 8002868:	d031      	beq.n	80028ce <HAL_GPIO_Init+0xae>
 800286a:	2b01      	cmp	r3, #1
 800286c:	d01c      	beq.n	80028a8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800286e:	e048      	b.n	8002902 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002870:	2b03      	cmp	r3, #3
 8002872:	d043      	beq.n	80028fc <HAL_GPIO_Init+0xdc>
 8002874:	2b11      	cmp	r3, #17
 8002876:	d01b      	beq.n	80028b0 <HAL_GPIO_Init+0x90>
          break;
 8002878:	e043      	b.n	8002902 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800287a:	4a89      	ldr	r2, [pc, #548]	; (8002aa0 <HAL_GPIO_Init+0x280>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d026      	beq.n	80028ce <HAL_GPIO_Init+0xae>
 8002880:	4a87      	ldr	r2, [pc, #540]	; (8002aa0 <HAL_GPIO_Init+0x280>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d806      	bhi.n	8002894 <HAL_GPIO_Init+0x74>
 8002886:	4a87      	ldr	r2, [pc, #540]	; (8002aa4 <HAL_GPIO_Init+0x284>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d020      	beq.n	80028ce <HAL_GPIO_Init+0xae>
 800288c:	4a86      	ldr	r2, [pc, #536]	; (8002aa8 <HAL_GPIO_Init+0x288>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d01d      	beq.n	80028ce <HAL_GPIO_Init+0xae>
          break;
 8002892:	e036      	b.n	8002902 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002894:	4a85      	ldr	r2, [pc, #532]	; (8002aac <HAL_GPIO_Init+0x28c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d019      	beq.n	80028ce <HAL_GPIO_Init+0xae>
 800289a:	4a85      	ldr	r2, [pc, #532]	; (8002ab0 <HAL_GPIO_Init+0x290>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d016      	beq.n	80028ce <HAL_GPIO_Init+0xae>
 80028a0:	4a84      	ldr	r2, [pc, #528]	; (8002ab4 <HAL_GPIO_Init+0x294>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0xae>
          break;
 80028a6:	e02c      	b.n	8002902 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	623b      	str	r3, [r7, #32]
          break;
 80028ae:	e028      	b.n	8002902 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	3304      	adds	r3, #4
 80028b6:	623b      	str	r3, [r7, #32]
          break;
 80028b8:	e023      	b.n	8002902 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	3308      	adds	r3, #8
 80028c0:	623b      	str	r3, [r7, #32]
          break;
 80028c2:	e01e      	b.n	8002902 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	330c      	adds	r3, #12
 80028ca:	623b      	str	r3, [r7, #32]
          break;
 80028cc:	e019      	b.n	8002902 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028d6:	2304      	movs	r3, #4
 80028d8:	623b      	str	r3, [r7, #32]
          break;
 80028da:	e012      	b.n	8002902 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028e4:	2308      	movs	r3, #8
 80028e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	611a      	str	r2, [r3, #16]
          break;
 80028ee:	e008      	b.n	8002902 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028f0:	2308      	movs	r3, #8
 80028f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	615a      	str	r2, [r3, #20]
          break;
 80028fa:	e002      	b.n	8002902 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028fc:	2300      	movs	r3, #0
 80028fe:	623b      	str	r3, [r7, #32]
          break;
 8002900:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2bff      	cmp	r3, #255	; 0xff
 8002906:	d801      	bhi.n	800290c <HAL_GPIO_Init+0xec>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	e001      	b.n	8002910 <HAL_GPIO_Init+0xf0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3304      	adds	r3, #4
 8002910:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2bff      	cmp	r3, #255	; 0xff
 8002916:	d802      	bhi.n	800291e <HAL_GPIO_Init+0xfe>
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	e002      	b.n	8002924 <HAL_GPIO_Init+0x104>
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	3b08      	subs	r3, #8
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	210f      	movs	r1, #15
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	401a      	ands	r2, r3
 8002936:	6a39      	ldr	r1, [r7, #32]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	431a      	orrs	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8096 	beq.w	8002a7e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002952:	4b59      	ldr	r3, [pc, #356]	; (8002ab8 <HAL_GPIO_Init+0x298>)
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	4a58      	ldr	r2, [pc, #352]	; (8002ab8 <HAL_GPIO_Init+0x298>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6193      	str	r3, [r2, #24]
 800295e:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <HAL_GPIO_Init+0x298>)
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800296a:	4a54      	ldr	r2, [pc, #336]	; (8002abc <HAL_GPIO_Init+0x29c>)
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4b      	ldr	r2, [pc, #300]	; (8002ac0 <HAL_GPIO_Init+0x2a0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_GPIO_Init+0x19e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4a      	ldr	r2, [pc, #296]	; (8002ac4 <HAL_GPIO_Init+0x2a4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00d      	beq.n	80029ba <HAL_GPIO_Init+0x19a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a49      	ldr	r2, [pc, #292]	; (8002ac8 <HAL_GPIO_Init+0x2a8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <HAL_GPIO_Init+0x196>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a48      	ldr	r2, [pc, #288]	; (8002acc <HAL_GPIO_Init+0x2ac>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d101      	bne.n	80029b2 <HAL_GPIO_Init+0x192>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e006      	b.n	80029c0 <HAL_GPIO_Init+0x1a0>
 80029b2:	2304      	movs	r3, #4
 80029b4:	e004      	b.n	80029c0 <HAL_GPIO_Init+0x1a0>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e002      	b.n	80029c0 <HAL_GPIO_Init+0x1a0>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_GPIO_Init+0x1a0>
 80029be:	2300      	movs	r3, #0
 80029c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c2:	f002 0203 	and.w	r2, r2, #3
 80029c6:	0092      	lsls	r2, r2, #2
 80029c8:	4093      	lsls	r3, r2
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029d0:	493a      	ldr	r1, [pc, #232]	; (8002abc <HAL_GPIO_Init+0x29c>)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	089b      	lsrs	r3, r3, #2
 80029d6:	3302      	adds	r3, #2
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d006      	beq.n	80029f8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029ea:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4938      	ldr	r1, [pc, #224]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]
 80029f6:	e006      	b.n	8002a06 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029f8:	4b35      	ldr	r3, [pc, #212]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	4933      	ldr	r1, [pc, #204]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d006      	beq.n	8002a20 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a12:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	492e      	ldr	r1, [pc, #184]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
 8002a1e:	e006      	b.n	8002a2e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	4929      	ldr	r1, [pc, #164]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a3a:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	4924      	ldr	r1, [pc, #144]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
 8002a46:	e006      	b.n	8002a56 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	491f      	ldr	r1, [pc, #124]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d006      	beq.n	8002a70 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	491a      	ldr	r1, [pc, #104]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60cb      	str	r3, [r1, #12]
 8002a6e:	e006      	b.n	8002a7e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	4915      	ldr	r1, [pc, #84]	; (8002ad0 <HAL_GPIO_Init+0x2b0>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	3301      	adds	r3, #1
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f47f aed0 	bne.w	8002834 <HAL_GPIO_Init+0x14>
  }
}
 8002a94:	bf00      	nop
 8002a96:	372c      	adds	r7, #44	; 0x2c
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	10210000 	.word	0x10210000
 8002aa4:	10110000 	.word	0x10110000
 8002aa8:	10120000 	.word	0x10120000
 8002aac:	10310000 	.word	0x10310000
 8002ab0:	10320000 	.word	0x10320000
 8002ab4:	10220000 	.word	0x10220000
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	40010800 	.word	0x40010800
 8002ac4:	40010c00 	.word	0x40010c00
 8002ac8:	40011000 	.word	0x40011000
 8002acc:	40011400 	.word	0x40011400
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ae4:	787b      	ldrb	r3, [r7, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aea:	887a      	ldrh	r2, [r7, #2]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002af0:	e003      	b.n	8002afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002af2:	887b      	ldrh	r3, [r7, #2]
 8002af4:	041a      	lsls	r2, r3, #16
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	611a      	str	r2, [r3, #16]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e26c      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8087 	beq.w	8002c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b24:	4b92      	ldr	r3, [pc, #584]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d00c      	beq.n	8002b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b30:	4b8f      	ldr	r3, [pc, #572]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d112      	bne.n	8002b62 <HAL_RCC_OscConfig+0x5e>
 8002b3c:	4b8c      	ldr	r3, [pc, #560]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d10b      	bne.n	8002b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4a:	4b89      	ldr	r3, [pc, #548]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d06c      	beq.n	8002c30 <HAL_RCC_OscConfig+0x12c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d168      	bne.n	8002c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e246      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCC_OscConfig+0x76>
 8002b6c:	4b80      	ldr	r3, [pc, #512]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a7f      	ldr	r2, [pc, #508]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	e02e      	b.n	8002bd8 <HAL_RCC_OscConfig+0xd4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x98>
 8002b82:	4b7b      	ldr	r3, [pc, #492]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a7a      	ldr	r2, [pc, #488]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	4b78      	ldr	r3, [pc, #480]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a77      	ldr	r2, [pc, #476]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e01d      	b.n	8002bd8 <HAL_RCC_OscConfig+0xd4>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xbc>
 8002ba6:	4b72      	ldr	r3, [pc, #456]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a71      	ldr	r2, [pc, #452]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a6e      	ldr	r2, [pc, #440]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e00b      	b.n	8002bd8 <HAL_RCC_OscConfig+0xd4>
 8002bc0:	4b6b      	ldr	r3, [pc, #428]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a6a      	ldr	r2, [pc, #424]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	4b68      	ldr	r3, [pc, #416]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a67      	ldr	r2, [pc, #412]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7ff fb3c 	bl	800225c <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7ff fb38 	bl	800225c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e1fa      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	4b5d      	ldr	r3, [pc, #372]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0xe4>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7ff fb28 	bl	800225c <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7ff fb24 	bl	800225c <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1e6      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x10c>
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d063      	beq.n	8002d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c3e:	4b4c      	ldr	r3, [pc, #304]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c4a:	4b49      	ldr	r3, [pc, #292]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d11c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x18c>
 8002c56:	4b46      	ldr	r3, [pc, #280]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d116      	bne.n	8002c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c62:	4b43      	ldr	r3, [pc, #268]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_RCC_OscConfig+0x176>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d001      	beq.n	8002c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e1ba      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7a:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4939      	ldr	r1, [pc, #228]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c8e:	e03a      	b.n	8002d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c98:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <HAL_RCC_OscConfig+0x270>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7ff fadd 	bl	800225c <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7ff fad9 	bl	800225c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e19b      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc4:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4927      	ldr	r1, [pc, #156]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]
 8002cd8:	e015      	b.n	8002d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cda:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <HAL_RCC_OscConfig+0x270>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7ff fabc 	bl	800225c <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7ff fab8 	bl	800225c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e17a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d03a      	beq.n	8002d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d019      	beq.n	8002d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d20:	f7ff fa9c 	bl	800225c <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d28:	f7ff fa98 	bl	800225c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e15a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d46:	2001      	movs	r0, #1
 8002d48:	f000 fb0a 	bl	8003360 <RCC_Delay>
 8002d4c:	e01c      	b.n	8002d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <HAL_RCC_OscConfig+0x274>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d54:	f7ff fa82 	bl	800225c <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5a:	e00f      	b.n	8002d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7ff fa7e 	bl	800225c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d908      	bls.n	8002d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e140      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	42420000 	.word	0x42420000
 8002d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	4b9e      	ldr	r3, [pc, #632]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e9      	bne.n	8002d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a6 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9a:	4b97      	ldr	r3, [pc, #604]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10d      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	4b94      	ldr	r3, [pc, #592]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4a93      	ldr	r2, [pc, #588]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db0:	61d3      	str	r3, [r2, #28]
 8002db2:	4b91      	ldr	r3, [pc, #580]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	4b8e      	ldr	r3, [pc, #568]	; (8002ffc <HAL_RCC_OscConfig+0x4f8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d118      	bne.n	8002e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dce:	4b8b      	ldr	r3, [pc, #556]	; (8002ffc <HAL_RCC_OscConfig+0x4f8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a8a      	ldr	r2, [pc, #552]	; (8002ffc <HAL_RCC_OscConfig+0x4f8>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dda:	f7ff fa3f 	bl	800225c <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de2:	f7ff fa3b 	bl	800225c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b64      	cmp	r3, #100	; 0x64
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e0fd      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	4b81      	ldr	r3, [pc, #516]	; (8002ffc <HAL_RCC_OscConfig+0x4f8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d106      	bne.n	8002e16 <HAL_RCC_OscConfig+0x312>
 8002e08:	4b7b      	ldr	r3, [pc, #492]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	4a7a      	ldr	r2, [pc, #488]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6213      	str	r3, [r2, #32]
 8002e14:	e02d      	b.n	8002e72 <HAL_RCC_OscConfig+0x36e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x334>
 8002e1e:	4b76      	ldr	r3, [pc, #472]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	4a75      	ldr	r2, [pc, #468]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6213      	str	r3, [r2, #32]
 8002e2a:	4b73      	ldr	r3, [pc, #460]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a72      	ldr	r2, [pc, #456]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	6213      	str	r3, [r2, #32]
 8002e36:	e01c      	b.n	8002e72 <HAL_RCC_OscConfig+0x36e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	d10c      	bne.n	8002e5a <HAL_RCC_OscConfig+0x356>
 8002e40:	4b6d      	ldr	r3, [pc, #436]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4a6c      	ldr	r2, [pc, #432]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e46:	f043 0304 	orr.w	r3, r3, #4
 8002e4a:	6213      	str	r3, [r2, #32]
 8002e4c:	4b6a      	ldr	r3, [pc, #424]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4a69      	ldr	r2, [pc, #420]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6213      	str	r3, [r2, #32]
 8002e58:	e00b      	b.n	8002e72 <HAL_RCC_OscConfig+0x36e>
 8002e5a:	4b67      	ldr	r3, [pc, #412]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	4a66      	ldr	r2, [pc, #408]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	6213      	str	r3, [r2, #32]
 8002e66:	4b64      	ldr	r3, [pc, #400]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	4a63      	ldr	r2, [pc, #396]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	f023 0304 	bic.w	r3, r3, #4
 8002e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d015      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7a:	f7ff f9ef 	bl	800225c <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e80:	e00a      	b.n	8002e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e82:	f7ff f9eb 	bl	800225c <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e0ab      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e98:	4b57      	ldr	r3, [pc, #348]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ee      	beq.n	8002e82 <HAL_RCC_OscConfig+0x37e>
 8002ea4:	e014      	b.n	8002ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea6:	f7ff f9d9 	bl	800225c <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7ff f9d5 	bl	800225c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e095      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec4:	4b4c      	ldr	r3, [pc, #304]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1ee      	bne.n	8002eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d105      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed6:	4b48      	ldr	r3, [pc, #288]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4a47      	ldr	r2, [pc, #284]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 8081 	beq.w	8002fee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eec:	4b42      	ldr	r3, [pc, #264]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d061      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d146      	bne.n	8002f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f00:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <HAL_RCC_OscConfig+0x4fc>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7ff f9a9 	bl	800225c <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7ff f9a5 	bl	800225c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e067      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f20:	4b35      	ldr	r3, [pc, #212]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d108      	bne.n	8002f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f36:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	492d      	ldr	r1, [pc, #180]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a19      	ldr	r1, [r3, #32]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	4927      	ldr	r1, [pc, #156]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <HAL_RCC_OscConfig+0x4fc>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f66:	f7ff f979 	bl	800225c <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6e:	f7ff f975 	bl	800225c <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e037      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f80:	4b1d      	ldr	r3, [pc, #116]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCC_OscConfig+0x46a>
 8002f8c:	e02f      	b.n	8002fee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <HAL_RCC_OscConfig+0x4fc>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7ff f962 	bl	800225c <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9c:	f7ff f95e 	bl	800225c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e020      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fae:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x498>
 8002fba:	e018      	b.n	8002fee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e013      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_OscConfig+0x4f4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d106      	bne.n	8002fea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40007000 	.word	0x40007000
 8003000:	42420060 	.word	0x42420060

08003004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0d0      	b.n	80031ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003018:	4b6a      	ldr	r3, [pc, #424]	; (80031c4 <HAL_RCC_ClockConfig+0x1c0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d910      	bls.n	8003048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b67      	ldr	r3, [pc, #412]	; (80031c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 0207 	bic.w	r2, r3, #7
 800302e:	4965      	ldr	r1, [pc, #404]	; (80031c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	4b63      	ldr	r3, [pc, #396]	; (80031c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0b8      	b.n	80031ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d020      	beq.n	8003096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d005      	beq.n	800306c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003060:	4b59      	ldr	r3, [pc, #356]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4a58      	ldr	r2, [pc, #352]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800306a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003078:	4b53      	ldr	r3, [pc, #332]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4a52      	ldr	r2, [pc, #328]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003084:	4b50      	ldr	r3, [pc, #320]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	494d      	ldr	r1, [pc, #308]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d040      	beq.n	8003124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d107      	bne.n	80030ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030aa:	4b47      	ldr	r3, [pc, #284]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d115      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e07f      	b.n	80031ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d107      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c2:	4b41      	ldr	r3, [pc, #260]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e073      	b.n	80031ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d2:	4b3d      	ldr	r3, [pc, #244]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e06b      	b.n	80031ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e2:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f023 0203 	bic.w	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4936      	ldr	r1, [pc, #216]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f4:	f7ff f8b2 	bl	800225c <HAL_GetTick>
 80030f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030fc:	f7ff f8ae 	bl	800225c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e053      	b.n	80031ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003112:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 020c 	and.w	r2, r3, #12
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	429a      	cmp	r2, r3
 8003122:	d1eb      	bne.n	80030fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003124:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d210      	bcs.n	8003154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 0207 	bic.w	r2, r3, #7
 800313a:	4922      	ldr	r1, [pc, #136]	; (80031c4 <HAL_RCC_ClockConfig+0x1c0>)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e032      	b.n	80031ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d008      	beq.n	8003172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4916      	ldr	r1, [pc, #88]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	4313      	orrs	r3, r2
 8003170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800317e:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	490e      	ldr	r1, [pc, #56]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	4313      	orrs	r3, r2
 8003190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003192:	f000 f821 	bl	80031d8 <HAL_RCC_GetSysClockFreq>
 8003196:	4601      	mov	r1, r0
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	5cd3      	ldrb	r3, [r2, r3]
 80031a6:	fa21 f303 	lsr.w	r3, r1, r3
 80031aa:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <HAL_RCC_ClockConfig+0x1cc>)
 80031ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_RCC_ClockConfig+0x1d0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe fd42 	bl	8001c3c <HAL_InitTick>

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40022000 	.word	0x40022000
 80031c8:	40021000 	.word	0x40021000
 80031cc:	08007540 	.word	0x08007540
 80031d0:	20000000 	.word	0x20000000
 80031d4:	20000004 	.word	0x20000004

080031d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d8:	b490      	push	{r4, r7}
 80031da:	b08a      	sub	sp, #40	; 0x28
 80031dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031de:	4b2a      	ldr	r3, [pc, #168]	; (8003288 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031e0:	1d3c      	adds	r4, r7, #4
 80031e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031e8:	4b28      	ldr	r3, [pc, #160]	; (800328c <HAL_RCC_GetSysClockFreq+0xb4>)
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003202:	4b23      	ldr	r3, [pc, #140]	; (8003290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b04      	cmp	r3, #4
 8003210:	d002      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x40>
 8003212:	2b08      	cmp	r3, #8
 8003214:	d003      	beq.n	800321e <HAL_RCC_GetSysClockFreq+0x46>
 8003216:	e02d      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003218:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <HAL_RCC_GetSysClockFreq+0xbc>)
 800321a:	623b      	str	r3, [r7, #32]
      break;
 800321c:	e02d      	b.n	800327a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	0c9b      	lsrs	r3, r3, #18
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800322a:	4413      	add	r3, r2
 800322c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003230:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <HAL_RCC_GetSysClockFreq+0xb8>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	0c5b      	lsrs	r3, r3, #17
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800324a:	4413      	add	r3, r2
 800324c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003250:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	4a0f      	ldr	r2, [pc, #60]	; (8003294 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003256:	fb02 f203 	mul.w	r2, r2, r3
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
 8003262:	e004      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	623b      	str	r3, [r7, #32]
      break;
 8003272:	e002      	b.n	800327a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003274:	4b07      	ldr	r3, [pc, #28]	; (8003294 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003276:	623b      	str	r3, [r7, #32]
      break;
 8003278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327a:	6a3b      	ldr	r3, [r7, #32]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3728      	adds	r7, #40	; 0x28
 8003280:	46bd      	mov	sp, r7
 8003282:	bc90      	pop	{r4, r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	08007524 	.word	0x08007524
 800328c:	08007534 	.word	0x08007534
 8003290:	40021000 	.word	0x40021000
 8003294:	007a1200 	.word	0x007a1200
 8003298:	003d0900 	.word	0x003d0900

0800329c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a0:	4b02      	ldr	r3, [pc, #8]	; (80032ac <HAL_RCC_GetHCLKFreq+0x10>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	20000000 	.word	0x20000000

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032b4:	f7ff fff2 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032b8:	4601      	mov	r1, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4a03      	ldr	r2, [pc, #12]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
 80032c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	08007550 	.word	0x08007550

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032dc:	f7ff ffde 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032e0:	4601      	mov	r1, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	0adb      	lsrs	r3, r3, #11
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4a03      	ldr	r2, [pc, #12]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ee:	5cd3      	ldrb	r3, [r2, r3]
 80032f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	08007550 	.word	0x08007550

08003300 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	220f      	movs	r2, #15
 800330e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <HAL_RCC_GetClockConfig+0x58>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0203 	and.w	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <HAL_RCC_GetClockConfig+0x58>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_GetClockConfig+0x58>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_RCC_GetClockConfig+0x58>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	08db      	lsrs	r3, r3, #3
 800333a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_RCC_GetClockConfig+0x5c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0207 	and.w	r2, r3, #7
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	40021000 	.word	0x40021000
 800335c:	40022000 	.word	0x40022000

08003360 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <RCC_Delay+0x34>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <RCC_Delay+0x38>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	0a5b      	lsrs	r3, r3, #9
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800337c:	bf00      	nop
  }
  while (Delay --);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1e5a      	subs	r2, r3, #1
 8003382:	60fa      	str	r2, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f9      	bne.n	800337c <RCC_Delay+0x1c>
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000000 	.word	0x20000000
 8003398:	10624dd3 	.word	0x10624dd3

0800339c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e076      	b.n	800349c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d108      	bne.n	80033c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033be:	d009      	beq.n	80033d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	61da      	str	r2, [r3, #28]
 80033c6:	e005      	b.n	80033d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe fba2 	bl	8001b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	ea42 0103 	orr.w	r1, r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	0c1a      	lsrs	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f002 0204 	and.w	r2, r2, #4
 800347a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800348a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b08c      	sub	sp, #48	; 0x30
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034b2:	2301      	movs	r3, #1
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_SPI_TransmitReceive+0x26>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e18a      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x33c>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034d2:	f7fe fec3 	bl	800225c <HAL_GetTick>
 80034d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80034e8:	887b      	ldrh	r3, [r7, #2]
 80034ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d00f      	beq.n	8003514 <HAL_SPI_TransmitReceive+0x70>
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034fa:	d107      	bne.n	800350c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d103      	bne.n	800350c <HAL_SPI_TransmitReceive+0x68>
 8003504:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003508:	2b04      	cmp	r3, #4
 800350a:	d003      	beq.n	8003514 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800350c:	2302      	movs	r3, #2
 800350e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003512:	e15b      	b.n	80037cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_SPI_TransmitReceive+0x82>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <HAL_SPI_TransmitReceive+0x82>
 8003520:	887b      	ldrh	r3, [r7, #2]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800352c:	e14e      	b.n	80037cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b04      	cmp	r3, #4
 8003538:	d003      	beq.n	8003542 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2205      	movs	r2, #5
 800353e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	887a      	ldrh	r2, [r7, #2]
 8003552:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	887a      	ldrh	r2, [r7, #2]
 8003558:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	887a      	ldrh	r2, [r7, #2]
 800356a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003582:	2b40      	cmp	r3, #64	; 0x40
 8003584:	d007      	beq.n	8003596 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003594:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800359e:	d178      	bne.n	8003692 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_SPI_TransmitReceive+0x10a>
 80035a8:	8b7b      	ldrh	r3, [r7, #26]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d166      	bne.n	800367c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	881a      	ldrh	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	1c9a      	adds	r2, r3, #2
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d2:	e053      	b.n	800367c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d11b      	bne.n	800361a <HAL_SPI_TransmitReceive+0x176>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d016      	beq.n	800361a <HAL_SPI_TransmitReceive+0x176>
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d113      	bne.n	800361a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	881a      	ldrh	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	1c9a      	adds	r2, r3, #2
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b01      	cmp	r3, #1
 8003626:	d119      	bne.n	800365c <HAL_SPI_TransmitReceive+0x1b8>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d014      	beq.n	800365c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	b292      	uxth	r2, r2
 800363e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003644:	1c9a      	adds	r2, r3, #2
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003658:	2301      	movs	r3, #1
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800365c:	f7fe fdfe 	bl	800225c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003668:	429a      	cmp	r2, r3
 800366a:	d807      	bhi.n	800367c <HAL_SPI_TransmitReceive+0x1d8>
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	d003      	beq.n	800367c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800367a:	e0a7      	b.n	80037cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003680:	b29b      	uxth	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1a6      	bne.n	80035d4 <HAL_SPI_TransmitReceive+0x130>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1a1      	bne.n	80035d4 <HAL_SPI_TransmitReceive+0x130>
 8003690:	e07c      	b.n	800378c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_SPI_TransmitReceive+0x1fc>
 800369a:	8b7b      	ldrh	r3, [r7, #26]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d16b      	bne.n	8003778 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	7812      	ldrb	r2, [r2, #0]
 80036ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036c6:	e057      	b.n	8003778 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d11c      	bne.n	8003710 <HAL_SPI_TransmitReceive+0x26c>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d017      	beq.n	8003710 <HAL_SPI_TransmitReceive+0x26c>
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d114      	bne.n	8003710 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	330c      	adds	r3, #12
 80036f0:	7812      	ldrb	r2, [r2, #0]
 80036f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b01      	cmp	r3, #1
 800371c:	d119      	bne.n	8003752 <HAL_SPI_TransmitReceive+0x2ae>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d014      	beq.n	8003752 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800374e:	2301      	movs	r3, #1
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003752:	f7fe fd83 	bl	800225c <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800375e:	429a      	cmp	r2, r3
 8003760:	d803      	bhi.n	800376a <HAL_SPI_TransmitReceive+0x2c6>
 8003762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d102      	bne.n	8003770 <HAL_SPI_TransmitReceive+0x2cc>
 800376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376c:	2b00      	cmp	r3, #0
 800376e:	d103      	bne.n	8003778 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003776:	e029      	b.n	80037cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1a2      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x224>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d19d      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800378c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f8b1 	bl	80038f8 <SPI_EndRxTxTransaction>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d006      	beq.n	80037aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037a8:	e010      	b.n	80037cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	e000      	b.n	80037cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80037ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3730      	adds	r7, #48	; 0x30
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037f8:	f7fe fd30 	bl	800225c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	4413      	add	r3, r2
 8003806:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003808:	f7fe fd28 	bl	800225c <HAL_GetTick>
 800380c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800380e:	4b39      	ldr	r3, [pc, #228]	; (80038f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	015b      	lsls	r3, r3, #5
 8003814:	0d1b      	lsrs	r3, r3, #20
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800381e:	e054      	b.n	80038ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d050      	beq.n	80038ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003828:	f7fe fd18 	bl	800225c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	429a      	cmp	r2, r3
 8003836:	d902      	bls.n	800383e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d13d      	bne.n	80038ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800384c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003856:	d111      	bne.n	800387c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003860:	d004      	beq.n	800386c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386a:	d107      	bne.n	800387c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003884:	d10f      	bne.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e017      	b.n	80038ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d19b      	bne.n	8003820 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000

080038f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2200      	movs	r2, #0
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f7ff ff6a 	bl	80037e8 <SPI_WaitFlagStateUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e000      	b.n	800392c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e041      	b.n	80039ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f839 	bl	80039d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f000 f9b4 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d001      	beq.n	80039fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e03a      	b.n	8003a72 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <HAL_TIM_Base_Start_IT+0x98>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x58>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a26:	d009      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x58>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_TIM_Base_Start_IT+0x58>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d111      	bne.n	8003a60 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b06      	cmp	r3, #6
 8003a4c:	d010      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5e:	e007      	b.n	8003a70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800

08003a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d122      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d11b      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0202 	mvn.w	r2, #2
 8003ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8ed 	bl	8003caa <HAL_TIM_IC_CaptureCallback>
 8003ad0:	e005      	b.n	8003ade <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f8e0 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f8ef 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d122      	bne.n	8003b38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d11b      	bne.n	8003b38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0204 	mvn.w	r2, #4
 8003b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f8c3 	bl	8003caa <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f8b6 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f8c5 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d122      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d11b      	bne.n	8003b8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0208 	mvn.w	r2, #8
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2204      	movs	r2, #4
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f899 	bl	8003caa <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f88c 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f89b 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b10      	cmp	r3, #16
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0210 	mvn.w	r2, #16
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f86f 	bl	8003caa <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f862 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f871 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d10e      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d107      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0201 	mvn.w	r2, #1
 8003c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd feba 	bl	8001980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b80      	cmp	r3, #128	; 0x80
 8003c18:	d10e      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c24:	2b80      	cmp	r3, #128	; 0x80
 8003c26:	d107      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8bf 	bl	8003db6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d10e      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	d107      	bne.n	8003c64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f835 	bl	8003cce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b20      	cmp	r3, #32
 8003c70:	d10e      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d107      	bne.n	8003c90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0220 	mvn.w	r2, #32
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f88a 	bl	8003da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a29      	ldr	r2, [pc, #164]	; (8003d98 <TIM_Base_SetConfig+0xb8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00b      	beq.n	8003d10 <TIM_Base_SetConfig+0x30>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfe:	d007      	beq.n	8003d10 <TIM_Base_SetConfig+0x30>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <TIM_Base_SetConfig+0xbc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d003      	beq.n	8003d10 <TIM_Base_SetConfig+0x30>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <TIM_Base_SetConfig+0xc0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d108      	bne.n	8003d22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a1c      	ldr	r2, [pc, #112]	; (8003d98 <TIM_Base_SetConfig+0xb8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00b      	beq.n	8003d42 <TIM_Base_SetConfig+0x62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d30:	d007      	beq.n	8003d42 <TIM_Base_SetConfig+0x62>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <TIM_Base_SetConfig+0xbc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d003      	beq.n	8003d42 <TIM_Base_SetConfig+0x62>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <TIM_Base_SetConfig+0xc0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d108      	bne.n	8003d54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a07      	ldr	r2, [pc, #28]	; (8003d98 <TIM_Base_SetConfig+0xb8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d103      	bne.n	8003d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	615a      	str	r2, [r3, #20]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40000400 	.word	0x40000400
 8003da0:	40000800 	.word	0x40000800

08003da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr

08003db6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e03f      	b.n	8003e5a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fe f93c 	bl	800206c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	; 0x24
 8003df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fa5d 	bl	80042cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10d      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x52>
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f98b 	bl	80041ca <UART_Receive_IT>
      return;
 8003eb4:	e0d1      	b.n	800405a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80b0 	beq.w	800401e <HAL_UART_IRQHandler+0x1ba>
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x70>
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80a5 	beq.w	800401e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x90>
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_UART_IRQHandler+0xb0>
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	f043 0202 	orr.w	r2, r3, #2
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_UART_IRQHandler+0xd0>
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	f043 0204 	orr.w	r2, r3, #4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00f      	beq.n	8003f5e <HAL_UART_IRQHandler+0xfa>
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <HAL_UART_IRQHandler+0xee>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f56:	f043 0208 	orr.w	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d078      	beq.n	8004058 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <HAL_UART_IRQHandler+0x11c>
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f925 	bl	80041ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bf14      	ite	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	2300      	moveq	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <HAL_UART_IRQHandler+0x144>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d031      	beq.n	800400c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 f876 	bl	800409a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d023      	beq.n	8004004 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd8:	4a21      	ldr	r2, [pc, #132]	; (8004060 <HAL_UART_IRQHandler+0x1fc>)
 8003fda:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe faa1 	bl	8002528 <HAL_DMA_Abort_IT>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d016      	beq.n	800401a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffa:	e00e      	b.n	800401a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f843 	bl	8004088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004002:	e00a      	b.n	800401a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f83f 	bl	8004088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400a:	e006      	b.n	800401a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f83b 	bl	8004088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004018:	e01e      	b.n	8004058 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401a:	bf00      	nop
    return;
 800401c:	e01c      	b.n	8004058 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_UART_IRQHandler+0x1d6>
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f862 	bl	80040fc <UART_Transmit_IT>
    return;
 8004038:	e00f      	b.n	800405a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_UART_IRQHandler+0x1f6>
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f8a3 	bl	800419a <UART_EndTransmit_IT>
    return;
 8004054:	bf00      	nop
 8004056:	e000      	b.n	800405a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004058:	bf00      	nop
  }
}
 800405a:	3720      	adds	r7, #32
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	080040d5 	.word	0x080040d5

08004064 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr

08004076 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr

0800409a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040b0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0201 	bic.w	r2, r2, #1
 80040c0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f7ff ffca 	bl	8004088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b21      	cmp	r3, #33	; 0x21
 800410e:	d13e      	bne.n	800418e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004118:	d114      	bne.n	8004144 <UART_Transmit_IT+0x48>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d110      	bne.n	8004144 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004136:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	1c9a      	adds	r2, r3, #2
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	621a      	str	r2, [r3, #32]
 8004142:	e008      	b.n	8004156 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	1c59      	adds	r1, r3, #1
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6211      	str	r1, [r2, #32]
 800414e:	781a      	ldrb	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29b      	uxth	r3, r3
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4619      	mov	r1, r3
 8004164:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10f      	bne.n	800418a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004178:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004188:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e000      	b.n	8004190 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800418e:	2302      	movs	r3, #2
  }
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff ff52 	bl	8004064 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b22      	cmp	r3, #34	; 0x22
 80041dc:	d170      	bne.n	80042c0 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e6:	d117      	bne.n	8004218 <UART_Receive_IT+0x4e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d113      	bne.n	8004218 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	b29b      	uxth	r3, r3
 8004202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004206:	b29a      	uxth	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	1c9a      	adds	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	629a      	str	r2, [r3, #40]	; 0x28
 8004216:	e026      	b.n	8004266 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422a:	d007      	beq.n	800423c <UART_Receive_IT+0x72>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <UART_Receive_IT+0x80>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	e008      	b.n	800425c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29b      	uxth	r3, r3
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4619      	mov	r1, r3
 8004274:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004276:	2b00      	cmp	r3, #0
 8004278:	d120      	bne.n	80042bc <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0220 	bic.w	r2, r2, #32
 8004288:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004298:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fedf 	bl	8004076 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e002      	b.n	80042c2 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	e000      	b.n	80042c2 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004306:	f023 030c 	bic.w	r3, r3, #12
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	430b      	orrs	r3, r1
 8004312:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a2c      	ldr	r2, [pc, #176]	; (80043e0 <UART_SetConfig+0x114>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d103      	bne.n	800433c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004334:	f7fe ffd0 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	e002      	b.n	8004342 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800433c:	f7fe ffb8 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8004340:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	009a      	lsls	r2, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <UART_SetConfig+0x118>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	0119      	lsls	r1, r3, #4
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009a      	lsls	r2, r3, #2
 800436c:	441a      	add	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	fbb2 f2f3 	udiv	r2, r2, r3
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <UART_SetConfig+0x118>)
 800437a:	fba3 0302 	umull	r0, r3, r3, r2
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	2064      	movs	r0, #100	; 0x64
 8004382:	fb00 f303 	mul.w	r3, r0, r3
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	3332      	adds	r3, #50	; 0x32
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <UART_SetConfig+0x118>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004398:	4419      	add	r1, r3
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	009a      	lsls	r2, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80043b0:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <UART_SetConfig+0x118>)
 80043b2:	fba3 0302 	umull	r0, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2064      	movs	r0, #100	; 0x64
 80043ba:	fb00 f303 	mul.w	r3, r0, r3
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	3332      	adds	r3, #50	; 0x32
 80043c4:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <UART_SetConfig+0x118>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	f003 020f 	and.w	r2, r3, #15
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	440a      	add	r2, r1
 80043d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40013800 	.word	0x40013800
 80043e4:	51eb851f 	.word	0x51eb851f

080043e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80043f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043fa:	2b84      	cmp	r3, #132	; 0x84
 80043fc:	d005      	beq.n	800440a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80043fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	3303      	adds	r3, #3
 8004408:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800440a:	68fb      	ldr	r3, [r7, #12]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800441a:	f000 ff57 	bl	80052cc <vTaskStartScheduler>
  
  return osOK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}

08004424 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af04      	add	r7, sp, #16
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d020      	beq.n	8004478 <osThreadCreate+0x54>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01c      	beq.n	8004478 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685c      	ldr	r4, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681d      	ldr	r5, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691e      	ldr	r6, [r3, #16]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff ffc9 	bl	80043e8 <makeFreeRtosPriority>
 8004456:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004460:	9202      	str	r2, [sp, #8]
 8004462:	9301      	str	r3, [sp, #4]
 8004464:	9100      	str	r1, [sp, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	4632      	mov	r2, r6
 800446a:	4629      	mov	r1, r5
 800446c:	4620      	mov	r0, r4
 800446e:	f000 fda6 	bl	8004fbe <xTaskCreateStatic>
 8004472:	4603      	mov	r3, r0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e01c      	b.n	80044b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685c      	ldr	r4, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004484:	b29e      	uxth	r6, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ffab 	bl	80043e8 <makeFreeRtosPriority>
 8004492:	4602      	mov	r2, r0
 8004494:	f107 030c 	add.w	r3, r7, #12
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	9200      	str	r2, [sp, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	4632      	mov	r2, r6
 80044a0:	4629      	mov	r1, r5
 80044a2:	4620      	mov	r0, r4
 80044a4:	f000 fde4 	bl	8005070 <xTaskCreate>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d001      	beq.n	80044b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e000      	b.n	80044b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80044b2:	68fb      	ldr	r3, [r7, #12]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044bc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d007      	beq.n	80044dc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	4619      	mov	r1, r3
 80044d2:	2001      	movs	r0, #1
 80044d4:	f000 fa54 	bl	8004980 <xQueueCreateMutexStatic>
 80044d8:	4603      	mov	r3, r0
 80044da:	e003      	b.n	80044e4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80044dc:	2001      	movs	r0, #1
 80044de:	f000 fa37 	bl	8004950 <xQueueCreateMutex>
 80044e2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d010      	beq.n	8004520 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d10b      	bne.n	800451c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	2303      	movs	r3, #3
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	2200      	movs	r2, #0
 8004510:	2100      	movs	r1, #0
 8004512:	2001      	movs	r0, #1
 8004514:	f000 f934 	bl	8004780 <xQueueGenericCreateStatic>
 8004518:	4603      	mov	r3, r0
 800451a:	e016      	b.n	800454a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800451c:	2300      	movs	r3, #0
 800451e:	e014      	b.n	800454a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d110      	bne.n	8004548 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004526:	2203      	movs	r2, #3
 8004528:	2100      	movs	r1, #0
 800452a:	2001      	movs	r0, #1
 800452c:	f000 f99a 	bl	8004864 <xQueueGenericCreate>
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <osSemaphoreCreate+0x58>
 8004538:	2300      	movs	r3, #0
 800453a:	2200      	movs	r2, #0
 800453c:	2100      	movs	r1, #0
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fa3a 	bl	80049b8 <xQueueGenericSend>
      return sema;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	e000      	b.n	800454a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004548:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f103 0208 	add.w	r2, r3, #8
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f04f 32ff 	mov.w	r2, #4294967295
 800456a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f103 0208 	add.w	r2, r3, #8
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f103 0208 	add.w	r2, r3, #8
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045ee:	b480      	push	{r7}
 80045f0:	b085      	sub	sp, #20
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d103      	bne.n	800460e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e00c      	b.n	8004628 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3308      	adds	r3, #8
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	e002      	b.n	800461c <vListInsert+0x2e>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	429a      	cmp	r2, r3
 8004626:	d2f6      	bcs.n	8004616 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	601a      	str	r2, [r3, #0]
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr

0800465e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6892      	ldr	r2, [r2, #8]
 8004674:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6852      	ldr	r2, [r2, #4]
 800467e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	429a      	cmp	r2, r3
 8004688:	d103      	bne.n	8004692 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	1e5a      	subs	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bc80      	pop	{r7}
 80046ae:	4770      	bx	lr

080046b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	e7fe      	b.n	80046d6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80046d8:	f001 fd1e 	bl	8006118 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e4:	68f9      	ldr	r1, [r7, #12]
 80046e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	441a      	add	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004708:	3b01      	subs	r3, #1
 800470a:	68f9      	ldr	r1, [r7, #12]
 800470c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	441a      	add	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	22ff      	movs	r2, #255	; 0xff
 800471c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	22ff      	movs	r2, #255	; 0xff
 8004724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d114      	bne.n	8004758 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01a      	beq.n	800476c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3310      	adds	r3, #16
 800473a:	4618      	mov	r0, r3
 800473c:	f001 f808 	bl	8005750 <xTaskRemoveFromEventList>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d012      	beq.n	800476c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004746:	4b0d      	ldr	r3, [pc, #52]	; (800477c <xQueueGenericReset+0xcc>)
 8004748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	e009      	b.n	800476c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3310      	adds	r3, #16
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fef8 	bl	8004552 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3324      	adds	r3, #36	; 0x24
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff fef3 	bl	8004552 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800476c:	f001 fd02 	bl	8006174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004770:	2301      	movs	r3, #1
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08e      	sub	sp, #56	; 0x38
 8004784:	af02      	add	r7, sp, #8
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d109      	bne.n	80047a8 <xQueueGenericCreateStatic+0x28>
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047a6:	e7fe      	b.n	80047a6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <xQueueGenericCreateStatic+0x42>
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
 80047c0:	e7fe      	b.n	80047c0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <xQueueGenericCreateStatic+0x4e>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <xQueueGenericCreateStatic+0x52>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <xQueueGenericCreateStatic+0x54>
 80047d2:	2300      	movs	r3, #0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <xQueueGenericCreateStatic+0x6c>
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	623b      	str	r3, [r7, #32]
 80047ea:	e7fe      	b.n	80047ea <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d102      	bne.n	80047f8 <xQueueGenericCreateStatic+0x78>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <xQueueGenericCreateStatic+0x7c>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <xQueueGenericCreateStatic+0x7e>
 80047fc:	2300      	movs	r3, #0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <xQueueGenericCreateStatic+0x96>
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	e7fe      	b.n	8004814 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004816:	2348      	movs	r3, #72	; 0x48
 8004818:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b48      	cmp	r3, #72	; 0x48
 800481e:	d009      	beq.n	8004834 <xQueueGenericCreateStatic+0xb4>
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	e7fe      	b.n	8004832 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00d      	beq.n	800485a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004846:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	4613      	mov	r3, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f842 	bl	80048de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800485a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800485c:	4618      	mov	r0, r3
 800485e:	3730      	adds	r7, #48	; 0x30
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004864:	b580      	push	{r7, lr}
 8004866:	b08a      	sub	sp, #40	; 0x28
 8004868:	af02      	add	r7, sp, #8
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <xQueueGenericCreate+0x28>
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	e7fe      	b.n	800488a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	e004      	b.n	80048a2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	fb02 f303 	mul.w	r3, r2, r3
 80048a0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3348      	adds	r3, #72	; 0x48
 80048a6:	4618      	mov	r0, r3
 80048a8:	f001 fcf0 	bl	800628c <pvPortMalloc>
 80048ac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00f      	beq.n	80048d4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	3348      	adds	r3, #72	; 0x48
 80048b8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048c2:	79fa      	ldrb	r2, [r7, #7]
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f805 	bl	80048de <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80048d4:	69bb      	ldr	r3, [r7, #24]
	}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e002      	b.n	8004900 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800490c:	2101      	movs	r1, #1
 800490e:	69b8      	ldr	r0, [r7, #24]
 8004910:	f7ff fece 	bl	80046b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004914:	bf00      	nop
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00e      	beq.n	8004948 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800493c:	2300      	movs	r3, #0
 800493e:	2200      	movs	r2, #0
 8004940:	2100      	movs	r1, #0
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f838 	bl	80049b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004948:	bf00      	nop
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800495a:	2301      	movs	r3, #1
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	461a      	mov	r2, r3
 8004966:	6939      	ldr	r1, [r7, #16]
 8004968:	6978      	ldr	r0, [r7, #20]
 800496a:	f7ff ff7b 	bl	8004864 <xQueueGenericCreate>
 800496e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7ff ffd3 	bl	800491c <prvInitialiseMutex>

		return pxNewQueue;
 8004976:	68fb      	ldr	r3, [r7, #12]
	}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af02      	add	r7, sp, #8
 8004986:	4603      	mov	r3, r0
 8004988:	6039      	str	r1, [r7, #0]
 800498a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800498c:	2301      	movs	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	2300      	movs	r3, #0
 8004992:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2200      	movs	r2, #0
 800499c:	6939      	ldr	r1, [r7, #16]
 800499e:	6978      	ldr	r0, [r7, #20]
 80049a0:	f7ff feee 	bl	8004780 <xQueueGenericCreateStatic>
 80049a4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff ffb8 	bl	800491c <prvInitialiseMutex>

		return pxNewQueue;
 80049ac:	68fb      	ldr	r3, [r7, #12]
	}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08e      	sub	sp, #56	; 0x38
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049c6:	2300      	movs	r3, #0
 80049c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <xQueueGenericSend+0x30>
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e6:	e7fe      	b.n	80049e6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <xQueueGenericSend+0x3e>
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <xQueueGenericSend+0x42>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <xQueueGenericSend+0x44>
 80049fa:	2300      	movs	r3, #0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <xQueueGenericSend+0x5c>
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
 8004a12:	e7fe      	b.n	8004a12 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d103      	bne.n	8004a22 <xQueueGenericSend+0x6a>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <xQueueGenericSend+0x6e>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <xQueueGenericSend+0x70>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d109      	bne.n	8004a40 <xQueueGenericSend+0x88>
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	623b      	str	r3, [r7, #32]
 8004a3e:	e7fe      	b.n	8004a3e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a40:	f001 f840 	bl	8005ac4 <xTaskGetSchedulerState>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <xQueueGenericSend+0x98>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <xQueueGenericSend+0x9c>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <xQueueGenericSend+0x9e>
 8004a54:	2300      	movs	r3, #0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <xQueueGenericSend+0xb6>
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	61fb      	str	r3, [r7, #28]
 8004a6c:	e7fe      	b.n	8004a6c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a6e:	f001 fb53 	bl	8006118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d302      	bcc.n	8004a84 <xQueueGenericSend+0xcc>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d129      	bne.n	8004ad8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a8a:	f000 f9ae 	bl	8004dea <prvCopyDataToQueue>
 8004a8e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d010      	beq.n	8004aba <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	3324      	adds	r3, #36	; 0x24
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fe57 	bl	8005750 <xTaskRemoveFromEventList>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d013      	beq.n	8004ad0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004aa8:	4b3f      	ldr	r3, [pc, #252]	; (8004ba8 <xQueueGenericSend+0x1f0>)
 8004aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	e00a      	b.n	8004ad0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d007      	beq.n	8004ad0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ac0:	4b39      	ldr	r3, [pc, #228]	; (8004ba8 <xQueueGenericSend+0x1f0>)
 8004ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ad0:	f001 fb50 	bl	8006174 <vPortExitCritical>
				return pdPASS;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e063      	b.n	8004ba0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ade:	f001 fb49 	bl	8006174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e05c      	b.n	8004ba0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aec:	f107 0314 	add.w	r3, r7, #20
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fe8f 	bl	8005814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004af6:	2301      	movs	r3, #1
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004afa:	f001 fb3b 	bl	8006174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004afe:	f000 fc43 	bl	8005388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b02:	f001 fb09 	bl	8006118 <vPortEnterCritical>
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b0c:	b25b      	sxtb	r3, r3
 8004b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b12:	d103      	bne.n	8004b1c <xQueueGenericSend+0x164>
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b22:	b25b      	sxtb	r3, r3
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d103      	bne.n	8004b32 <xQueueGenericSend+0x17a>
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b32:	f001 fb1f 	bl	8006174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b36:	1d3a      	adds	r2, r7, #4
 8004b38:	f107 0314 	add.w	r3, r7, #20
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fe7e 	bl	8005840 <xTaskCheckForTimeOut>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d124      	bne.n	8004b94 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b4c:	f000 fa1f 	bl	8004f8e <prvIsQueueFull>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d018      	beq.n	8004b88 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	3310      	adds	r3, #16
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fdd2 	bl	8005708 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b66:	f000 f9aa 	bl	8004ebe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b6a:	f000 fc1b 	bl	80053a4 <xTaskResumeAll>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f47f af7c 	bne.w	8004a6e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <xQueueGenericSend+0x1f0>)
 8004b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	e772      	b.n	8004a6e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b8a:	f000 f998 	bl	8004ebe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b8e:	f000 fc09 	bl	80053a4 <xTaskResumeAll>
 8004b92:	e76c      	b.n	8004a6e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b96:	f000 f992 	bl	8004ebe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b9a:	f000 fc03 	bl	80053a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b9e:	2300      	movs	r3, #0
		}
	}
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3738      	adds	r7, #56	; 0x38
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08e      	sub	sp, #56	; 0x38
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <xQueueSemaphoreTake+0x30>
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	623b      	str	r3, [r7, #32]
 8004bda:	e7fe      	b.n	8004bda <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d009      	beq.n	8004bf8 <xQueueSemaphoreTake+0x4c>
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	e7fe      	b.n	8004bf6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bf8:	f000 ff64 	bl	8005ac4 <xTaskGetSchedulerState>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <xQueueSemaphoreTake+0x5c>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <xQueueSemaphoreTake+0x60>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <xQueueSemaphoreTake+0x62>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <xQueueSemaphoreTake+0x7a>
 8004c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	61bb      	str	r3, [r7, #24]
 8004c24:	e7fe      	b.n	8004c24 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c26:	f001 fa77 	bl	8006118 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d024      	beq.n	8004c80 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	1e5a      	subs	r2, r3, #1
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d104      	bne.n	8004c50 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004c46:	f001 f903 	bl	8005e50 <pvTaskIncrementMutexHeldCount>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00f      	beq.n	8004c78 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	3310      	adds	r3, #16
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 fd77 	bl	8005750 <xTaskRemoveFromEventList>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d007      	beq.n	8004c78 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c68:	4b53      	ldr	r3, [pc, #332]	; (8004db8 <xQueueSemaphoreTake+0x20c>)
 8004c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c78:	f001 fa7c 	bl	8006174 <vPortExitCritical>
				return pdPASS;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e096      	b.n	8004dae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d110      	bne.n	8004ca8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d009      	beq.n	8004ca0 <xQueueSemaphoreTake+0xf4>
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	e7fe      	b.n	8004c9e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004ca0:	f001 fa68 	bl	8006174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e082      	b.n	8004dae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cae:	f107 030c 	add.w	r3, r7, #12
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fdae 	bl	8005814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cbc:	f001 fa5a 	bl	8006174 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cc0:	f000 fb62 	bl	8005388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cc4:	f001 fa28 	bl	8006118 <vPortEnterCritical>
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cce:	b25b      	sxtb	r3, r3
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d103      	bne.n	8004cde <xQueueSemaphoreTake+0x132>
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ce4:	b25b      	sxtb	r3, r3
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d103      	bne.n	8004cf4 <xQueueSemaphoreTake+0x148>
 8004cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cf4:	f001 fa3e 	bl	8006174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cf8:	463a      	mov	r2, r7
 8004cfa:	f107 030c 	add.w	r3, r7, #12
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fd9d 	bl	8005840 <xTaskCheckForTimeOut>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d132      	bne.n	8004d72 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d0e:	f000 f928 	bl	8004f62 <prvIsQueueEmpty>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d026      	beq.n	8004d66 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d109      	bne.n	8004d34 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004d20:	f001 f9fa 	bl	8006118 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fee9 	bl	8005b00 <xTaskPriorityInherit>
 8004d2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004d30:	f001 fa20 	bl	8006174 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	3324      	adds	r3, #36	; 0x24
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fce3 	bl	8005708 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d44:	f000 f8bb 	bl	8004ebe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d48:	f000 fb2c 	bl	80053a4 <xTaskResumeAll>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f47f af69 	bne.w	8004c26 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004d54:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <xQueueSemaphoreTake+0x20c>)
 8004d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	e75f      	b.n	8004c26 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004d66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d68:	f000 f8a9 	bl	8004ebe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d6c:	f000 fb1a 	bl	80053a4 <xTaskResumeAll>
 8004d70:	e759      	b.n	8004c26 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d74:	f000 f8a3 	bl	8004ebe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d78:	f000 fb14 	bl	80053a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d7e:	f000 f8f0 	bl	8004f62 <prvIsQueueEmpty>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f43f af4e 	beq.w	8004c26 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00d      	beq.n	8004dac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004d90:	f001 f9c2 	bl	8006118 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004d94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d96:	f000 f811 	bl	8004dbc <prvGetDisinheritPriorityAfterTimeout>
 8004d9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 ffb6 	bl	8005d14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004da8:	f001 f9e4 	bl	8006174 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004dac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3738      	adds	r7, #56	; 0x38
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d006      	beq.n	8004dda <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f1c3 0307 	rsb	r3, r3, #7
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	e001      	b.n	8004dde <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004dde:	68fb      	ldr	r3, [r7, #12]
	}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr

08004dea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b086      	sub	sp, #24
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10d      	bne.n	8004e24 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d14d      	bne.n	8004eac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fef9 	bl	8005c0c <xTaskPriorityDisinherit>
 8004e1a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	605a      	str	r2, [r3, #4]
 8004e22:	e043      	b.n	8004eac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d119      	bne.n	8004e5e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6898      	ldr	r0, [r3, #8]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	461a      	mov	r2, r3
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	f001 fc27 	bl	8006688 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	441a      	add	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d32b      	bcc.n	8004eac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	609a      	str	r2, [r3, #8]
 8004e5c:	e026      	b.n	8004eac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68d8      	ldr	r0, [r3, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	461a      	mov	r2, r3
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	f001 fc0d 	bl	8006688 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	425b      	negs	r3, r3
 8004e78:	441a      	add	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d207      	bcs.n	8004e9a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	425b      	negs	r3, r3
 8004e94:	441a      	add	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d105      	bne.n	8004eac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004eb4:	697b      	ldr	r3, [r7, #20]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ec6:	f001 f927 	bl	8006118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ed0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ed2:	e011      	b.n	8004ef8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d012      	beq.n	8004f02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3324      	adds	r3, #36	; 0x24
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fc35 	bl	8005750 <xTaskRemoveFromEventList>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004eec:	f000 fd08 	bl	8005900 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	dce9      	bgt.n	8004ed4 <prvUnlockQueue+0x16>
 8004f00:	e000      	b.n	8004f04 <prvUnlockQueue+0x46>
					break;
 8004f02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f0c:	f001 f932 	bl	8006174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f10:	f001 f902 	bl	8006118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f1c:	e011      	b.n	8004f42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d012      	beq.n	8004f4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3310      	adds	r3, #16
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fc10 	bl	8005750 <xTaskRemoveFromEventList>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f36:	f000 fce3 	bl	8005900 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f3a:	7bbb      	ldrb	r3, [r7, #14]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	dce9      	bgt.n	8004f1e <prvUnlockQueue+0x60>
 8004f4a:	e000      	b.n	8004f4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	22ff      	movs	r2, #255	; 0xff
 8004f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f56:	f001 f90d 	bl	8006174 <vPortExitCritical>
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f6a:	f001 f8d5 	bl	8006118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f76:	2301      	movs	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e001      	b.n	8004f80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f80:	f001 f8f8 	bl	8006174 <vPortExitCritical>

	return xReturn;
 8004f84:	68fb      	ldr	r3, [r7, #12]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f96:	f001 f8bf 	bl	8006118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d102      	bne.n	8004fac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e001      	b.n	8004fb0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fb0:	f001 f8e0 	bl	8006174 <vPortExitCritical>

	return xReturn;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b08e      	sub	sp, #56	; 0x38
 8004fc2:	af04      	add	r7, sp, #16
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
 8004fca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d109      	bne.n	8004fe6 <xTaskCreateStatic+0x28>
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	623b      	str	r3, [r7, #32]
 8004fe4:	e7fe      	b.n	8004fe4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d109      	bne.n	8005000 <xTaskCreateStatic+0x42>
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	e7fe      	b.n	8004ffe <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005000:	2354      	movs	r3, #84	; 0x54
 8005002:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2b54      	cmp	r3, #84	; 0x54
 8005008:	d009      	beq.n	800501e <xTaskCreateStatic+0x60>
 800500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	e7fe      	b.n	800501c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005020:	2b00      	cmp	r3, #0
 8005022:	d01e      	beq.n	8005062 <xTaskCreateStatic+0xa4>
 8005024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01b      	beq.n	8005062 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005032:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	2202      	movs	r2, #2
 8005038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800503c:	2300      	movs	r3, #0
 800503e:	9303      	str	r3, [sp, #12]
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	9302      	str	r3, [sp, #8]
 8005044:	f107 0314 	add.w	r3, r7, #20
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f850 	bl	80050fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800505a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800505c:	f000 f8cc 	bl	80051f8 <prvAddNewTaskToReadyList>
 8005060:	e001      	b.n	8005066 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005066:	697b      	ldr	r3, [r7, #20]
	}
 8005068:	4618      	mov	r0, r3
 800506a:	3728      	adds	r7, #40	; 0x28
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08c      	sub	sp, #48	; 0x30
 8005074:	af04      	add	r7, sp, #16
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005080:	88fb      	ldrh	r3, [r7, #6]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4618      	mov	r0, r3
 8005086:	f001 f901 	bl	800628c <pvPortMalloc>
 800508a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00e      	beq.n	80050b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005092:	2054      	movs	r0, #84	; 0x54
 8005094:	f001 f8fa 	bl	800628c <pvPortMalloc>
 8005098:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
 80050a6:	e005      	b.n	80050b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050a8:	6978      	ldr	r0, [r7, #20]
 80050aa:	f001 f9b1 	bl	8006410 <vPortFree>
 80050ae:	e001      	b.n	80050b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d017      	beq.n	80050ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	2300      	movs	r3, #0
 80050c6:	9303      	str	r3, [sp, #12]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	9302      	str	r3, [sp, #8]
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	68b9      	ldr	r1, [r7, #8]
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 f80e 	bl	80050fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050de:	69f8      	ldr	r0, [r7, #28]
 80050e0:	f000 f88a 	bl	80051f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050e4:	2301      	movs	r3, #1
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	e002      	b.n	80050f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050ea:	f04f 33ff 	mov.w	r3, #4294967295
 80050ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050f0:	69bb      	ldr	r3, [r7, #24]
	}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3720      	adds	r7, #32
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b088      	sub	sp, #32
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005112:	3b01      	subs	r3, #1
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	f023 0307 	bic.w	r3, r3, #7
 8005120:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <prvInitialiseNewTask+0x46>
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e7fe      	b.n	800513e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]
 8005144:	e012      	b.n	800516c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	4413      	add	r3, r2
 800514c:	7819      	ldrb	r1, [r3, #0]
 800514e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	3334      	adds	r3, #52	; 0x34
 8005156:	460a      	mov	r2, r1
 8005158:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	4413      	add	r3, r2
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d006      	beq.n	8005174 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3301      	adds	r3, #1
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b0f      	cmp	r3, #15
 8005170:	d9e9      	bls.n	8005146 <prvInitialiseNewTask+0x4c>
 8005172:	e000      	b.n	8005176 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005174:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	2b06      	cmp	r3, #6
 8005182:	d901      	bls.n	8005188 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005184:	2306      	movs	r3, #6
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800518c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005192:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	2200      	movs	r2, #0
 8005198:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	3304      	adds	r3, #4
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff f9f6 	bl	8004590 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	3318      	adds	r3, #24
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff f9f1 	bl	8004590 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	f1c3 0207 	rsb	r2, r3, #7
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	2200      	movs	r2, #0
 80051c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	68f9      	ldr	r1, [r7, #12]
 80051d6:	69b8      	ldr	r0, [r7, #24]
 80051d8:	f000 feb4 	bl	8005f44 <pxPortInitialiseStack>
 80051dc:	4602      	mov	r2, r0
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ee:	bf00      	nop
 80051f0:	3720      	adds	r7, #32
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005200:	f000 ff8a 	bl	8006118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <prvAddNewTaskToReadyList+0xb8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3301      	adds	r3, #1
 800520a:	4a29      	ldr	r2, [pc, #164]	; (80052b0 <prvAddNewTaskToReadyList+0xb8>)
 800520c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800520e:	4b29      	ldr	r3, [pc, #164]	; (80052b4 <prvAddNewTaskToReadyList+0xbc>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d109      	bne.n	800522a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005216:	4a27      	ldr	r2, [pc, #156]	; (80052b4 <prvAddNewTaskToReadyList+0xbc>)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800521c:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <prvAddNewTaskToReadyList+0xb8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d110      	bne.n	8005246 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005224:	f000 fb90 	bl	8005948 <prvInitialiseTaskLists>
 8005228:	e00d      	b.n	8005246 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800522a:	4b23      	ldr	r3, [pc, #140]	; (80052b8 <prvAddNewTaskToReadyList+0xc0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005232:	4b20      	ldr	r3, [pc, #128]	; (80052b4 <prvAddNewTaskToReadyList+0xbc>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	429a      	cmp	r2, r3
 800523e:	d802      	bhi.n	8005246 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005240:	4a1c      	ldr	r2, [pc, #112]	; (80052b4 <prvAddNewTaskToReadyList+0xbc>)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005246:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <prvAddNewTaskToReadyList+0xc4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3301      	adds	r3, #1
 800524c:	4a1b      	ldr	r2, [pc, #108]	; (80052bc <prvAddNewTaskToReadyList+0xc4>)
 800524e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	2201      	movs	r2, #1
 8005256:	409a      	lsls	r2, r3
 8005258:	4b19      	ldr	r3, [pc, #100]	; (80052c0 <prvAddNewTaskToReadyList+0xc8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4313      	orrs	r3, r2
 800525e:	4a18      	ldr	r2, [pc, #96]	; (80052c0 <prvAddNewTaskToReadyList+0xc8>)
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <prvAddNewTaskToReadyList+0xcc>)
 8005270:	441a      	add	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3304      	adds	r3, #4
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f7ff f995 	bl	80045a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800527e:	f000 ff79 	bl	8006174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005282:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <prvAddNewTaskToReadyList+0xc0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00e      	beq.n	80052a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800528a:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <prvAddNewTaskToReadyList+0xbc>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	429a      	cmp	r2, r3
 8005296:	d207      	bcs.n	80052a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <prvAddNewTaskToReadyList+0xd0>)
 800529a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	200003ec 	.word	0x200003ec
 80052b4:	200002ec 	.word	0x200002ec
 80052b8:	200003f8 	.word	0x200003f8
 80052bc:	20000408 	.word	0x20000408
 80052c0:	200003f4 	.word	0x200003f4
 80052c4:	200002f0 	.word	0x200002f0
 80052c8:	e000ed04 	.word	0xe000ed04

080052cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	; 0x28
 80052d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052da:	463a      	mov	r2, r7
 80052dc:	1d39      	adds	r1, r7, #4
 80052de:	f107 0308 	add.w	r3, r7, #8
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fc fa42 	bl	800176c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	9202      	str	r2, [sp, #8]
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	2300      	movs	r3, #0
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	460a      	mov	r2, r1
 80052fa:	491d      	ldr	r1, [pc, #116]	; (8005370 <vTaskStartScheduler+0xa4>)
 80052fc:	481d      	ldr	r0, [pc, #116]	; (8005374 <vTaskStartScheduler+0xa8>)
 80052fe:	f7ff fe5e 	bl	8004fbe <xTaskCreateStatic>
 8005302:	4602      	mov	r2, r0
 8005304:	4b1c      	ldr	r3, [pc, #112]	; (8005378 <vTaskStartScheduler+0xac>)
 8005306:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005308:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <vTaskStartScheduler+0xac>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005310:	2301      	movs	r3, #1
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	e001      	b.n	800531a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d115      	bne.n	800534c <vTaskStartScheduler+0x80>
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <vTaskStartScheduler+0xb0>)
 8005334:	f04f 32ff 	mov.w	r2, #4294967295
 8005338:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800533a:	4b11      	ldr	r3, [pc, #68]	; (8005380 <vTaskStartScheduler+0xb4>)
 800533c:	2201      	movs	r2, #1
 800533e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005340:	4b10      	ldr	r3, [pc, #64]	; (8005384 <vTaskStartScheduler+0xb8>)
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005346:	f000 fe77 	bl	8006038 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800534a:	e00d      	b.n	8005368 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d109      	bne.n	8005368 <vTaskStartScheduler+0x9c>
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	e7fe      	b.n	8005366 <vTaskStartScheduler+0x9a>
}
 8005368:	bf00      	nop
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	08007538 	.word	0x08007538
 8005374:	08005919 	.word	0x08005919
 8005378:	20000410 	.word	0x20000410
 800537c:	2000040c 	.word	0x2000040c
 8005380:	200003f8 	.word	0x200003f8
 8005384:	200003f0 	.word	0x200003f0

08005388 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800538c:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <vTaskSuspendAll+0x18>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3301      	adds	r3, #1
 8005392:	4a03      	ldr	r2, [pc, #12]	; (80053a0 <vTaskSuspendAll+0x18>)
 8005394:	6013      	str	r3, [r2, #0]
}
 8005396:	bf00      	nop
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000414 	.word	0x20000414

080053a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053b2:	4b41      	ldr	r3, [pc, #260]	; (80054b8 <xTaskResumeAll+0x114>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d109      	bne.n	80053ce <xTaskResumeAll+0x2a>
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	e7fe      	b.n	80053cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053ce:	f000 fea3 	bl	8006118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053d2:	4b39      	ldr	r3, [pc, #228]	; (80054b8 <xTaskResumeAll+0x114>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	4a37      	ldr	r2, [pc, #220]	; (80054b8 <xTaskResumeAll+0x114>)
 80053da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053dc:	4b36      	ldr	r3, [pc, #216]	; (80054b8 <xTaskResumeAll+0x114>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d161      	bne.n	80054a8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80053e4:	4b35      	ldr	r3, [pc, #212]	; (80054bc <xTaskResumeAll+0x118>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d05d      	beq.n	80054a8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053ec:	e02e      	b.n	800544c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80053ee:	4b34      	ldr	r3, [pc, #208]	; (80054c0 <xTaskResumeAll+0x11c>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3318      	adds	r3, #24
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff f92f 	bl	800465e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3304      	adds	r3, #4
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff f92a 	bl	800465e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	2201      	movs	r2, #1
 8005410:	409a      	lsls	r2, r3
 8005412:	4b2c      	ldr	r3, [pc, #176]	; (80054c4 <xTaskResumeAll+0x120>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4313      	orrs	r3, r2
 8005418:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <xTaskResumeAll+0x120>)
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4a27      	ldr	r2, [pc, #156]	; (80054c8 <xTaskResumeAll+0x124>)
 800542a:	441a      	add	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3304      	adds	r3, #4
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f7ff f8b8 	bl	80045a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543c:	4b23      	ldr	r3, [pc, #140]	; (80054cc <xTaskResumeAll+0x128>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	429a      	cmp	r2, r3
 8005444:	d302      	bcc.n	800544c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005446:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <xTaskResumeAll+0x12c>)
 8005448:	2201      	movs	r2, #1
 800544a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800544c:	4b1c      	ldr	r3, [pc, #112]	; (80054c0 <xTaskResumeAll+0x11c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1cc      	bne.n	80053ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800545a:	f000 fb0f 	bl	8005a7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800545e:	4b1d      	ldr	r3, [pc, #116]	; (80054d4 <xTaskResumeAll+0x130>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d010      	beq.n	800548c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800546a:	f000 f837 	bl	80054dc <xTaskIncrementTick>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005474:	4b16      	ldr	r3, [pc, #88]	; (80054d0 <xTaskResumeAll+0x12c>)
 8005476:	2201      	movs	r2, #1
 8005478:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3b01      	subs	r3, #1
 800547e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f1      	bne.n	800546a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005486:	4b13      	ldr	r3, [pc, #76]	; (80054d4 <xTaskResumeAll+0x130>)
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <xTaskResumeAll+0x12c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005494:	2301      	movs	r3, #1
 8005496:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005498:	4b0f      	ldr	r3, [pc, #60]	; (80054d8 <xTaskResumeAll+0x134>)
 800549a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054a8:	f000 fe64 	bl	8006174 <vPortExitCritical>

	return xAlreadyYielded;
 80054ac:	68bb      	ldr	r3, [r7, #8]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000414 	.word	0x20000414
 80054bc:	200003ec 	.word	0x200003ec
 80054c0:	200003ac 	.word	0x200003ac
 80054c4:	200003f4 	.word	0x200003f4
 80054c8:	200002f0 	.word	0x200002f0
 80054cc:	200002ec 	.word	0x200002ec
 80054d0:	20000400 	.word	0x20000400
 80054d4:	200003fc 	.word	0x200003fc
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054e6:	4b50      	ldr	r3, [pc, #320]	; (8005628 <xTaskIncrementTick+0x14c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 808c 	bne.w	8005608 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054f0:	4b4e      	ldr	r3, [pc, #312]	; (800562c <xTaskIncrementTick+0x150>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054f8:	4a4c      	ldr	r2, [pc, #304]	; (800562c <xTaskIncrementTick+0x150>)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d11f      	bne.n	8005544 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005504:	4b4a      	ldr	r3, [pc, #296]	; (8005630 <xTaskIncrementTick+0x154>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <xTaskIncrementTick+0x46>
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	e7fe      	b.n	8005520 <xTaskIncrementTick+0x44>
 8005522:	4b43      	ldr	r3, [pc, #268]	; (8005630 <xTaskIncrementTick+0x154>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	4b42      	ldr	r3, [pc, #264]	; (8005634 <xTaskIncrementTick+0x158>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a40      	ldr	r2, [pc, #256]	; (8005630 <xTaskIncrementTick+0x154>)
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4a40      	ldr	r2, [pc, #256]	; (8005634 <xTaskIncrementTick+0x158>)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	4b40      	ldr	r3, [pc, #256]	; (8005638 <xTaskIncrementTick+0x15c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3301      	adds	r3, #1
 800553c:	4a3e      	ldr	r2, [pc, #248]	; (8005638 <xTaskIncrementTick+0x15c>)
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	f000 fa9c 	bl	8005a7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005544:	4b3d      	ldr	r3, [pc, #244]	; (800563c <xTaskIncrementTick+0x160>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	429a      	cmp	r2, r3
 800554c:	d34d      	bcc.n	80055ea <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800554e:	4b38      	ldr	r3, [pc, #224]	; (8005630 <xTaskIncrementTick+0x154>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <xTaskIncrementTick+0x80>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <xTaskIncrementTick+0x82>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d004      	beq.n	800556c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005562:	4b36      	ldr	r3, [pc, #216]	; (800563c <xTaskIncrementTick+0x160>)
 8005564:	f04f 32ff 	mov.w	r2, #4294967295
 8005568:	601a      	str	r2, [r3, #0]
					break;
 800556a:	e03e      	b.n	80055ea <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800556c:	4b30      	ldr	r3, [pc, #192]	; (8005630 <xTaskIncrementTick+0x154>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	429a      	cmp	r2, r3
 8005582:	d203      	bcs.n	800558c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005584:	4a2d      	ldr	r2, [pc, #180]	; (800563c <xTaskIncrementTick+0x160>)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6013      	str	r3, [r2, #0]
						break;
 800558a:	e02e      	b.n	80055ea <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	3304      	adds	r3, #4
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff f864 	bl	800465e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	3318      	adds	r3, #24
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff f85b 	bl	800465e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	2201      	movs	r2, #1
 80055ae:	409a      	lsls	r2, r3
 80055b0:	4b23      	ldr	r3, [pc, #140]	; (8005640 <xTaskIncrementTick+0x164>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	4a22      	ldr	r2, [pc, #136]	; (8005640 <xTaskIncrementTick+0x164>)
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4a1f      	ldr	r2, [pc, #124]	; (8005644 <xTaskIncrementTick+0x168>)
 80055c8:	441a      	add	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	3304      	adds	r3, #4
 80055ce:	4619      	mov	r1, r3
 80055d0:	4610      	mov	r0, r2
 80055d2:	f7fe ffe9 	bl	80045a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055da:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <xTaskIncrementTick+0x16c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d3b4      	bcc.n	800554e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80055e4:	2301      	movs	r3, #1
 80055e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055e8:	e7b1      	b.n	800554e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055ea:	4b17      	ldr	r3, [pc, #92]	; (8005648 <xTaskIncrementTick+0x16c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f0:	4914      	ldr	r1, [pc, #80]	; (8005644 <xTaskIncrementTick+0x168>)
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d907      	bls.n	8005612 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005602:	2301      	movs	r3, #1
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	e004      	b.n	8005612 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005608:	4b10      	ldr	r3, [pc, #64]	; (800564c <xTaskIncrementTick+0x170>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	4a0f      	ldr	r2, [pc, #60]	; (800564c <xTaskIncrementTick+0x170>)
 8005610:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005612:	4b0f      	ldr	r3, [pc, #60]	; (8005650 <xTaskIncrementTick+0x174>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800561a:	2301      	movs	r3, #1
 800561c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800561e:	697b      	ldr	r3, [r7, #20]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20000414 	.word	0x20000414
 800562c:	200003f0 	.word	0x200003f0
 8005630:	200003a4 	.word	0x200003a4
 8005634:	200003a8 	.word	0x200003a8
 8005638:	20000404 	.word	0x20000404
 800563c:	2000040c 	.word	0x2000040c
 8005640:	200003f4 	.word	0x200003f4
 8005644:	200002f0 	.word	0x200002f0
 8005648:	200002ec 	.word	0x200002ec
 800564c:	200003fc 	.word	0x200003fc
 8005650:	20000400 	.word	0x20000400

08005654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800565a:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <vTaskSwitchContext+0xa0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005662:	4b25      	ldr	r3, [pc, #148]	; (80056f8 <vTaskSwitchContext+0xa4>)
 8005664:	2201      	movs	r2, #1
 8005666:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005668:	e03e      	b.n	80056e8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800566a:	4b23      	ldr	r3, [pc, #140]	; (80056f8 <vTaskSwitchContext+0xa4>)
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005670:	4b22      	ldr	r3, [pc, #136]	; (80056fc <vTaskSwitchContext+0xa8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	fab3 f383 	clz	r3, r3
 800567c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800567e:	7afb      	ldrb	r3, [r7, #11]
 8005680:	f1c3 031f 	rsb	r3, r3, #31
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	491e      	ldr	r1, [pc, #120]	; (8005700 <vTaskSwitchContext+0xac>)
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <vTaskSwitchContext+0x5a>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	607b      	str	r3, [r7, #4]
 80056ac:	e7fe      	b.n	80056ac <vTaskSwitchContext+0x58>
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4a11      	ldr	r2, [pc, #68]	; (8005700 <vTaskSwitchContext+0xac>)
 80056ba:	4413      	add	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	605a      	str	r2, [r3, #4]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	3308      	adds	r3, #8
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d104      	bne.n	80056de <vTaskSwitchContext+0x8a>
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4a07      	ldr	r2, [pc, #28]	; (8005704 <vTaskSwitchContext+0xb0>)
 80056e6:	6013      	str	r3, [r2, #0]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	20000414 	.word	0x20000414
 80056f8:	20000400 	.word	0x20000400
 80056fc:	200003f4 	.word	0x200003f4
 8005700:	200002f0 	.word	0x200002f0
 8005704:	200002ec 	.word	0x200002ec

08005708 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <vTaskPlaceOnEventList+0x24>
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e7fe      	b.n	800572a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800572c:	4b07      	ldr	r3, [pc, #28]	; (800574c <vTaskPlaceOnEventList+0x44>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3318      	adds	r3, #24
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fe ff5a 	bl	80045ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800573a:	2101      	movs	r1, #1
 800573c:	6838      	ldr	r0, [r7, #0]
 800573e:	f000 fb9b 	bl	8005e78 <prvAddCurrentTaskToDelayedList>
}
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	200002ec 	.word	0x200002ec

08005750 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <xTaskRemoveFromEventList+0x2a>
 8005766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	e7fe      	b.n	8005778 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	3318      	adds	r3, #24
 800577e:	4618      	mov	r0, r3
 8005780:	f7fe ff6d 	bl	800465e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005784:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <xTaskRemoveFromEventList+0xac>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d11c      	bne.n	80057c6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	3304      	adds	r3, #4
 8005790:	4618      	mov	r0, r3
 8005792:	f7fe ff64 	bl	800465e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	2201      	movs	r2, #1
 800579c:	409a      	lsls	r2, r3
 800579e:	4b18      	ldr	r3, [pc, #96]	; (8005800 <xTaskRemoveFromEventList+0xb0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	4a16      	ldr	r2, [pc, #88]	; (8005800 <xTaskRemoveFromEventList+0xb0>)
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4a13      	ldr	r2, [pc, #76]	; (8005804 <xTaskRemoveFromEventList+0xb4>)
 80057b6:	441a      	add	r2, r3
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	3304      	adds	r3, #4
 80057bc:	4619      	mov	r1, r3
 80057be:	4610      	mov	r0, r2
 80057c0:	f7fe fef2 	bl	80045a8 <vListInsertEnd>
 80057c4:	e005      	b.n	80057d2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	3318      	adds	r3, #24
 80057ca:	4619      	mov	r1, r3
 80057cc:	480e      	ldr	r0, [pc, #56]	; (8005808 <xTaskRemoveFromEventList+0xb8>)
 80057ce:	f7fe feeb 	bl	80045a8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d6:	4b0d      	ldr	r3, [pc, #52]	; (800580c <xTaskRemoveFromEventList+0xbc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	429a      	cmp	r2, r3
 80057de:	d905      	bls.n	80057ec <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057e4:	4b0a      	ldr	r3, [pc, #40]	; (8005810 <xTaskRemoveFromEventList+0xc0>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	e001      	b.n	80057f0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80057f0:	697b      	ldr	r3, [r7, #20]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000414 	.word	0x20000414
 8005800:	200003f4 	.word	0x200003f4
 8005804:	200002f0 	.word	0x200002f0
 8005808:	200003ac 	.word	0x200003ac
 800580c:	200002ec 	.word	0x200002ec
 8005810:	20000400 	.word	0x20000400

08005814 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800581c:	4b06      	ldr	r3, [pc, #24]	; (8005838 <vTaskInternalSetTimeOutState+0x24>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <vTaskInternalSetTimeOutState+0x28>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	605a      	str	r2, [r3, #4]
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	20000404 	.word	0x20000404
 800583c:	200003f0 	.word	0x200003f0

08005840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <xTaskCheckForTimeOut+0x24>
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	e7fe      	b.n	8005862 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d109      	bne.n	800587e <xTaskCheckForTimeOut+0x3e>
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	e7fe      	b.n	800587c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800587e:	f000 fc4b 	bl	8006118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005882:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <xTaskCheckForTimeOut+0xb8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d102      	bne.n	80058a2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800589c:	2300      	movs	r3, #0
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	e023      	b.n	80058ea <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4b15      	ldr	r3, [pc, #84]	; (80058fc <xTaskCheckForTimeOut+0xbc>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d007      	beq.n	80058be <xTaskCheckForTimeOut+0x7e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d302      	bcc.n	80058be <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	e015      	b.n	80058ea <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d20b      	bcs.n	80058e0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	1ad2      	subs	r2, r2, r3
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff ff9d 	bl	8005814 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
 80058de:	e004      	b.n	80058ea <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058e6:	2301      	movs	r3, #1
 80058e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058ea:	f000 fc43 	bl	8006174 <vPortExitCritical>

	return xReturn;
 80058ee:	69fb      	ldr	r3, [r7, #28]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3720      	adds	r7, #32
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	200003f0 	.word	0x200003f0
 80058fc:	20000404 	.word	0x20000404

08005900 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005904:	4b03      	ldr	r3, [pc, #12]	; (8005914 <vTaskMissedYield+0x14>)
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]
}
 800590a:	bf00      	nop
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20000400 	.word	0x20000400

08005918 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005920:	f000 f852 	bl	80059c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <prvIdleTask+0x28>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d9f9      	bls.n	8005920 <prvIdleTask+0x8>
			{
				taskYIELD();
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <prvIdleTask+0x2c>)
 800592e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800593c:	e7f0      	b.n	8005920 <prvIdleTask+0x8>
 800593e:	bf00      	nop
 8005940:	200002f0 	.word	0x200002f0
 8005944:	e000ed04 	.word	0xe000ed04

08005948 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800594e:	2300      	movs	r3, #0
 8005950:	607b      	str	r3, [r7, #4]
 8005952:	e00c      	b.n	800596e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	4613      	mov	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4a12      	ldr	r2, [pc, #72]	; (80059a8 <prvInitialiseTaskLists+0x60>)
 8005960:	4413      	add	r3, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f7fe fdf5 	bl	8004552 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3301      	adds	r3, #1
 800596c:	607b      	str	r3, [r7, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b06      	cmp	r3, #6
 8005972:	d9ef      	bls.n	8005954 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005974:	480d      	ldr	r0, [pc, #52]	; (80059ac <prvInitialiseTaskLists+0x64>)
 8005976:	f7fe fdec 	bl	8004552 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800597a:	480d      	ldr	r0, [pc, #52]	; (80059b0 <prvInitialiseTaskLists+0x68>)
 800597c:	f7fe fde9 	bl	8004552 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005980:	480c      	ldr	r0, [pc, #48]	; (80059b4 <prvInitialiseTaskLists+0x6c>)
 8005982:	f7fe fde6 	bl	8004552 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005986:	480c      	ldr	r0, [pc, #48]	; (80059b8 <prvInitialiseTaskLists+0x70>)
 8005988:	f7fe fde3 	bl	8004552 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800598c:	480b      	ldr	r0, [pc, #44]	; (80059bc <prvInitialiseTaskLists+0x74>)
 800598e:	f7fe fde0 	bl	8004552 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005992:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <prvInitialiseTaskLists+0x78>)
 8005994:	4a05      	ldr	r2, [pc, #20]	; (80059ac <prvInitialiseTaskLists+0x64>)
 8005996:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005998:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <prvInitialiseTaskLists+0x7c>)
 800599a:	4a05      	ldr	r2, [pc, #20]	; (80059b0 <prvInitialiseTaskLists+0x68>)
 800599c:	601a      	str	r2, [r3, #0]
}
 800599e:	bf00      	nop
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	200002f0 	.word	0x200002f0
 80059ac:	2000037c 	.word	0x2000037c
 80059b0:	20000390 	.word	0x20000390
 80059b4:	200003ac 	.word	0x200003ac
 80059b8:	200003c0 	.word	0x200003c0
 80059bc:	200003d8 	.word	0x200003d8
 80059c0:	200003a4 	.word	0x200003a4
 80059c4:	200003a8 	.word	0x200003a8

080059c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059ce:	e019      	b.n	8005a04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059d0:	f000 fba2 	bl	8006118 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80059d4:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <prvCheckTasksWaitingTermination+0x4c>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3304      	adds	r3, #4
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fe fe3c 	bl	800465e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059e6:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <prvCheckTasksWaitingTermination+0x50>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	4a0a      	ldr	r2, [pc, #40]	; (8005a18 <prvCheckTasksWaitingTermination+0x50>)
 80059ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059f0:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <prvCheckTasksWaitingTermination+0x54>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	4a09      	ldr	r2, [pc, #36]	; (8005a1c <prvCheckTasksWaitingTermination+0x54>)
 80059f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059fa:	f000 fbbb 	bl	8006174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f80e 	bl	8005a20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <prvCheckTasksWaitingTermination+0x54>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e1      	bne.n	80059d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a0c:	bf00      	nop
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	200003c0 	.word	0x200003c0
 8005a18:	200003ec 	.word	0x200003ec
 8005a1c:	200003d4 	.word	0x200003d4

08005a20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d108      	bne.n	8005a44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fcea 	bl	8006410 <vPortFree>
				vPortFree( pxTCB );
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fce7 	bl	8006410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a42:	e017      	b.n	8005a74 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d103      	bne.n	8005a56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fcde 	bl	8006410 <vPortFree>
	}
 8005a54:	e00e      	b.n	8005a74 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d009      	beq.n	8005a74 <prvDeleteTCB+0x54>
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	e7fe      	b.n	8005a72 <prvDeleteTCB+0x52>
	}
 8005a74:	bf00      	nop
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a82:	4b0e      	ldr	r3, [pc, #56]	; (8005abc <prvResetNextTaskUnblockTime+0x40>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <prvResetNextTaskUnblockTime+0x14>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <prvResetNextTaskUnblockTime+0x16>
 8005a90:	2300      	movs	r3, #0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d004      	beq.n	8005aa0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a96:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <prvResetNextTaskUnblockTime+0x44>)
 8005a98:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a9e:	e008      	b.n	8005ab2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005aa0:	4b06      	ldr	r3, [pc, #24]	; (8005abc <prvResetNextTaskUnblockTime+0x40>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4a04      	ldr	r2, [pc, #16]	; (8005ac0 <prvResetNextTaskUnblockTime+0x44>)
 8005ab0:	6013      	str	r3, [r2, #0]
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr
 8005abc:	200003a4 	.word	0x200003a4
 8005ac0:	2000040c 	.word	0x2000040c

08005ac4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005aca:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <xTaskGetSchedulerState+0x34>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	607b      	str	r3, [r7, #4]
 8005ad6:	e008      	b.n	8005aea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ad8:	4b08      	ldr	r3, [pc, #32]	; (8005afc <xTaskGetSchedulerState+0x38>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d102      	bne.n	8005ae6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	607b      	str	r3, [r7, #4]
 8005ae4:	e001      	b.n	8005aea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005aea:	687b      	ldr	r3, [r7, #4]
	}
 8005aec:	4618      	mov	r0, r3
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	200003f8 	.word	0x200003f8
 8005afc:	20000414 	.word	0x20000414

08005b00 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d06e      	beq.n	8005bf4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1a:	4b39      	ldr	r3, [pc, #228]	; (8005c00 <xTaskPriorityInherit+0x100>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d25e      	bcs.n	8005be2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	db06      	blt.n	8005b3a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b2c:	4b34      	ldr	r3, [pc, #208]	; (8005c00 <xTaskPriorityInherit+0x100>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	f1c3 0207 	rsb	r2, r3, #7
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	6959      	ldr	r1, [r3, #20]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4a2e      	ldr	r2, [pc, #184]	; (8005c04 <xTaskPriorityInherit+0x104>)
 8005b4c:	4413      	add	r3, r2
 8005b4e:	4299      	cmp	r1, r3
 8005b50:	d101      	bne.n	8005b56 <xTaskPriorityInherit+0x56>
 8005b52:	2301      	movs	r3, #1
 8005b54:	e000      	b.n	8005b58 <xTaskPriorityInherit+0x58>
 8005b56:	2300      	movs	r3, #0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d03a      	beq.n	8005bd2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	3304      	adds	r3, #4
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fe fd7c 	bl	800465e <uxListRemove>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d115      	bne.n	8005b98 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b70:	4924      	ldr	r1, [pc, #144]	; (8005c04 <xTaskPriorityInherit+0x104>)
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10a      	bne.n	8005b98 <xTaskPriorityInherit+0x98>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	2201      	movs	r2, #1
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	43da      	mvns	r2, r3
 8005b8e:	4b1e      	ldr	r3, [pc, #120]	; (8005c08 <xTaskPriorityInherit+0x108>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4013      	ands	r3, r2
 8005b94:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <xTaskPriorityInherit+0x108>)
 8005b96:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b98:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <xTaskPriorityInherit+0x100>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	409a      	lsls	r2, r3
 8005baa:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <xTaskPriorityInherit+0x108>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <xTaskPriorityInherit+0x108>)
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4a10      	ldr	r2, [pc, #64]	; (8005c04 <xTaskPriorityInherit+0x104>)
 8005bc2:	441a      	add	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4610      	mov	r0, r2
 8005bcc:	f7fe fcec 	bl	80045a8 <vListInsertEnd>
 8005bd0:	e004      	b.n	8005bdc <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <xTaskPriorityInherit+0x100>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	e008      	b.n	8005bf4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005be6:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <xTaskPriorityInherit+0x100>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d201      	bcs.n	8005bf4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
	}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	200002ec 	.word	0x200002ec
 8005c04:	200002f0 	.word	0x200002f0
 8005c08:	200003f4 	.word	0x200003f4

08005c0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d06c      	beq.n	8005cfc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c22:	4b39      	ldr	r3, [pc, #228]	; (8005d08 <xTaskPriorityDisinherit+0xfc>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d009      	beq.n	8005c40 <xTaskPriorityDisinherit+0x34>
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	e7fe      	b.n	8005c3e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d109      	bne.n	8005c5c <xTaskPriorityDisinherit+0x50>
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	60bb      	str	r3, [r7, #8]
 8005c5a:	e7fe      	b.n	8005c5a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c60:	1e5a      	subs	r2, r3, #1
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d044      	beq.n	8005cfc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d140      	bne.n	8005cfc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fced 	bl	800465e <uxListRemove>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d115      	bne.n	8005cb6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8e:	491f      	ldr	r1, [pc, #124]	; (8005d0c <xTaskPriorityDisinherit+0x100>)
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	440b      	add	r3, r1
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10a      	bne.n	8005cb6 <xTaskPriorityDisinherit+0xaa>
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43da      	mvns	r2, r3
 8005cac:	4b18      	ldr	r3, [pc, #96]	; (8005d10 <xTaskPriorityDisinherit+0x104>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	4a17      	ldr	r2, [pc, #92]	; (8005d10 <xTaskPriorityDisinherit+0x104>)
 8005cb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	f1c3 0207 	rsb	r2, r3, #7
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	2201      	movs	r2, #1
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <xTaskPriorityDisinherit+0x104>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	4a0d      	ldr	r2, [pc, #52]	; (8005d10 <xTaskPriorityDisinherit+0x104>)
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4a08      	ldr	r2, [pc, #32]	; (8005d0c <xTaskPriorityDisinherit+0x100>)
 8005cea:	441a      	add	r2, r3
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	3304      	adds	r3, #4
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	f7fe fc58 	bl	80045a8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cfc:	697b      	ldr	r3, [r7, #20]
	}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	200002ec 	.word	0x200002ec
 8005d0c:	200002f0 	.word	0x200002f0
 8005d10:	200003f4 	.word	0x200003f4

08005d14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d22:	2301      	movs	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8086 	beq.w	8005e3a <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	e7fe      	b.n	8005d48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d902      	bls.n	8005d5a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	e002      	b.n	8005d60 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d067      	beq.n	8005e3a <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d162      	bne.n	8005e3a <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005d74:	4b33      	ldr	r3, [pc, #204]	; (8005e44 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d109      	bne.n	8005d92 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	60bb      	str	r3, [r7, #8]
 8005d90:	e7fe      	b.n	8005d90 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	db04      	blt.n	8005db0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f1c3 0207 	rsb	r2, r3, #7
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	6959      	ldr	r1, [r3, #20]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4a22      	ldr	r2, [pc, #136]	; (8005e48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005dc0:	4413      	add	r3, r2
 8005dc2:	4299      	cmp	r1, r3
 8005dc4:	d101      	bne.n	8005dca <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d034      	beq.n	8005e3a <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe fc42 	bl	800465e <uxListRemove>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d115      	bne.n	8005e0c <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de4:	4918      	ldr	r1, [pc, #96]	; (8005e48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10a      	bne.n	8005e0c <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005e00:	43da      	mvns	r2, r3
 8005e02:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4013      	ands	r3, r2
 8005e08:	4a10      	ldr	r2, [pc, #64]	; (8005e4c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e0a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	2201      	movs	r2, #1
 8005e12:	409a      	lsls	r2, r3
 8005e14:	4b0d      	ldr	r3, [pc, #52]	; (8005e4c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	4a0c      	ldr	r2, [pc, #48]	; (8005e4c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4a07      	ldr	r2, [pc, #28]	; (8005e48 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005e2c:	441a      	add	r2, r3
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	3304      	adds	r3, #4
 8005e32:	4619      	mov	r1, r3
 8005e34:	4610      	mov	r0, r2
 8005e36:	f7fe fbb7 	bl	80045a8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e3a:	bf00      	nop
 8005e3c:	3720      	adds	r7, #32
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	200002ec 	.word	0x200002ec
 8005e48:	200002f0 	.word	0x200002f0
 8005e4c:	200003f4 	.word	0x200003f4

08005e50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e54:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e62:	3201      	adds	r2, #1
 8005e64:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005e66:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e68:	681b      	ldr	r3, [r3, #0]
	}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bc80      	pop	{r7}
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	200002ec 	.word	0x200002ec

08005e78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e82:	4b29      	ldr	r3, [pc, #164]	; (8005f28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e88:	4b28      	ldr	r3, [pc, #160]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fbe5 	bl	800465e <uxListRemove>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10b      	bne.n	8005eb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005e9a:	4b24      	ldr	r3, [pc, #144]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	43da      	mvns	r2, r3
 8005ea8:	4b21      	ldr	r3, [pc, #132]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4013      	ands	r3, r2
 8005eae:	4a20      	ldr	r2, [pc, #128]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005eb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d10a      	bne.n	8005ed0 <prvAddCurrentTaskToDelayedList+0x58>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ec0:	4b1a      	ldr	r3, [pc, #104]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	481a      	ldr	r0, [pc, #104]	; (8005f34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005eca:	f7fe fb6d 	bl	80045a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ece:	e026      	b.n	8005f1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ed8:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d209      	bcs.n	8005efc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ee8:	4b13      	ldr	r3, [pc, #76]	; (8005f38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	4b0f      	ldr	r3, [pc, #60]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f7fe fb7a 	bl	80045ee <vListInsert>
}
 8005efa:	e010      	b.n	8005f1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3304      	adds	r3, #4
 8005f06:	4619      	mov	r1, r3
 8005f08:	4610      	mov	r0, r2
 8005f0a:	f7fe fb70 	bl	80045ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d202      	bcs.n	8005f1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f18:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	6013      	str	r3, [r2, #0]
}
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	200003f0 	.word	0x200003f0
 8005f2c:	200002ec 	.word	0x200002ec
 8005f30:	200003f4 	.word	0x200003f4
 8005f34:	200003d8 	.word	0x200003d8
 8005f38:	200003a8 	.word	0x200003a8
 8005f3c:	200003a4 	.word	0x200003a4
 8005f40:	2000040c 	.word	0x2000040c

08005f44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3b04      	subs	r3, #4
 8005f54:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3b04      	subs	r3, #4
 8005f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f023 0201 	bic.w	r2, r3, #1
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3b04      	subs	r3, #4
 8005f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f74:	4a08      	ldr	r2, [pc, #32]	; (8005f98 <pxPortInitialiseStack+0x54>)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3b14      	subs	r3, #20
 8005f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3b20      	subs	r3, #32
 8005f8a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr
 8005f98:	08005f9d 	.word	0x08005f9d

08005f9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fa6:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <prvTaskExitError+0x4c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fae:	d009      	beq.n	8005fc4 <prvTaskExitError+0x28>
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	e7fe      	b.n	8005fc2 <prvTaskExitError+0x26>
 8005fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fd6:	bf00      	nop
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0fc      	beq.n	8005fd8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr
 8005fe8:	2000000c 	.word	0x2000000c
 8005fec:	00000000 	.word	0x00000000

08005ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <pxCurrentTCBConst2>)
 8005ff2:	6819      	ldr	r1, [r3, #0]
 8005ff4:	6808      	ldr	r0, [r1, #0]
 8005ff6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ffa:	f380 8809 	msr	PSP, r0
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f04f 0000 	mov.w	r0, #0
 8006006:	f380 8811 	msr	BASEPRI, r0
 800600a:	f04e 0e0d 	orr.w	lr, lr, #13
 800600e:	4770      	bx	lr

08006010 <pxCurrentTCBConst2>:
 8006010:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006014:	bf00      	nop
 8006016:	bf00      	nop

08006018 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006018:	4806      	ldr	r0, [pc, #24]	; (8006034 <prvPortStartFirstTask+0x1c>)
 800601a:	6800      	ldr	r0, [r0, #0]
 800601c:	6800      	ldr	r0, [r0, #0]
 800601e:	f380 8808 	msr	MSP, r0
 8006022:	b662      	cpsie	i
 8006024:	b661      	cpsie	f
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	df00      	svc	0
 8006030:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006032:	bf00      	nop
 8006034:	e000ed08 	.word	0xe000ed08

08006038 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800603e:	4b31      	ldr	r3, [pc, #196]	; (8006104 <xPortStartScheduler+0xcc>)
 8006040:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	b2db      	uxtb	r3, r3
 8006048:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	22ff      	movs	r2, #255	; 0xff
 800604e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006060:	b2da      	uxtb	r2, r3
 8006062:	4b29      	ldr	r3, [pc, #164]	; (8006108 <xPortStartScheduler+0xd0>)
 8006064:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006066:	4b29      	ldr	r3, [pc, #164]	; (800610c <xPortStartScheduler+0xd4>)
 8006068:	2207      	movs	r2, #7
 800606a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800606c:	e009      	b.n	8006082 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800606e:	4b27      	ldr	r3, [pc, #156]	; (800610c <xPortStartScheduler+0xd4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3b01      	subs	r3, #1
 8006074:	4a25      	ldr	r2, [pc, #148]	; (800610c <xPortStartScheduler+0xd4>)
 8006076:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	b2db      	uxtb	r3, r3
 8006080:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608a:	2b80      	cmp	r3, #128	; 0x80
 800608c:	d0ef      	beq.n	800606e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800608e:	4b1f      	ldr	r3, [pc, #124]	; (800610c <xPortStartScheduler+0xd4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1c3 0307 	rsb	r3, r3, #7
 8006096:	2b04      	cmp	r3, #4
 8006098:	d009      	beq.n	80060ae <xPortStartScheduler+0x76>
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	e7fe      	b.n	80060ac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80060ae:	4b17      	ldr	r3, [pc, #92]	; (800610c <xPortStartScheduler+0xd4>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	021b      	lsls	r3, r3, #8
 80060b4:	4a15      	ldr	r2, [pc, #84]	; (800610c <xPortStartScheduler+0xd4>)
 80060b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060b8:	4b14      	ldr	r3, [pc, #80]	; (800610c <xPortStartScheduler+0xd4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060c0:	4a12      	ldr	r2, [pc, #72]	; (800610c <xPortStartScheduler+0xd4>)
 80060c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80060cc:	4b10      	ldr	r3, [pc, #64]	; (8006110 <xPortStartScheduler+0xd8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a0f      	ldr	r2, [pc, #60]	; (8006110 <xPortStartScheduler+0xd8>)
 80060d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80060d8:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <xPortStartScheduler+0xd8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a0c      	ldr	r2, [pc, #48]	; (8006110 <xPortStartScheduler+0xd8>)
 80060de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80060e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060e4:	f000 f8b0 	bl	8006248 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060e8:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <xPortStartScheduler+0xdc>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060ee:	f7ff ff93 	bl	8006018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060f2:	f7ff faaf 	bl	8005654 <vTaskSwitchContext>
	prvTaskExitError();
 80060f6:	f7ff ff51 	bl	8005f9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	e000e400 	.word	0xe000e400
 8006108:	20000418 	.word	0x20000418
 800610c:	2000041c 	.word	0x2000041c
 8006110:	e000ed20 	.word	0xe000ed20
 8006114:	2000000c 	.word	0x2000000c

08006118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006130:	4b0e      	ldr	r3, [pc, #56]	; (800616c <vPortEnterCritical+0x54>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3301      	adds	r3, #1
 8006136:	4a0d      	ldr	r2, [pc, #52]	; (800616c <vPortEnterCritical+0x54>)
 8006138:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800613a:	4b0c      	ldr	r3, [pc, #48]	; (800616c <vPortEnterCritical+0x54>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d10e      	bne.n	8006160 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006142:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <vPortEnterCritical+0x58>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d009      	beq.n	8006160 <vPortEnterCritical+0x48>
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	603b      	str	r3, [r7, #0]
 800615e:	e7fe      	b.n	800615e <vPortEnterCritical+0x46>
	}
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	2000000c 	.word	0x2000000c
 8006170:	e000ed04 	.word	0xe000ed04

08006174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800617a:	4b10      	ldr	r3, [pc, #64]	; (80061bc <vPortExitCritical+0x48>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <vPortExitCritical+0x22>
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	607b      	str	r3, [r7, #4]
 8006194:	e7fe      	b.n	8006194 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006196:	4b09      	ldr	r3, [pc, #36]	; (80061bc <vPortExitCritical+0x48>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3b01      	subs	r3, #1
 800619c:	4a07      	ldr	r2, [pc, #28]	; (80061bc <vPortExitCritical+0x48>)
 800619e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80061a0:	4b06      	ldr	r3, [pc, #24]	; (80061bc <vPortExitCritical+0x48>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d104      	bne.n	80061b2 <vPortExitCritical+0x3e>
 80061a8:	2300      	movs	r3, #0
 80061aa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr
 80061bc:	2000000c 	.word	0x2000000c

080061c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061c0:	f3ef 8009 	mrs	r0, PSP
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <pxCurrentTCBConst>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061d0:	6010      	str	r0, [r2, #0]
 80061d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80061d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061da:	f380 8811 	msr	BASEPRI, r0
 80061de:	f7ff fa39 	bl	8005654 <vTaskSwitchContext>
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f380 8811 	msr	BASEPRI, r0
 80061ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80061ee:	6819      	ldr	r1, [r3, #0]
 80061f0:	6808      	ldr	r0, [r1, #0]
 80061f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061f6:	f380 8809 	msr	PSP, r0
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	4770      	bx	lr

08006200 <pxCurrentTCBConst>:
 8006200:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop

08006208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006220:	f7ff f95c 	bl	80054dc <xTaskIncrementTick>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <SysTick_Handler+0x3c>)
 800622c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	2300      	movs	r3, #0
 8006234:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	e000ed04 	.word	0xe000ed04

08006248 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <vPortSetupTimerInterrupt+0x30>)
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006252:	4b0a      	ldr	r3, [pc, #40]	; (800627c <vPortSetupTimerInterrupt+0x34>)
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006258:	4b09      	ldr	r3, [pc, #36]	; (8006280 <vPortSetupTimerInterrupt+0x38>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a09      	ldr	r2, [pc, #36]	; (8006284 <vPortSetupTimerInterrupt+0x3c>)
 800625e:	fba2 2303 	umull	r2, r3, r2, r3
 8006262:	099b      	lsrs	r3, r3, #6
 8006264:	4a08      	ldr	r2, [pc, #32]	; (8006288 <vPortSetupTimerInterrupt+0x40>)
 8006266:	3b01      	subs	r3, #1
 8006268:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800626a:	4b03      	ldr	r3, [pc, #12]	; (8006278 <vPortSetupTimerInterrupt+0x30>)
 800626c:	2207      	movs	r2, #7
 800626e:	601a      	str	r2, [r3, #0]
}
 8006270:	bf00      	nop
 8006272:	46bd      	mov	sp, r7
 8006274:	bc80      	pop	{r7}
 8006276:	4770      	bx	lr
 8006278:	e000e010 	.word	0xe000e010
 800627c:	e000e018 	.word	0xe000e018
 8006280:	20000000 	.word	0x20000000
 8006284:	10624dd3 	.word	0x10624dd3
 8006288:	e000e014 	.word	0xe000e014

0800628c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08a      	sub	sp, #40	; 0x28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006294:	2300      	movs	r3, #0
 8006296:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006298:	f7ff f876 	bl	8005388 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800629c:	4b57      	ldr	r3, [pc, #348]	; (80063fc <pvPortMalloc+0x170>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80062a4:	f000 f90c 	bl	80064c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062a8:	4b55      	ldr	r3, [pc, #340]	; (8006400 <pvPortMalloc+0x174>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4013      	ands	r3, r2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f040 808c 	bne.w	80063ce <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01c      	beq.n	80062f6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80062bc:	2208      	movs	r2, #8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4413      	add	r3, r2
 80062c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d013      	beq.n	80062f6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f023 0307 	bic.w	r3, r3, #7
 80062d4:	3308      	adds	r3, #8
 80062d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <pvPortMalloc+0x6a>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	e7fe      	b.n	80062f4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d068      	beq.n	80063ce <pvPortMalloc+0x142>
 80062fc:	4b41      	ldr	r3, [pc, #260]	; (8006404 <pvPortMalloc+0x178>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	429a      	cmp	r2, r3
 8006304:	d863      	bhi.n	80063ce <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006306:	4b40      	ldr	r3, [pc, #256]	; (8006408 <pvPortMalloc+0x17c>)
 8006308:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800630a:	4b3f      	ldr	r3, [pc, #252]	; (8006408 <pvPortMalloc+0x17c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006310:	e004      	b.n	800631c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	d903      	bls.n	800632e <pvPortMalloc+0xa2>
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1f1      	bne.n	8006312 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800632e:	4b33      	ldr	r3, [pc, #204]	; (80063fc <pvPortMalloc+0x170>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006334:	429a      	cmp	r2, r3
 8006336:	d04a      	beq.n	80063ce <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2208      	movs	r2, #8
 800633e:	4413      	add	r3, r2
 8006340:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	1ad2      	subs	r2, r2, r3
 8006352:	2308      	movs	r3, #8
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	429a      	cmp	r2, r3
 8006358:	d91e      	bls.n	8006398 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800635a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4413      	add	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	2b00      	cmp	r3, #0
 800636a:	d009      	beq.n	8006380 <pvPortMalloc+0xf4>
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	e7fe      	b.n	800637e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	1ad2      	subs	r2, r2, r3
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006392:	69b8      	ldr	r0, [r7, #24]
 8006394:	f000 f8f6 	bl	8006584 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006398:	4b1a      	ldr	r3, [pc, #104]	; (8006404 <pvPortMalloc+0x178>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	4a18      	ldr	r2, [pc, #96]	; (8006404 <pvPortMalloc+0x178>)
 80063a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063a6:	4b17      	ldr	r3, [pc, #92]	; (8006404 <pvPortMalloc+0x178>)
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4b18      	ldr	r3, [pc, #96]	; (800640c <pvPortMalloc+0x180>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d203      	bcs.n	80063ba <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063b2:	4b14      	ldr	r3, [pc, #80]	; (8006404 <pvPortMalloc+0x178>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a15      	ldr	r2, [pc, #84]	; (800640c <pvPortMalloc+0x180>)
 80063b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	4b10      	ldr	r3, [pc, #64]	; (8006400 <pvPortMalloc+0x174>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063ce:	f7fe ffe9 	bl	80053a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <pvPortMalloc+0x164>
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	e7fe      	b.n	80063ee <pvPortMalloc+0x162>
	return pvReturn;
 80063f0:	69fb      	ldr	r3, [r7, #28]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3728      	adds	r7, #40	; 0x28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20001028 	.word	0x20001028
 8006400:	20001034 	.word	0x20001034
 8006404:	2000102c 	.word	0x2000102c
 8006408:	20001020 	.word	0x20001020
 800640c:	20001030 	.word	0x20001030

08006410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d046      	beq.n	80064b0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006422:	2308      	movs	r3, #8
 8006424:	425b      	negs	r3, r3
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4413      	add	r3, r2
 800642a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	4b20      	ldr	r3, [pc, #128]	; (80064b8 <vPortFree+0xa8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4013      	ands	r3, r2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <vPortFree+0x42>
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e7fe      	b.n	8006450 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d009      	beq.n	800646e <vPortFree+0x5e>
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	60bb      	str	r3, [r7, #8]
 800646c:	e7fe      	b.n	800646c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <vPortFree+0xa8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4013      	ands	r3, r2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d019      	beq.n	80064b0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d115      	bne.n	80064b0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <vPortFree+0xa8>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	43db      	mvns	r3, r3
 800648e:	401a      	ands	r2, r3
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006494:	f7fe ff78 	bl	8005388 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	4b07      	ldr	r3, [pc, #28]	; (80064bc <vPortFree+0xac>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4413      	add	r3, r2
 80064a2:	4a06      	ldr	r2, [pc, #24]	; (80064bc <vPortFree+0xac>)
 80064a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064a6:	6938      	ldr	r0, [r7, #16]
 80064a8:	f000 f86c 	bl	8006584 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80064ac:	f7fe ff7a 	bl	80053a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064b0:	bf00      	nop
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	20001034 	.word	0x20001034
 80064bc:	2000102c 	.word	0x2000102c

080064c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80064ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064cc:	4b27      	ldr	r3, [pc, #156]	; (800656c <prvHeapInit+0xac>)
 80064ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00c      	beq.n	80064f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3307      	adds	r3, #7
 80064de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0307 	bic.w	r3, r3, #7
 80064e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	4a1f      	ldr	r2, [pc, #124]	; (800656c <prvHeapInit+0xac>)
 80064f0:	4413      	add	r3, r2
 80064f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064f8:	4a1d      	ldr	r2, [pc, #116]	; (8006570 <prvHeapInit+0xb0>)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064fe:	4b1c      	ldr	r3, [pc, #112]	; (8006570 <prvHeapInit+0xb0>)
 8006500:	2200      	movs	r2, #0
 8006502:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	4413      	add	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800650c:	2208      	movs	r2, #8
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	1a9b      	subs	r3, r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0307 	bic.w	r3, r3, #7
 800651a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4a15      	ldr	r2, [pc, #84]	; (8006574 <prvHeapInit+0xb4>)
 8006520:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006522:	4b14      	ldr	r3, [pc, #80]	; (8006574 <prvHeapInit+0xb4>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2200      	movs	r2, #0
 8006528:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800652a:	4b12      	ldr	r3, [pc, #72]	; (8006574 <prvHeapInit+0xb4>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006540:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <prvHeapInit+0xb4>)
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	4a0a      	ldr	r2, [pc, #40]	; (8006578 <prvHeapInit+0xb8>)
 800654e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	4a09      	ldr	r2, [pc, #36]	; (800657c <prvHeapInit+0xbc>)
 8006556:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006558:	4b09      	ldr	r3, [pc, #36]	; (8006580 <prvHeapInit+0xc0>)
 800655a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800655e:	601a      	str	r2, [r3, #0]
}
 8006560:	bf00      	nop
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000420 	.word	0x20000420
 8006570:	20001020 	.word	0x20001020
 8006574:	20001028 	.word	0x20001028
 8006578:	20001030 	.word	0x20001030
 800657c:	2000102c 	.word	0x2000102c
 8006580:	20001034 	.word	0x20001034

08006584 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800658c:	4b27      	ldr	r3, [pc, #156]	; (800662c <prvInsertBlockIntoFreeList+0xa8>)
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e002      	b.n	8006598 <prvInsertBlockIntoFreeList+0x14>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d8f7      	bhi.n	8006592 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	4413      	add	r3, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d108      	bne.n	80065c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	441a      	add	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	441a      	add	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d118      	bne.n	800660c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	4b14      	ldr	r3, [pc, #80]	; (8006630 <prvInsertBlockIntoFreeList+0xac>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d00d      	beq.n	8006602 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	441a      	add	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	e008      	b.n	8006614 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <prvInsertBlockIntoFreeList+0xac>)
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	e003      	b.n	8006614 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	429a      	cmp	r2, r3
 800661a:	d002      	beq.n	8006622 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr
 800662c:	20001020 	.word	0x20001020
 8006630:	20001028 	.word	0x20001028

08006634 <__errno>:
 8006634:	4b01      	ldr	r3, [pc, #4]	; (800663c <__errno+0x8>)
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000010 	.word	0x20000010

08006640 <__libc_init_array>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	2500      	movs	r5, #0
 8006644:	4e0c      	ldr	r6, [pc, #48]	; (8006678 <__libc_init_array+0x38>)
 8006646:	4c0d      	ldr	r4, [pc, #52]	; (800667c <__libc_init_array+0x3c>)
 8006648:	1ba4      	subs	r4, r4, r6
 800664a:	10a4      	asrs	r4, r4, #2
 800664c:	42a5      	cmp	r5, r4
 800664e:	d109      	bne.n	8006664 <__libc_init_array+0x24>
 8006650:	f000 ff1c 	bl	800748c <_init>
 8006654:	2500      	movs	r5, #0
 8006656:	4e0a      	ldr	r6, [pc, #40]	; (8006680 <__libc_init_array+0x40>)
 8006658:	4c0a      	ldr	r4, [pc, #40]	; (8006684 <__libc_init_array+0x44>)
 800665a:	1ba4      	subs	r4, r4, r6
 800665c:	10a4      	asrs	r4, r4, #2
 800665e:	42a5      	cmp	r5, r4
 8006660:	d105      	bne.n	800666e <__libc_init_array+0x2e>
 8006662:	bd70      	pop	{r4, r5, r6, pc}
 8006664:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006668:	4798      	blx	r3
 800666a:	3501      	adds	r5, #1
 800666c:	e7ee      	b.n	800664c <__libc_init_array+0xc>
 800666e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006672:	4798      	blx	r3
 8006674:	3501      	adds	r5, #1
 8006676:	e7f2      	b.n	800665e <__libc_init_array+0x1e>
 8006678:	080075f0 	.word	0x080075f0
 800667c:	080075f0 	.word	0x080075f0
 8006680:	080075f0 	.word	0x080075f0
 8006684:	080075f4 	.word	0x080075f4

08006688 <memcpy>:
 8006688:	b510      	push	{r4, lr}
 800668a:	1e43      	subs	r3, r0, #1
 800668c:	440a      	add	r2, r1
 800668e:	4291      	cmp	r1, r2
 8006690:	d100      	bne.n	8006694 <memcpy+0xc>
 8006692:	bd10      	pop	{r4, pc}
 8006694:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006698:	f803 4f01 	strb.w	r4, [r3, #1]!
 800669c:	e7f7      	b.n	800668e <memcpy+0x6>

0800669e <memset>:
 800669e:	4603      	mov	r3, r0
 80066a0:	4402      	add	r2, r0
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d100      	bne.n	80066a8 <memset+0xa>
 80066a6:	4770      	bx	lr
 80066a8:	f803 1b01 	strb.w	r1, [r3], #1
 80066ac:	e7f9      	b.n	80066a2 <memset+0x4>
	...

080066b0 <iprintf>:
 80066b0:	b40f      	push	{r0, r1, r2, r3}
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <iprintf+0x2c>)
 80066b4:	b513      	push	{r0, r1, r4, lr}
 80066b6:	681c      	ldr	r4, [r3, #0]
 80066b8:	b124      	cbz	r4, 80066c4 <iprintf+0x14>
 80066ba:	69a3      	ldr	r3, [r4, #24]
 80066bc:	b913      	cbnz	r3, 80066c4 <iprintf+0x14>
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 f84e 	bl	8006760 <__sinit>
 80066c4:	ab05      	add	r3, sp, #20
 80066c6:	9a04      	ldr	r2, [sp, #16]
 80066c8:	68a1      	ldr	r1, [r4, #8]
 80066ca:	4620      	mov	r0, r4
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	f000 f953 	bl	8006978 <_vfiprintf_r>
 80066d2:	b002      	add	sp, #8
 80066d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d8:	b004      	add	sp, #16
 80066da:	4770      	bx	lr
 80066dc:	20000010 	.word	0x20000010

080066e0 <std>:
 80066e0:	2300      	movs	r3, #0
 80066e2:	b510      	push	{r4, lr}
 80066e4:	4604      	mov	r4, r0
 80066e6:	e9c0 3300 	strd	r3, r3, [r0]
 80066ea:	6083      	str	r3, [r0, #8]
 80066ec:	8181      	strh	r1, [r0, #12]
 80066ee:	6643      	str	r3, [r0, #100]	; 0x64
 80066f0:	81c2      	strh	r2, [r0, #14]
 80066f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066f6:	6183      	str	r3, [r0, #24]
 80066f8:	4619      	mov	r1, r3
 80066fa:	2208      	movs	r2, #8
 80066fc:	305c      	adds	r0, #92	; 0x5c
 80066fe:	f7ff ffce 	bl	800669e <memset>
 8006702:	4b05      	ldr	r3, [pc, #20]	; (8006718 <std+0x38>)
 8006704:	6224      	str	r4, [r4, #32]
 8006706:	6263      	str	r3, [r4, #36]	; 0x24
 8006708:	4b04      	ldr	r3, [pc, #16]	; (800671c <std+0x3c>)
 800670a:	62a3      	str	r3, [r4, #40]	; 0x28
 800670c:	4b04      	ldr	r3, [pc, #16]	; (8006720 <std+0x40>)
 800670e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006710:	4b04      	ldr	r3, [pc, #16]	; (8006724 <std+0x44>)
 8006712:	6323      	str	r3, [r4, #48]	; 0x30
 8006714:	bd10      	pop	{r4, pc}
 8006716:	bf00      	nop
 8006718:	08006ed5 	.word	0x08006ed5
 800671c:	08006ef7 	.word	0x08006ef7
 8006720:	08006f2f 	.word	0x08006f2f
 8006724:	08006f53 	.word	0x08006f53

08006728 <_cleanup_r>:
 8006728:	4901      	ldr	r1, [pc, #4]	; (8006730 <_cleanup_r+0x8>)
 800672a:	f000 b885 	b.w	8006838 <_fwalk_reent>
 800672e:	bf00      	nop
 8006730:	0800722d 	.word	0x0800722d

08006734 <__sfmoreglue>:
 8006734:	b570      	push	{r4, r5, r6, lr}
 8006736:	2568      	movs	r5, #104	; 0x68
 8006738:	1e4a      	subs	r2, r1, #1
 800673a:	4355      	muls	r5, r2
 800673c:	460e      	mov	r6, r1
 800673e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006742:	f000 f897 	bl	8006874 <_malloc_r>
 8006746:	4604      	mov	r4, r0
 8006748:	b140      	cbz	r0, 800675c <__sfmoreglue+0x28>
 800674a:	2100      	movs	r1, #0
 800674c:	e9c0 1600 	strd	r1, r6, [r0]
 8006750:	300c      	adds	r0, #12
 8006752:	60a0      	str	r0, [r4, #8]
 8006754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006758:	f7ff ffa1 	bl	800669e <memset>
 800675c:	4620      	mov	r0, r4
 800675e:	bd70      	pop	{r4, r5, r6, pc}

08006760 <__sinit>:
 8006760:	6983      	ldr	r3, [r0, #24]
 8006762:	b510      	push	{r4, lr}
 8006764:	4604      	mov	r4, r0
 8006766:	bb33      	cbnz	r3, 80067b6 <__sinit+0x56>
 8006768:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800676c:	6503      	str	r3, [r0, #80]	; 0x50
 800676e:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <__sinit+0x58>)
 8006770:	4a12      	ldr	r2, [pc, #72]	; (80067bc <__sinit+0x5c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6282      	str	r2, [r0, #40]	; 0x28
 8006776:	4298      	cmp	r0, r3
 8006778:	bf04      	itt	eq
 800677a:	2301      	moveq	r3, #1
 800677c:	6183      	streq	r3, [r0, #24]
 800677e:	f000 f81f 	bl	80067c0 <__sfp>
 8006782:	6060      	str	r0, [r4, #4]
 8006784:	4620      	mov	r0, r4
 8006786:	f000 f81b 	bl	80067c0 <__sfp>
 800678a:	60a0      	str	r0, [r4, #8]
 800678c:	4620      	mov	r0, r4
 800678e:	f000 f817 	bl	80067c0 <__sfp>
 8006792:	2200      	movs	r2, #0
 8006794:	60e0      	str	r0, [r4, #12]
 8006796:	2104      	movs	r1, #4
 8006798:	6860      	ldr	r0, [r4, #4]
 800679a:	f7ff ffa1 	bl	80066e0 <std>
 800679e:	2201      	movs	r2, #1
 80067a0:	2109      	movs	r1, #9
 80067a2:	68a0      	ldr	r0, [r4, #8]
 80067a4:	f7ff ff9c 	bl	80066e0 <std>
 80067a8:	2202      	movs	r2, #2
 80067aa:	2112      	movs	r1, #18
 80067ac:	68e0      	ldr	r0, [r4, #12]
 80067ae:	f7ff ff97 	bl	80066e0 <std>
 80067b2:	2301      	movs	r3, #1
 80067b4:	61a3      	str	r3, [r4, #24]
 80067b6:	bd10      	pop	{r4, pc}
 80067b8:	08007558 	.word	0x08007558
 80067bc:	08006729 	.word	0x08006729

080067c0 <__sfp>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	4b1b      	ldr	r3, [pc, #108]	; (8006830 <__sfp+0x70>)
 80067c4:	4607      	mov	r7, r0
 80067c6:	681e      	ldr	r6, [r3, #0]
 80067c8:	69b3      	ldr	r3, [r6, #24]
 80067ca:	b913      	cbnz	r3, 80067d2 <__sfp+0x12>
 80067cc:	4630      	mov	r0, r6
 80067ce:	f7ff ffc7 	bl	8006760 <__sinit>
 80067d2:	3648      	adds	r6, #72	; 0x48
 80067d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067d8:	3b01      	subs	r3, #1
 80067da:	d503      	bpl.n	80067e4 <__sfp+0x24>
 80067dc:	6833      	ldr	r3, [r6, #0]
 80067de:	b133      	cbz	r3, 80067ee <__sfp+0x2e>
 80067e0:	6836      	ldr	r6, [r6, #0]
 80067e2:	e7f7      	b.n	80067d4 <__sfp+0x14>
 80067e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067e8:	b16d      	cbz	r5, 8006806 <__sfp+0x46>
 80067ea:	3468      	adds	r4, #104	; 0x68
 80067ec:	e7f4      	b.n	80067d8 <__sfp+0x18>
 80067ee:	2104      	movs	r1, #4
 80067f0:	4638      	mov	r0, r7
 80067f2:	f7ff ff9f 	bl	8006734 <__sfmoreglue>
 80067f6:	6030      	str	r0, [r6, #0]
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d1f1      	bne.n	80067e0 <__sfp+0x20>
 80067fc:	230c      	movs	r3, #12
 80067fe:	4604      	mov	r4, r0
 8006800:	603b      	str	r3, [r7, #0]
 8006802:	4620      	mov	r0, r4
 8006804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006806:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <__sfp+0x74>)
 8006808:	6665      	str	r5, [r4, #100]	; 0x64
 800680a:	e9c4 5500 	strd	r5, r5, [r4]
 800680e:	60a5      	str	r5, [r4, #8]
 8006810:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006814:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006818:	2208      	movs	r2, #8
 800681a:	4629      	mov	r1, r5
 800681c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006820:	f7ff ff3d 	bl	800669e <memset>
 8006824:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006828:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800682c:	e7e9      	b.n	8006802 <__sfp+0x42>
 800682e:	bf00      	nop
 8006830:	08007558 	.word	0x08007558
 8006834:	ffff0001 	.word	0xffff0001

08006838 <_fwalk_reent>:
 8006838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800683c:	4680      	mov	r8, r0
 800683e:	4689      	mov	r9, r1
 8006840:	2600      	movs	r6, #0
 8006842:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006846:	b914      	cbnz	r4, 800684e <_fwalk_reent+0x16>
 8006848:	4630      	mov	r0, r6
 800684a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800684e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006852:	3f01      	subs	r7, #1
 8006854:	d501      	bpl.n	800685a <_fwalk_reent+0x22>
 8006856:	6824      	ldr	r4, [r4, #0]
 8006858:	e7f5      	b.n	8006846 <_fwalk_reent+0xe>
 800685a:	89ab      	ldrh	r3, [r5, #12]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d907      	bls.n	8006870 <_fwalk_reent+0x38>
 8006860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006864:	3301      	adds	r3, #1
 8006866:	d003      	beq.n	8006870 <_fwalk_reent+0x38>
 8006868:	4629      	mov	r1, r5
 800686a:	4640      	mov	r0, r8
 800686c:	47c8      	blx	r9
 800686e:	4306      	orrs	r6, r0
 8006870:	3568      	adds	r5, #104	; 0x68
 8006872:	e7ee      	b.n	8006852 <_fwalk_reent+0x1a>

08006874 <_malloc_r>:
 8006874:	b570      	push	{r4, r5, r6, lr}
 8006876:	1ccd      	adds	r5, r1, #3
 8006878:	f025 0503 	bic.w	r5, r5, #3
 800687c:	3508      	adds	r5, #8
 800687e:	2d0c      	cmp	r5, #12
 8006880:	bf38      	it	cc
 8006882:	250c      	movcc	r5, #12
 8006884:	2d00      	cmp	r5, #0
 8006886:	4606      	mov	r6, r0
 8006888:	db01      	blt.n	800688e <_malloc_r+0x1a>
 800688a:	42a9      	cmp	r1, r5
 800688c:	d903      	bls.n	8006896 <_malloc_r+0x22>
 800688e:	230c      	movs	r3, #12
 8006890:	6033      	str	r3, [r6, #0]
 8006892:	2000      	movs	r0, #0
 8006894:	bd70      	pop	{r4, r5, r6, pc}
 8006896:	f000 fd77 	bl	8007388 <__malloc_lock>
 800689a:	4a21      	ldr	r2, [pc, #132]	; (8006920 <_malloc_r+0xac>)
 800689c:	6814      	ldr	r4, [r2, #0]
 800689e:	4621      	mov	r1, r4
 80068a0:	b991      	cbnz	r1, 80068c8 <_malloc_r+0x54>
 80068a2:	4c20      	ldr	r4, [pc, #128]	; (8006924 <_malloc_r+0xb0>)
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	b91b      	cbnz	r3, 80068b0 <_malloc_r+0x3c>
 80068a8:	4630      	mov	r0, r6
 80068aa:	f000 fb03 	bl	8006eb4 <_sbrk_r>
 80068ae:	6020      	str	r0, [r4, #0]
 80068b0:	4629      	mov	r1, r5
 80068b2:	4630      	mov	r0, r6
 80068b4:	f000 fafe 	bl	8006eb4 <_sbrk_r>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d124      	bne.n	8006906 <_malloc_r+0x92>
 80068bc:	230c      	movs	r3, #12
 80068be:	4630      	mov	r0, r6
 80068c0:	6033      	str	r3, [r6, #0]
 80068c2:	f000 fd62 	bl	800738a <__malloc_unlock>
 80068c6:	e7e4      	b.n	8006892 <_malloc_r+0x1e>
 80068c8:	680b      	ldr	r3, [r1, #0]
 80068ca:	1b5b      	subs	r3, r3, r5
 80068cc:	d418      	bmi.n	8006900 <_malloc_r+0x8c>
 80068ce:	2b0b      	cmp	r3, #11
 80068d0:	d90f      	bls.n	80068f2 <_malloc_r+0x7e>
 80068d2:	600b      	str	r3, [r1, #0]
 80068d4:	18cc      	adds	r4, r1, r3
 80068d6:	50cd      	str	r5, [r1, r3]
 80068d8:	4630      	mov	r0, r6
 80068da:	f000 fd56 	bl	800738a <__malloc_unlock>
 80068de:	f104 000b 	add.w	r0, r4, #11
 80068e2:	1d23      	adds	r3, r4, #4
 80068e4:	f020 0007 	bic.w	r0, r0, #7
 80068e8:	1ac3      	subs	r3, r0, r3
 80068ea:	d0d3      	beq.n	8006894 <_malloc_r+0x20>
 80068ec:	425a      	negs	r2, r3
 80068ee:	50e2      	str	r2, [r4, r3]
 80068f0:	e7d0      	b.n	8006894 <_malloc_r+0x20>
 80068f2:	684b      	ldr	r3, [r1, #4]
 80068f4:	428c      	cmp	r4, r1
 80068f6:	bf16      	itet	ne
 80068f8:	6063      	strne	r3, [r4, #4]
 80068fa:	6013      	streq	r3, [r2, #0]
 80068fc:	460c      	movne	r4, r1
 80068fe:	e7eb      	b.n	80068d8 <_malloc_r+0x64>
 8006900:	460c      	mov	r4, r1
 8006902:	6849      	ldr	r1, [r1, #4]
 8006904:	e7cc      	b.n	80068a0 <_malloc_r+0x2c>
 8006906:	1cc4      	adds	r4, r0, #3
 8006908:	f024 0403 	bic.w	r4, r4, #3
 800690c:	42a0      	cmp	r0, r4
 800690e:	d005      	beq.n	800691c <_malloc_r+0xa8>
 8006910:	1a21      	subs	r1, r4, r0
 8006912:	4630      	mov	r0, r6
 8006914:	f000 face 	bl	8006eb4 <_sbrk_r>
 8006918:	3001      	adds	r0, #1
 800691a:	d0cf      	beq.n	80068bc <_malloc_r+0x48>
 800691c:	6025      	str	r5, [r4, #0]
 800691e:	e7db      	b.n	80068d8 <_malloc_r+0x64>
 8006920:	20001038 	.word	0x20001038
 8006924:	2000103c 	.word	0x2000103c

08006928 <__sfputc_r>:
 8006928:	6893      	ldr	r3, [r2, #8]
 800692a:	b410      	push	{r4}
 800692c:	3b01      	subs	r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	6093      	str	r3, [r2, #8]
 8006932:	da07      	bge.n	8006944 <__sfputc_r+0x1c>
 8006934:	6994      	ldr	r4, [r2, #24]
 8006936:	42a3      	cmp	r3, r4
 8006938:	db01      	blt.n	800693e <__sfputc_r+0x16>
 800693a:	290a      	cmp	r1, #10
 800693c:	d102      	bne.n	8006944 <__sfputc_r+0x1c>
 800693e:	bc10      	pop	{r4}
 8006940:	f000 bb0c 	b.w	8006f5c <__swbuf_r>
 8006944:	6813      	ldr	r3, [r2, #0]
 8006946:	1c58      	adds	r0, r3, #1
 8006948:	6010      	str	r0, [r2, #0]
 800694a:	7019      	strb	r1, [r3, #0]
 800694c:	4608      	mov	r0, r1
 800694e:	bc10      	pop	{r4}
 8006950:	4770      	bx	lr

08006952 <__sfputs_r>:
 8006952:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006954:	4606      	mov	r6, r0
 8006956:	460f      	mov	r7, r1
 8006958:	4614      	mov	r4, r2
 800695a:	18d5      	adds	r5, r2, r3
 800695c:	42ac      	cmp	r4, r5
 800695e:	d101      	bne.n	8006964 <__sfputs_r+0x12>
 8006960:	2000      	movs	r0, #0
 8006962:	e007      	b.n	8006974 <__sfputs_r+0x22>
 8006964:	463a      	mov	r2, r7
 8006966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800696a:	4630      	mov	r0, r6
 800696c:	f7ff ffdc 	bl	8006928 <__sfputc_r>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d1f3      	bne.n	800695c <__sfputs_r+0xa>
 8006974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006978 <_vfiprintf_r>:
 8006978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697c:	460c      	mov	r4, r1
 800697e:	b09d      	sub	sp, #116	; 0x74
 8006980:	4617      	mov	r7, r2
 8006982:	461d      	mov	r5, r3
 8006984:	4606      	mov	r6, r0
 8006986:	b118      	cbz	r0, 8006990 <_vfiprintf_r+0x18>
 8006988:	6983      	ldr	r3, [r0, #24]
 800698a:	b90b      	cbnz	r3, 8006990 <_vfiprintf_r+0x18>
 800698c:	f7ff fee8 	bl	8006760 <__sinit>
 8006990:	4b7c      	ldr	r3, [pc, #496]	; (8006b84 <_vfiprintf_r+0x20c>)
 8006992:	429c      	cmp	r4, r3
 8006994:	d158      	bne.n	8006a48 <_vfiprintf_r+0xd0>
 8006996:	6874      	ldr	r4, [r6, #4]
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	0718      	lsls	r0, r3, #28
 800699c:	d55e      	bpl.n	8006a5c <_vfiprintf_r+0xe4>
 800699e:	6923      	ldr	r3, [r4, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d05b      	beq.n	8006a5c <_vfiprintf_r+0xe4>
 80069a4:	2300      	movs	r3, #0
 80069a6:	9309      	str	r3, [sp, #36]	; 0x24
 80069a8:	2320      	movs	r3, #32
 80069aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069ae:	2330      	movs	r3, #48	; 0x30
 80069b0:	f04f 0b01 	mov.w	fp, #1
 80069b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069b8:	9503      	str	r5, [sp, #12]
 80069ba:	46b8      	mov	r8, r7
 80069bc:	4645      	mov	r5, r8
 80069be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80069c2:	b10b      	cbz	r3, 80069c8 <_vfiprintf_r+0x50>
 80069c4:	2b25      	cmp	r3, #37	; 0x25
 80069c6:	d154      	bne.n	8006a72 <_vfiprintf_r+0xfa>
 80069c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80069cc:	d00b      	beq.n	80069e6 <_vfiprintf_r+0x6e>
 80069ce:	4653      	mov	r3, sl
 80069d0:	463a      	mov	r2, r7
 80069d2:	4621      	mov	r1, r4
 80069d4:	4630      	mov	r0, r6
 80069d6:	f7ff ffbc 	bl	8006952 <__sfputs_r>
 80069da:	3001      	adds	r0, #1
 80069dc:	f000 80c2 	beq.w	8006b64 <_vfiprintf_r+0x1ec>
 80069e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e2:	4453      	add	r3, sl
 80069e4:	9309      	str	r3, [sp, #36]	; 0x24
 80069e6:	f898 3000 	ldrb.w	r3, [r8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 80ba 	beq.w	8006b64 <_vfiprintf_r+0x1ec>
 80069f0:	2300      	movs	r3, #0
 80069f2:	f04f 32ff 	mov.w	r2, #4294967295
 80069f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	9307      	str	r3, [sp, #28]
 80069fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a02:	931a      	str	r3, [sp, #104]	; 0x68
 8006a04:	46a8      	mov	r8, r5
 8006a06:	2205      	movs	r2, #5
 8006a08:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006a0c:	485e      	ldr	r0, [pc, #376]	; (8006b88 <_vfiprintf_r+0x210>)
 8006a0e:	f000 fcad 	bl	800736c <memchr>
 8006a12:	9b04      	ldr	r3, [sp, #16]
 8006a14:	bb78      	cbnz	r0, 8006a76 <_vfiprintf_r+0xfe>
 8006a16:	06d9      	lsls	r1, r3, #27
 8006a18:	bf44      	itt	mi
 8006a1a:	2220      	movmi	r2, #32
 8006a1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a20:	071a      	lsls	r2, r3, #28
 8006a22:	bf44      	itt	mi
 8006a24:	222b      	movmi	r2, #43	; 0x2b
 8006a26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a2a:	782a      	ldrb	r2, [r5, #0]
 8006a2c:	2a2a      	cmp	r2, #42	; 0x2a
 8006a2e:	d02a      	beq.n	8006a86 <_vfiprintf_r+0x10e>
 8006a30:	46a8      	mov	r8, r5
 8006a32:	2000      	movs	r0, #0
 8006a34:	250a      	movs	r5, #10
 8006a36:	9a07      	ldr	r2, [sp, #28]
 8006a38:	4641      	mov	r1, r8
 8006a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a3e:	3b30      	subs	r3, #48	; 0x30
 8006a40:	2b09      	cmp	r3, #9
 8006a42:	d969      	bls.n	8006b18 <_vfiprintf_r+0x1a0>
 8006a44:	b360      	cbz	r0, 8006aa0 <_vfiprintf_r+0x128>
 8006a46:	e024      	b.n	8006a92 <_vfiprintf_r+0x11a>
 8006a48:	4b50      	ldr	r3, [pc, #320]	; (8006b8c <_vfiprintf_r+0x214>)
 8006a4a:	429c      	cmp	r4, r3
 8006a4c:	d101      	bne.n	8006a52 <_vfiprintf_r+0xda>
 8006a4e:	68b4      	ldr	r4, [r6, #8]
 8006a50:	e7a2      	b.n	8006998 <_vfiprintf_r+0x20>
 8006a52:	4b4f      	ldr	r3, [pc, #316]	; (8006b90 <_vfiprintf_r+0x218>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	bf08      	it	eq
 8006a58:	68f4      	ldreq	r4, [r6, #12]
 8006a5a:	e79d      	b.n	8006998 <_vfiprintf_r+0x20>
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f000 fae0 	bl	8007024 <__swsetup_r>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d09d      	beq.n	80069a4 <_vfiprintf_r+0x2c>
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	b01d      	add	sp, #116	; 0x74
 8006a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a72:	46a8      	mov	r8, r5
 8006a74:	e7a2      	b.n	80069bc <_vfiprintf_r+0x44>
 8006a76:	4a44      	ldr	r2, [pc, #272]	; (8006b88 <_vfiprintf_r+0x210>)
 8006a78:	4645      	mov	r5, r8
 8006a7a:	1a80      	subs	r0, r0, r2
 8006a7c:	fa0b f000 	lsl.w	r0, fp, r0
 8006a80:	4318      	orrs	r0, r3
 8006a82:	9004      	str	r0, [sp, #16]
 8006a84:	e7be      	b.n	8006a04 <_vfiprintf_r+0x8c>
 8006a86:	9a03      	ldr	r2, [sp, #12]
 8006a88:	1d11      	adds	r1, r2, #4
 8006a8a:	6812      	ldr	r2, [r2, #0]
 8006a8c:	9103      	str	r1, [sp, #12]
 8006a8e:	2a00      	cmp	r2, #0
 8006a90:	db01      	blt.n	8006a96 <_vfiprintf_r+0x11e>
 8006a92:	9207      	str	r2, [sp, #28]
 8006a94:	e004      	b.n	8006aa0 <_vfiprintf_r+0x128>
 8006a96:	4252      	negs	r2, r2
 8006a98:	f043 0302 	orr.w	r3, r3, #2
 8006a9c:	9207      	str	r2, [sp, #28]
 8006a9e:	9304      	str	r3, [sp, #16]
 8006aa0:	f898 3000 	ldrb.w	r3, [r8]
 8006aa4:	2b2e      	cmp	r3, #46	; 0x2e
 8006aa6:	d10e      	bne.n	8006ac6 <_vfiprintf_r+0x14e>
 8006aa8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006aac:	2b2a      	cmp	r3, #42	; 0x2a
 8006aae:	d138      	bne.n	8006b22 <_vfiprintf_r+0x1aa>
 8006ab0:	9b03      	ldr	r3, [sp, #12]
 8006ab2:	f108 0802 	add.w	r8, r8, #2
 8006ab6:	1d1a      	adds	r2, r3, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	9203      	str	r2, [sp, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bfb8      	it	lt
 8006ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ac4:	9305      	str	r3, [sp, #20]
 8006ac6:	4d33      	ldr	r5, [pc, #204]	; (8006b94 <_vfiprintf_r+0x21c>)
 8006ac8:	2203      	movs	r2, #3
 8006aca:	f898 1000 	ldrb.w	r1, [r8]
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f000 fc4c 	bl	800736c <memchr>
 8006ad4:	b140      	cbz	r0, 8006ae8 <_vfiprintf_r+0x170>
 8006ad6:	2340      	movs	r3, #64	; 0x40
 8006ad8:	1b40      	subs	r0, r0, r5
 8006ada:	fa03 f000 	lsl.w	r0, r3, r0
 8006ade:	9b04      	ldr	r3, [sp, #16]
 8006ae0:	f108 0801 	add.w	r8, r8, #1
 8006ae4:	4303      	orrs	r3, r0
 8006ae6:	9304      	str	r3, [sp, #16]
 8006ae8:	f898 1000 	ldrb.w	r1, [r8]
 8006aec:	2206      	movs	r2, #6
 8006aee:	482a      	ldr	r0, [pc, #168]	; (8006b98 <_vfiprintf_r+0x220>)
 8006af0:	f108 0701 	add.w	r7, r8, #1
 8006af4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006af8:	f000 fc38 	bl	800736c <memchr>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d037      	beq.n	8006b70 <_vfiprintf_r+0x1f8>
 8006b00:	4b26      	ldr	r3, [pc, #152]	; (8006b9c <_vfiprintf_r+0x224>)
 8006b02:	bb1b      	cbnz	r3, 8006b4c <_vfiprintf_r+0x1d4>
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	3307      	adds	r3, #7
 8006b08:	f023 0307 	bic.w	r3, r3, #7
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	9303      	str	r3, [sp, #12]
 8006b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b12:	444b      	add	r3, r9
 8006b14:	9309      	str	r3, [sp, #36]	; 0x24
 8006b16:	e750      	b.n	80069ba <_vfiprintf_r+0x42>
 8006b18:	fb05 3202 	mla	r2, r5, r2, r3
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	4688      	mov	r8, r1
 8006b20:	e78a      	b.n	8006a38 <_vfiprintf_r+0xc0>
 8006b22:	2300      	movs	r3, #0
 8006b24:	250a      	movs	r5, #10
 8006b26:	4619      	mov	r1, r3
 8006b28:	f108 0801 	add.w	r8, r8, #1
 8006b2c:	9305      	str	r3, [sp, #20]
 8006b2e:	4640      	mov	r0, r8
 8006b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b34:	3a30      	subs	r2, #48	; 0x30
 8006b36:	2a09      	cmp	r2, #9
 8006b38:	d903      	bls.n	8006b42 <_vfiprintf_r+0x1ca>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0c3      	beq.n	8006ac6 <_vfiprintf_r+0x14e>
 8006b3e:	9105      	str	r1, [sp, #20]
 8006b40:	e7c1      	b.n	8006ac6 <_vfiprintf_r+0x14e>
 8006b42:	fb05 2101 	mla	r1, r5, r1, r2
 8006b46:	2301      	movs	r3, #1
 8006b48:	4680      	mov	r8, r0
 8006b4a:	e7f0      	b.n	8006b2e <_vfiprintf_r+0x1b6>
 8006b4c:	ab03      	add	r3, sp, #12
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	4622      	mov	r2, r4
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <_vfiprintf_r+0x228>)
 8006b54:	a904      	add	r1, sp, #16
 8006b56:	4630      	mov	r0, r6
 8006b58:	f3af 8000 	nop.w
 8006b5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b60:	4681      	mov	r9, r0
 8006b62:	d1d5      	bne.n	8006b10 <_vfiprintf_r+0x198>
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	065b      	lsls	r3, r3, #25
 8006b68:	f53f af7e 	bmi.w	8006a68 <_vfiprintf_r+0xf0>
 8006b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b6e:	e77d      	b.n	8006a6c <_vfiprintf_r+0xf4>
 8006b70:	ab03      	add	r3, sp, #12
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	4622      	mov	r2, r4
 8006b76:	4b0a      	ldr	r3, [pc, #40]	; (8006ba0 <_vfiprintf_r+0x228>)
 8006b78:	a904      	add	r1, sp, #16
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f000 f888 	bl	8006c90 <_printf_i>
 8006b80:	e7ec      	b.n	8006b5c <_vfiprintf_r+0x1e4>
 8006b82:	bf00      	nop
 8006b84:	0800757c 	.word	0x0800757c
 8006b88:	080075bc 	.word	0x080075bc
 8006b8c:	0800759c 	.word	0x0800759c
 8006b90:	0800755c 	.word	0x0800755c
 8006b94:	080075c2 	.word	0x080075c2
 8006b98:	080075c6 	.word	0x080075c6
 8006b9c:	00000000 	.word	0x00000000
 8006ba0:	08006953 	.word	0x08006953

08006ba4 <_printf_common>:
 8006ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba8:	4691      	mov	r9, r2
 8006baa:	461f      	mov	r7, r3
 8006bac:	688a      	ldr	r2, [r1, #8]
 8006bae:	690b      	ldr	r3, [r1, #16]
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	bfb8      	it	lt
 8006bb6:	4613      	movlt	r3, r2
 8006bb8:	f8c9 3000 	str.w	r3, [r9]
 8006bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bc6:	b112      	cbz	r2, 8006bce <_printf_common+0x2a>
 8006bc8:	3301      	adds	r3, #1
 8006bca:	f8c9 3000 	str.w	r3, [r9]
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	0699      	lsls	r1, r3, #26
 8006bd2:	bf42      	ittt	mi
 8006bd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006bd8:	3302      	addmi	r3, #2
 8006bda:	f8c9 3000 	strmi.w	r3, [r9]
 8006bde:	6825      	ldr	r5, [r4, #0]
 8006be0:	f015 0506 	ands.w	r5, r5, #6
 8006be4:	d107      	bne.n	8006bf6 <_printf_common+0x52>
 8006be6:	f104 0a19 	add.w	sl, r4, #25
 8006bea:	68e3      	ldr	r3, [r4, #12]
 8006bec:	f8d9 2000 	ldr.w	r2, [r9]
 8006bf0:	1a9b      	subs	r3, r3, r2
 8006bf2:	42ab      	cmp	r3, r5
 8006bf4:	dc29      	bgt.n	8006c4a <_printf_common+0xa6>
 8006bf6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006bfa:	6822      	ldr	r2, [r4, #0]
 8006bfc:	3300      	adds	r3, #0
 8006bfe:	bf18      	it	ne
 8006c00:	2301      	movne	r3, #1
 8006c02:	0692      	lsls	r2, r2, #26
 8006c04:	d42e      	bmi.n	8006c64 <_printf_common+0xc0>
 8006c06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c0a:	4639      	mov	r1, r7
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	47c0      	blx	r8
 8006c10:	3001      	adds	r0, #1
 8006c12:	d021      	beq.n	8006c58 <_printf_common+0xb4>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	68e5      	ldr	r5, [r4, #12]
 8006c18:	f003 0306 	and.w	r3, r3, #6
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	bf18      	it	ne
 8006c20:	2500      	movne	r5, #0
 8006c22:	f8d9 2000 	ldr.w	r2, [r9]
 8006c26:	f04f 0900 	mov.w	r9, #0
 8006c2a:	bf08      	it	eq
 8006c2c:	1aad      	subeq	r5, r5, r2
 8006c2e:	68a3      	ldr	r3, [r4, #8]
 8006c30:	6922      	ldr	r2, [r4, #16]
 8006c32:	bf08      	it	eq
 8006c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	bfc4      	itt	gt
 8006c3c:	1a9b      	subgt	r3, r3, r2
 8006c3e:	18ed      	addgt	r5, r5, r3
 8006c40:	341a      	adds	r4, #26
 8006c42:	454d      	cmp	r5, r9
 8006c44:	d11a      	bne.n	8006c7c <_printf_common+0xd8>
 8006c46:	2000      	movs	r0, #0
 8006c48:	e008      	b.n	8006c5c <_printf_common+0xb8>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	4652      	mov	r2, sl
 8006c4e:	4639      	mov	r1, r7
 8006c50:	4630      	mov	r0, r6
 8006c52:	47c0      	blx	r8
 8006c54:	3001      	adds	r0, #1
 8006c56:	d103      	bne.n	8006c60 <_printf_common+0xbc>
 8006c58:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c60:	3501      	adds	r5, #1
 8006c62:	e7c2      	b.n	8006bea <_printf_common+0x46>
 8006c64:	2030      	movs	r0, #48	; 0x30
 8006c66:	18e1      	adds	r1, r4, r3
 8006c68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c72:	4422      	add	r2, r4
 8006c74:	3302      	adds	r3, #2
 8006c76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c7a:	e7c4      	b.n	8006c06 <_printf_common+0x62>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	4622      	mov	r2, r4
 8006c80:	4639      	mov	r1, r7
 8006c82:	4630      	mov	r0, r6
 8006c84:	47c0      	blx	r8
 8006c86:	3001      	adds	r0, #1
 8006c88:	d0e6      	beq.n	8006c58 <_printf_common+0xb4>
 8006c8a:	f109 0901 	add.w	r9, r9, #1
 8006c8e:	e7d8      	b.n	8006c42 <_printf_common+0x9e>

08006c90 <_printf_i>:
 8006c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006c98:	460c      	mov	r4, r1
 8006c9a:	7e09      	ldrb	r1, [r1, #24]
 8006c9c:	b085      	sub	sp, #20
 8006c9e:	296e      	cmp	r1, #110	; 0x6e
 8006ca0:	4617      	mov	r7, r2
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	4698      	mov	r8, r3
 8006ca6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ca8:	f000 80b3 	beq.w	8006e12 <_printf_i+0x182>
 8006cac:	d822      	bhi.n	8006cf4 <_printf_i+0x64>
 8006cae:	2963      	cmp	r1, #99	; 0x63
 8006cb0:	d036      	beq.n	8006d20 <_printf_i+0x90>
 8006cb2:	d80a      	bhi.n	8006cca <_printf_i+0x3a>
 8006cb4:	2900      	cmp	r1, #0
 8006cb6:	f000 80b9 	beq.w	8006e2c <_printf_i+0x19c>
 8006cba:	2958      	cmp	r1, #88	; 0x58
 8006cbc:	f000 8083 	beq.w	8006dc6 <_printf_i+0x136>
 8006cc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006cc8:	e032      	b.n	8006d30 <_printf_i+0xa0>
 8006cca:	2964      	cmp	r1, #100	; 0x64
 8006ccc:	d001      	beq.n	8006cd2 <_printf_i+0x42>
 8006cce:	2969      	cmp	r1, #105	; 0x69
 8006cd0:	d1f6      	bne.n	8006cc0 <_printf_i+0x30>
 8006cd2:	6820      	ldr	r0, [r4, #0]
 8006cd4:	6813      	ldr	r3, [r2, #0]
 8006cd6:	0605      	lsls	r5, r0, #24
 8006cd8:	f103 0104 	add.w	r1, r3, #4
 8006cdc:	d52a      	bpl.n	8006d34 <_printf_i+0xa4>
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6011      	str	r1, [r2, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	da03      	bge.n	8006cee <_printf_i+0x5e>
 8006ce6:	222d      	movs	r2, #45	; 0x2d
 8006ce8:	425b      	negs	r3, r3
 8006cea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006cee:	486f      	ldr	r0, [pc, #444]	; (8006eac <_printf_i+0x21c>)
 8006cf0:	220a      	movs	r2, #10
 8006cf2:	e039      	b.n	8006d68 <_printf_i+0xd8>
 8006cf4:	2973      	cmp	r1, #115	; 0x73
 8006cf6:	f000 809d 	beq.w	8006e34 <_printf_i+0x1a4>
 8006cfa:	d808      	bhi.n	8006d0e <_printf_i+0x7e>
 8006cfc:	296f      	cmp	r1, #111	; 0x6f
 8006cfe:	d020      	beq.n	8006d42 <_printf_i+0xb2>
 8006d00:	2970      	cmp	r1, #112	; 0x70
 8006d02:	d1dd      	bne.n	8006cc0 <_printf_i+0x30>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	f043 0320 	orr.w	r3, r3, #32
 8006d0a:	6023      	str	r3, [r4, #0]
 8006d0c:	e003      	b.n	8006d16 <_printf_i+0x86>
 8006d0e:	2975      	cmp	r1, #117	; 0x75
 8006d10:	d017      	beq.n	8006d42 <_printf_i+0xb2>
 8006d12:	2978      	cmp	r1, #120	; 0x78
 8006d14:	d1d4      	bne.n	8006cc0 <_printf_i+0x30>
 8006d16:	2378      	movs	r3, #120	; 0x78
 8006d18:	4865      	ldr	r0, [pc, #404]	; (8006eb0 <_printf_i+0x220>)
 8006d1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d1e:	e055      	b.n	8006dcc <_printf_i+0x13c>
 8006d20:	6813      	ldr	r3, [r2, #0]
 8006d22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d26:	1d19      	adds	r1, r3, #4
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6011      	str	r1, [r2, #0]
 8006d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d30:	2301      	movs	r3, #1
 8006d32:	e08c      	b.n	8006e4e <_printf_i+0x1be>
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d3a:	6011      	str	r1, [r2, #0]
 8006d3c:	bf18      	it	ne
 8006d3e:	b21b      	sxthne	r3, r3
 8006d40:	e7cf      	b.n	8006ce2 <_printf_i+0x52>
 8006d42:	6813      	ldr	r3, [r2, #0]
 8006d44:	6825      	ldr	r5, [r4, #0]
 8006d46:	1d18      	adds	r0, r3, #4
 8006d48:	6010      	str	r0, [r2, #0]
 8006d4a:	0628      	lsls	r0, r5, #24
 8006d4c:	d501      	bpl.n	8006d52 <_printf_i+0xc2>
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	e002      	b.n	8006d58 <_printf_i+0xc8>
 8006d52:	0668      	lsls	r0, r5, #25
 8006d54:	d5fb      	bpl.n	8006d4e <_printf_i+0xbe>
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	296f      	cmp	r1, #111	; 0x6f
 8006d5a:	bf14      	ite	ne
 8006d5c:	220a      	movne	r2, #10
 8006d5e:	2208      	moveq	r2, #8
 8006d60:	4852      	ldr	r0, [pc, #328]	; (8006eac <_printf_i+0x21c>)
 8006d62:	2100      	movs	r1, #0
 8006d64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d68:	6865      	ldr	r5, [r4, #4]
 8006d6a:	2d00      	cmp	r5, #0
 8006d6c:	60a5      	str	r5, [r4, #8]
 8006d6e:	f2c0 8095 	blt.w	8006e9c <_printf_i+0x20c>
 8006d72:	6821      	ldr	r1, [r4, #0]
 8006d74:	f021 0104 	bic.w	r1, r1, #4
 8006d78:	6021      	str	r1, [r4, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d13d      	bne.n	8006dfa <_printf_i+0x16a>
 8006d7e:	2d00      	cmp	r5, #0
 8006d80:	f040 808e 	bne.w	8006ea0 <_printf_i+0x210>
 8006d84:	4665      	mov	r5, ip
 8006d86:	2a08      	cmp	r2, #8
 8006d88:	d10b      	bne.n	8006da2 <_printf_i+0x112>
 8006d8a:	6823      	ldr	r3, [r4, #0]
 8006d8c:	07db      	lsls	r3, r3, #31
 8006d8e:	d508      	bpl.n	8006da2 <_printf_i+0x112>
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	6862      	ldr	r2, [r4, #4]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	bfde      	ittt	le
 8006d98:	2330      	movle	r3, #48	; 0x30
 8006d9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006da2:	ebac 0305 	sub.w	r3, ip, r5
 8006da6:	6123      	str	r3, [r4, #16]
 8006da8:	f8cd 8000 	str.w	r8, [sp]
 8006dac:	463b      	mov	r3, r7
 8006dae:	aa03      	add	r2, sp, #12
 8006db0:	4621      	mov	r1, r4
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7ff fef6 	bl	8006ba4 <_printf_common>
 8006db8:	3001      	adds	r0, #1
 8006dba:	d14d      	bne.n	8006e58 <_printf_i+0x1c8>
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc0:	b005      	add	sp, #20
 8006dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dc6:	4839      	ldr	r0, [pc, #228]	; (8006eac <_printf_i+0x21c>)
 8006dc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006dcc:	6813      	ldr	r3, [r2, #0]
 8006dce:	6821      	ldr	r1, [r4, #0]
 8006dd0:	1d1d      	adds	r5, r3, #4
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6015      	str	r5, [r2, #0]
 8006dd6:	060a      	lsls	r2, r1, #24
 8006dd8:	d50b      	bpl.n	8006df2 <_printf_i+0x162>
 8006dda:	07ca      	lsls	r2, r1, #31
 8006ddc:	bf44      	itt	mi
 8006dde:	f041 0120 	orrmi.w	r1, r1, #32
 8006de2:	6021      	strmi	r1, [r4, #0]
 8006de4:	b91b      	cbnz	r3, 8006dee <_printf_i+0x15e>
 8006de6:	6822      	ldr	r2, [r4, #0]
 8006de8:	f022 0220 	bic.w	r2, r2, #32
 8006dec:	6022      	str	r2, [r4, #0]
 8006dee:	2210      	movs	r2, #16
 8006df0:	e7b7      	b.n	8006d62 <_printf_i+0xd2>
 8006df2:	064d      	lsls	r5, r1, #25
 8006df4:	bf48      	it	mi
 8006df6:	b29b      	uxthmi	r3, r3
 8006df8:	e7ef      	b.n	8006dda <_printf_i+0x14a>
 8006dfa:	4665      	mov	r5, ip
 8006dfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e00:	fb02 3311 	mls	r3, r2, r1, r3
 8006e04:	5cc3      	ldrb	r3, [r0, r3]
 8006e06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	2900      	cmp	r1, #0
 8006e0e:	d1f5      	bne.n	8006dfc <_printf_i+0x16c>
 8006e10:	e7b9      	b.n	8006d86 <_printf_i+0xf6>
 8006e12:	6813      	ldr	r3, [r2, #0]
 8006e14:	6825      	ldr	r5, [r4, #0]
 8006e16:	1d18      	adds	r0, r3, #4
 8006e18:	6961      	ldr	r1, [r4, #20]
 8006e1a:	6010      	str	r0, [r2, #0]
 8006e1c:	0628      	lsls	r0, r5, #24
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	d501      	bpl.n	8006e26 <_printf_i+0x196>
 8006e22:	6019      	str	r1, [r3, #0]
 8006e24:	e002      	b.n	8006e2c <_printf_i+0x19c>
 8006e26:	066a      	lsls	r2, r5, #25
 8006e28:	d5fb      	bpl.n	8006e22 <_printf_i+0x192>
 8006e2a:	8019      	strh	r1, [r3, #0]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	4665      	mov	r5, ip
 8006e30:	6123      	str	r3, [r4, #16]
 8006e32:	e7b9      	b.n	8006da8 <_printf_i+0x118>
 8006e34:	6813      	ldr	r3, [r2, #0]
 8006e36:	1d19      	adds	r1, r3, #4
 8006e38:	6011      	str	r1, [r2, #0]
 8006e3a:	681d      	ldr	r5, [r3, #0]
 8006e3c:	6862      	ldr	r2, [r4, #4]
 8006e3e:	2100      	movs	r1, #0
 8006e40:	4628      	mov	r0, r5
 8006e42:	f000 fa93 	bl	800736c <memchr>
 8006e46:	b108      	cbz	r0, 8006e4c <_printf_i+0x1bc>
 8006e48:	1b40      	subs	r0, r0, r5
 8006e4a:	6060      	str	r0, [r4, #4]
 8006e4c:	6863      	ldr	r3, [r4, #4]
 8006e4e:	6123      	str	r3, [r4, #16]
 8006e50:	2300      	movs	r3, #0
 8006e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e56:	e7a7      	b.n	8006da8 <_printf_i+0x118>
 8006e58:	6923      	ldr	r3, [r4, #16]
 8006e5a:	462a      	mov	r2, r5
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	4630      	mov	r0, r6
 8006e60:	47c0      	blx	r8
 8006e62:	3001      	adds	r0, #1
 8006e64:	d0aa      	beq.n	8006dbc <_printf_i+0x12c>
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	079b      	lsls	r3, r3, #30
 8006e6a:	d413      	bmi.n	8006e94 <_printf_i+0x204>
 8006e6c:	68e0      	ldr	r0, [r4, #12]
 8006e6e:	9b03      	ldr	r3, [sp, #12]
 8006e70:	4298      	cmp	r0, r3
 8006e72:	bfb8      	it	lt
 8006e74:	4618      	movlt	r0, r3
 8006e76:	e7a3      	b.n	8006dc0 <_printf_i+0x130>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	464a      	mov	r2, r9
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	4630      	mov	r0, r6
 8006e80:	47c0      	blx	r8
 8006e82:	3001      	adds	r0, #1
 8006e84:	d09a      	beq.n	8006dbc <_printf_i+0x12c>
 8006e86:	3501      	adds	r5, #1
 8006e88:	68e3      	ldr	r3, [r4, #12]
 8006e8a:	9a03      	ldr	r2, [sp, #12]
 8006e8c:	1a9b      	subs	r3, r3, r2
 8006e8e:	42ab      	cmp	r3, r5
 8006e90:	dcf2      	bgt.n	8006e78 <_printf_i+0x1e8>
 8006e92:	e7eb      	b.n	8006e6c <_printf_i+0x1dc>
 8006e94:	2500      	movs	r5, #0
 8006e96:	f104 0919 	add.w	r9, r4, #25
 8006e9a:	e7f5      	b.n	8006e88 <_printf_i+0x1f8>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1ac      	bne.n	8006dfa <_printf_i+0x16a>
 8006ea0:	7803      	ldrb	r3, [r0, #0]
 8006ea2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ea6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eaa:	e76c      	b.n	8006d86 <_printf_i+0xf6>
 8006eac:	080075cd 	.word	0x080075cd
 8006eb0:	080075de 	.word	0x080075de

08006eb4 <_sbrk_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	4c05      	ldr	r4, [pc, #20]	; (8006ed0 <_sbrk_r+0x1c>)
 8006eba:	4605      	mov	r5, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	6023      	str	r3, [r4, #0]
 8006ec0:	f7fa ffbc 	bl	8001e3c <_sbrk>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_sbrk_r+0x1a>
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_sbrk_r+0x1a>
 8006ecc:	602b      	str	r3, [r5, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	2000121c 	.word	0x2000121c

08006ed4 <__sread>:
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006edc:	f000 faa2 	bl	8007424 <_read_r>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	bfab      	itete	ge
 8006ee4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ee6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ee8:	181b      	addge	r3, r3, r0
 8006eea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006eee:	bfac      	ite	ge
 8006ef0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ef2:	81a3      	strhlt	r3, [r4, #12]
 8006ef4:	bd10      	pop	{r4, pc}

08006ef6 <__swrite>:
 8006ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006efa:	461f      	mov	r7, r3
 8006efc:	898b      	ldrh	r3, [r1, #12]
 8006efe:	4605      	mov	r5, r0
 8006f00:	05db      	lsls	r3, r3, #23
 8006f02:	460c      	mov	r4, r1
 8006f04:	4616      	mov	r6, r2
 8006f06:	d505      	bpl.n	8006f14 <__swrite+0x1e>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f10:	f000 f9b6 	bl	8007280 <_lseek_r>
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	4632      	mov	r2, r6
 8006f18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f22:	463b      	mov	r3, r7
 8006f24:	4628      	mov	r0, r5
 8006f26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2a:	f000 b869 	b.w	8007000 <_write_r>

08006f2e <__sseek>:
 8006f2e:	b510      	push	{r4, lr}
 8006f30:	460c      	mov	r4, r1
 8006f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f36:	f000 f9a3 	bl	8007280 <_lseek_r>
 8006f3a:	1c43      	adds	r3, r0, #1
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	bf15      	itete	ne
 8006f40:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f4a:	81a3      	strheq	r3, [r4, #12]
 8006f4c:	bf18      	it	ne
 8006f4e:	81a3      	strhne	r3, [r4, #12]
 8006f50:	bd10      	pop	{r4, pc}

08006f52 <__sclose>:
 8006f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f56:	f000 b8d3 	b.w	8007100 <_close_r>
	...

08006f5c <__swbuf_r>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	460e      	mov	r6, r1
 8006f60:	4614      	mov	r4, r2
 8006f62:	4605      	mov	r5, r0
 8006f64:	b118      	cbz	r0, 8006f6e <__swbuf_r+0x12>
 8006f66:	6983      	ldr	r3, [r0, #24]
 8006f68:	b90b      	cbnz	r3, 8006f6e <__swbuf_r+0x12>
 8006f6a:	f7ff fbf9 	bl	8006760 <__sinit>
 8006f6e:	4b21      	ldr	r3, [pc, #132]	; (8006ff4 <__swbuf_r+0x98>)
 8006f70:	429c      	cmp	r4, r3
 8006f72:	d12a      	bne.n	8006fca <__swbuf_r+0x6e>
 8006f74:	686c      	ldr	r4, [r5, #4]
 8006f76:	69a3      	ldr	r3, [r4, #24]
 8006f78:	60a3      	str	r3, [r4, #8]
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	071a      	lsls	r2, r3, #28
 8006f7e:	d52e      	bpl.n	8006fde <__swbuf_r+0x82>
 8006f80:	6923      	ldr	r3, [r4, #16]
 8006f82:	b363      	cbz	r3, 8006fde <__swbuf_r+0x82>
 8006f84:	6923      	ldr	r3, [r4, #16]
 8006f86:	6820      	ldr	r0, [r4, #0]
 8006f88:	b2f6      	uxtb	r6, r6
 8006f8a:	1ac0      	subs	r0, r0, r3
 8006f8c:	6963      	ldr	r3, [r4, #20]
 8006f8e:	4637      	mov	r7, r6
 8006f90:	4283      	cmp	r3, r0
 8006f92:	dc04      	bgt.n	8006f9e <__swbuf_r+0x42>
 8006f94:	4621      	mov	r1, r4
 8006f96:	4628      	mov	r0, r5
 8006f98:	f000 f948 	bl	800722c <_fflush_r>
 8006f9c:	bb28      	cbnz	r0, 8006fea <__swbuf_r+0x8e>
 8006f9e:	68a3      	ldr	r3, [r4, #8]
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	60a3      	str	r3, [r4, #8]
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	6022      	str	r2, [r4, #0]
 8006fac:	701e      	strb	r6, [r3, #0]
 8006fae:	6963      	ldr	r3, [r4, #20]
 8006fb0:	4283      	cmp	r3, r0
 8006fb2:	d004      	beq.n	8006fbe <__swbuf_r+0x62>
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	07db      	lsls	r3, r3, #31
 8006fb8:	d519      	bpl.n	8006fee <__swbuf_r+0x92>
 8006fba:	2e0a      	cmp	r6, #10
 8006fbc:	d117      	bne.n	8006fee <__swbuf_r+0x92>
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 f933 	bl	800722c <_fflush_r>
 8006fc6:	b190      	cbz	r0, 8006fee <__swbuf_r+0x92>
 8006fc8:	e00f      	b.n	8006fea <__swbuf_r+0x8e>
 8006fca:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <__swbuf_r+0x9c>)
 8006fcc:	429c      	cmp	r4, r3
 8006fce:	d101      	bne.n	8006fd4 <__swbuf_r+0x78>
 8006fd0:	68ac      	ldr	r4, [r5, #8]
 8006fd2:	e7d0      	b.n	8006f76 <__swbuf_r+0x1a>
 8006fd4:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <__swbuf_r+0xa0>)
 8006fd6:	429c      	cmp	r4, r3
 8006fd8:	bf08      	it	eq
 8006fda:	68ec      	ldreq	r4, [r5, #12]
 8006fdc:	e7cb      	b.n	8006f76 <__swbuf_r+0x1a>
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 f81f 	bl	8007024 <__swsetup_r>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d0cc      	beq.n	8006f84 <__swbuf_r+0x28>
 8006fea:	f04f 37ff 	mov.w	r7, #4294967295
 8006fee:	4638      	mov	r0, r7
 8006ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	0800757c 	.word	0x0800757c
 8006ff8:	0800759c 	.word	0x0800759c
 8006ffc:	0800755c 	.word	0x0800755c

08007000 <_write_r>:
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4605      	mov	r5, r0
 8007004:	4608      	mov	r0, r1
 8007006:	4611      	mov	r1, r2
 8007008:	2200      	movs	r2, #0
 800700a:	4c05      	ldr	r4, [pc, #20]	; (8007020 <_write_r+0x20>)
 800700c:	6022      	str	r2, [r4, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	f7fa fec7 	bl	8001da2 <_write>
 8007014:	1c43      	adds	r3, r0, #1
 8007016:	d102      	bne.n	800701e <_write_r+0x1e>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	b103      	cbz	r3, 800701e <_write_r+0x1e>
 800701c:	602b      	str	r3, [r5, #0]
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	2000121c 	.word	0x2000121c

08007024 <__swsetup_r>:
 8007024:	4b32      	ldr	r3, [pc, #200]	; (80070f0 <__swsetup_r+0xcc>)
 8007026:	b570      	push	{r4, r5, r6, lr}
 8007028:	681d      	ldr	r5, [r3, #0]
 800702a:	4606      	mov	r6, r0
 800702c:	460c      	mov	r4, r1
 800702e:	b125      	cbz	r5, 800703a <__swsetup_r+0x16>
 8007030:	69ab      	ldr	r3, [r5, #24]
 8007032:	b913      	cbnz	r3, 800703a <__swsetup_r+0x16>
 8007034:	4628      	mov	r0, r5
 8007036:	f7ff fb93 	bl	8006760 <__sinit>
 800703a:	4b2e      	ldr	r3, [pc, #184]	; (80070f4 <__swsetup_r+0xd0>)
 800703c:	429c      	cmp	r4, r3
 800703e:	d10f      	bne.n	8007060 <__swsetup_r+0x3c>
 8007040:	686c      	ldr	r4, [r5, #4]
 8007042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007046:	b29a      	uxth	r2, r3
 8007048:	0715      	lsls	r5, r2, #28
 800704a:	d42c      	bmi.n	80070a6 <__swsetup_r+0x82>
 800704c:	06d0      	lsls	r0, r2, #27
 800704e:	d411      	bmi.n	8007074 <__swsetup_r+0x50>
 8007050:	2209      	movs	r2, #9
 8007052:	6032      	str	r2, [r6, #0]
 8007054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007058:	81a3      	strh	r3, [r4, #12]
 800705a:	f04f 30ff 	mov.w	r0, #4294967295
 800705e:	e03e      	b.n	80070de <__swsetup_r+0xba>
 8007060:	4b25      	ldr	r3, [pc, #148]	; (80070f8 <__swsetup_r+0xd4>)
 8007062:	429c      	cmp	r4, r3
 8007064:	d101      	bne.n	800706a <__swsetup_r+0x46>
 8007066:	68ac      	ldr	r4, [r5, #8]
 8007068:	e7eb      	b.n	8007042 <__swsetup_r+0x1e>
 800706a:	4b24      	ldr	r3, [pc, #144]	; (80070fc <__swsetup_r+0xd8>)
 800706c:	429c      	cmp	r4, r3
 800706e:	bf08      	it	eq
 8007070:	68ec      	ldreq	r4, [r5, #12]
 8007072:	e7e6      	b.n	8007042 <__swsetup_r+0x1e>
 8007074:	0751      	lsls	r1, r2, #29
 8007076:	d512      	bpl.n	800709e <__swsetup_r+0x7a>
 8007078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800707a:	b141      	cbz	r1, 800708e <__swsetup_r+0x6a>
 800707c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007080:	4299      	cmp	r1, r3
 8007082:	d002      	beq.n	800708a <__swsetup_r+0x66>
 8007084:	4630      	mov	r0, r6
 8007086:	f000 f981 	bl	800738c <_free_r>
 800708a:	2300      	movs	r3, #0
 800708c:	6363      	str	r3, [r4, #52]	; 0x34
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007094:	81a3      	strh	r3, [r4, #12]
 8007096:	2300      	movs	r3, #0
 8007098:	6063      	str	r3, [r4, #4]
 800709a:	6923      	ldr	r3, [r4, #16]
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	89a3      	ldrh	r3, [r4, #12]
 80070a0:	f043 0308 	orr.w	r3, r3, #8
 80070a4:	81a3      	strh	r3, [r4, #12]
 80070a6:	6923      	ldr	r3, [r4, #16]
 80070a8:	b94b      	cbnz	r3, 80070be <__swsetup_r+0x9a>
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80070b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b4:	d003      	beq.n	80070be <__swsetup_r+0x9a>
 80070b6:	4621      	mov	r1, r4
 80070b8:	4630      	mov	r0, r6
 80070ba:	f000 f917 	bl	80072ec <__smakebuf_r>
 80070be:	89a2      	ldrh	r2, [r4, #12]
 80070c0:	f012 0301 	ands.w	r3, r2, #1
 80070c4:	d00c      	beq.n	80070e0 <__swsetup_r+0xbc>
 80070c6:	2300      	movs	r3, #0
 80070c8:	60a3      	str	r3, [r4, #8]
 80070ca:	6963      	ldr	r3, [r4, #20]
 80070cc:	425b      	negs	r3, r3
 80070ce:	61a3      	str	r3, [r4, #24]
 80070d0:	6923      	ldr	r3, [r4, #16]
 80070d2:	b953      	cbnz	r3, 80070ea <__swsetup_r+0xc6>
 80070d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80070dc:	d1ba      	bne.n	8007054 <__swsetup_r+0x30>
 80070de:	bd70      	pop	{r4, r5, r6, pc}
 80070e0:	0792      	lsls	r2, r2, #30
 80070e2:	bf58      	it	pl
 80070e4:	6963      	ldrpl	r3, [r4, #20]
 80070e6:	60a3      	str	r3, [r4, #8]
 80070e8:	e7f2      	b.n	80070d0 <__swsetup_r+0xac>
 80070ea:	2000      	movs	r0, #0
 80070ec:	e7f7      	b.n	80070de <__swsetup_r+0xba>
 80070ee:	bf00      	nop
 80070f0:	20000010 	.word	0x20000010
 80070f4:	0800757c 	.word	0x0800757c
 80070f8:	0800759c 	.word	0x0800759c
 80070fc:	0800755c 	.word	0x0800755c

08007100 <_close_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	2300      	movs	r3, #0
 8007104:	4c05      	ldr	r4, [pc, #20]	; (800711c <_close_r+0x1c>)
 8007106:	4605      	mov	r5, r0
 8007108:	4608      	mov	r0, r1
 800710a:	6023      	str	r3, [r4, #0]
 800710c:	f7fa fe65 	bl	8001dda <_close>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d102      	bne.n	800711a <_close_r+0x1a>
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	b103      	cbz	r3, 800711a <_close_r+0x1a>
 8007118:	602b      	str	r3, [r5, #0]
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	2000121c 	.word	0x2000121c

08007120 <__sflush_r>:
 8007120:	898a      	ldrh	r2, [r1, #12]
 8007122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007126:	4605      	mov	r5, r0
 8007128:	0710      	lsls	r0, r2, #28
 800712a:	460c      	mov	r4, r1
 800712c:	d458      	bmi.n	80071e0 <__sflush_r+0xc0>
 800712e:	684b      	ldr	r3, [r1, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	dc05      	bgt.n	8007140 <__sflush_r+0x20>
 8007134:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007136:	2b00      	cmp	r3, #0
 8007138:	dc02      	bgt.n	8007140 <__sflush_r+0x20>
 800713a:	2000      	movs	r0, #0
 800713c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007142:	2e00      	cmp	r6, #0
 8007144:	d0f9      	beq.n	800713a <__sflush_r+0x1a>
 8007146:	2300      	movs	r3, #0
 8007148:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800714c:	682f      	ldr	r7, [r5, #0]
 800714e:	6a21      	ldr	r1, [r4, #32]
 8007150:	602b      	str	r3, [r5, #0]
 8007152:	d032      	beq.n	80071ba <__sflush_r+0x9a>
 8007154:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	075a      	lsls	r2, r3, #29
 800715a:	d505      	bpl.n	8007168 <__sflush_r+0x48>
 800715c:	6863      	ldr	r3, [r4, #4]
 800715e:	1ac0      	subs	r0, r0, r3
 8007160:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007162:	b10b      	cbz	r3, 8007168 <__sflush_r+0x48>
 8007164:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007166:	1ac0      	subs	r0, r0, r3
 8007168:	2300      	movs	r3, #0
 800716a:	4602      	mov	r2, r0
 800716c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800716e:	6a21      	ldr	r1, [r4, #32]
 8007170:	4628      	mov	r0, r5
 8007172:	47b0      	blx	r6
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	d106      	bne.n	8007188 <__sflush_r+0x68>
 800717a:	6829      	ldr	r1, [r5, #0]
 800717c:	291d      	cmp	r1, #29
 800717e:	d848      	bhi.n	8007212 <__sflush_r+0xf2>
 8007180:	4a29      	ldr	r2, [pc, #164]	; (8007228 <__sflush_r+0x108>)
 8007182:	40ca      	lsrs	r2, r1
 8007184:	07d6      	lsls	r6, r2, #31
 8007186:	d544      	bpl.n	8007212 <__sflush_r+0xf2>
 8007188:	2200      	movs	r2, #0
 800718a:	6062      	str	r2, [r4, #4]
 800718c:	6922      	ldr	r2, [r4, #16]
 800718e:	04d9      	lsls	r1, r3, #19
 8007190:	6022      	str	r2, [r4, #0]
 8007192:	d504      	bpl.n	800719e <__sflush_r+0x7e>
 8007194:	1c42      	adds	r2, r0, #1
 8007196:	d101      	bne.n	800719c <__sflush_r+0x7c>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	b903      	cbnz	r3, 800719e <__sflush_r+0x7e>
 800719c:	6560      	str	r0, [r4, #84]	; 0x54
 800719e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071a0:	602f      	str	r7, [r5, #0]
 80071a2:	2900      	cmp	r1, #0
 80071a4:	d0c9      	beq.n	800713a <__sflush_r+0x1a>
 80071a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071aa:	4299      	cmp	r1, r3
 80071ac:	d002      	beq.n	80071b4 <__sflush_r+0x94>
 80071ae:	4628      	mov	r0, r5
 80071b0:	f000 f8ec 	bl	800738c <_free_r>
 80071b4:	2000      	movs	r0, #0
 80071b6:	6360      	str	r0, [r4, #52]	; 0x34
 80071b8:	e7c0      	b.n	800713c <__sflush_r+0x1c>
 80071ba:	2301      	movs	r3, #1
 80071bc:	4628      	mov	r0, r5
 80071be:	47b0      	blx	r6
 80071c0:	1c41      	adds	r1, r0, #1
 80071c2:	d1c8      	bne.n	8007156 <__sflush_r+0x36>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0c5      	beq.n	8007156 <__sflush_r+0x36>
 80071ca:	2b1d      	cmp	r3, #29
 80071cc:	d001      	beq.n	80071d2 <__sflush_r+0xb2>
 80071ce:	2b16      	cmp	r3, #22
 80071d0:	d101      	bne.n	80071d6 <__sflush_r+0xb6>
 80071d2:	602f      	str	r7, [r5, #0]
 80071d4:	e7b1      	b.n	800713a <__sflush_r+0x1a>
 80071d6:	89a3      	ldrh	r3, [r4, #12]
 80071d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071dc:	81a3      	strh	r3, [r4, #12]
 80071de:	e7ad      	b.n	800713c <__sflush_r+0x1c>
 80071e0:	690f      	ldr	r7, [r1, #16]
 80071e2:	2f00      	cmp	r7, #0
 80071e4:	d0a9      	beq.n	800713a <__sflush_r+0x1a>
 80071e6:	0793      	lsls	r3, r2, #30
 80071e8:	bf18      	it	ne
 80071ea:	2300      	movne	r3, #0
 80071ec:	680e      	ldr	r6, [r1, #0]
 80071ee:	bf08      	it	eq
 80071f0:	694b      	ldreq	r3, [r1, #20]
 80071f2:	eba6 0807 	sub.w	r8, r6, r7
 80071f6:	600f      	str	r7, [r1, #0]
 80071f8:	608b      	str	r3, [r1, #8]
 80071fa:	f1b8 0f00 	cmp.w	r8, #0
 80071fe:	dd9c      	ble.n	800713a <__sflush_r+0x1a>
 8007200:	4643      	mov	r3, r8
 8007202:	463a      	mov	r2, r7
 8007204:	6a21      	ldr	r1, [r4, #32]
 8007206:	4628      	mov	r0, r5
 8007208:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800720a:	47b0      	blx	r6
 800720c:	2800      	cmp	r0, #0
 800720e:	dc06      	bgt.n	800721e <__sflush_r+0xfe>
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007216:	81a3      	strh	r3, [r4, #12]
 8007218:	f04f 30ff 	mov.w	r0, #4294967295
 800721c:	e78e      	b.n	800713c <__sflush_r+0x1c>
 800721e:	4407      	add	r7, r0
 8007220:	eba8 0800 	sub.w	r8, r8, r0
 8007224:	e7e9      	b.n	80071fa <__sflush_r+0xda>
 8007226:	bf00      	nop
 8007228:	20400001 	.word	0x20400001

0800722c <_fflush_r>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	690b      	ldr	r3, [r1, #16]
 8007230:	4605      	mov	r5, r0
 8007232:	460c      	mov	r4, r1
 8007234:	b1db      	cbz	r3, 800726e <_fflush_r+0x42>
 8007236:	b118      	cbz	r0, 8007240 <_fflush_r+0x14>
 8007238:	6983      	ldr	r3, [r0, #24]
 800723a:	b90b      	cbnz	r3, 8007240 <_fflush_r+0x14>
 800723c:	f7ff fa90 	bl	8006760 <__sinit>
 8007240:	4b0c      	ldr	r3, [pc, #48]	; (8007274 <_fflush_r+0x48>)
 8007242:	429c      	cmp	r4, r3
 8007244:	d109      	bne.n	800725a <_fflush_r+0x2e>
 8007246:	686c      	ldr	r4, [r5, #4]
 8007248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800724c:	b17b      	cbz	r3, 800726e <_fflush_r+0x42>
 800724e:	4621      	mov	r1, r4
 8007250:	4628      	mov	r0, r5
 8007252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007256:	f7ff bf63 	b.w	8007120 <__sflush_r>
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <_fflush_r+0x4c>)
 800725c:	429c      	cmp	r4, r3
 800725e:	d101      	bne.n	8007264 <_fflush_r+0x38>
 8007260:	68ac      	ldr	r4, [r5, #8]
 8007262:	e7f1      	b.n	8007248 <_fflush_r+0x1c>
 8007264:	4b05      	ldr	r3, [pc, #20]	; (800727c <_fflush_r+0x50>)
 8007266:	429c      	cmp	r4, r3
 8007268:	bf08      	it	eq
 800726a:	68ec      	ldreq	r4, [r5, #12]
 800726c:	e7ec      	b.n	8007248 <_fflush_r+0x1c>
 800726e:	2000      	movs	r0, #0
 8007270:	bd38      	pop	{r3, r4, r5, pc}
 8007272:	bf00      	nop
 8007274:	0800757c 	.word	0x0800757c
 8007278:	0800759c 	.word	0x0800759c
 800727c:	0800755c 	.word	0x0800755c

08007280 <_lseek_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4605      	mov	r5, r0
 8007284:	4608      	mov	r0, r1
 8007286:	4611      	mov	r1, r2
 8007288:	2200      	movs	r2, #0
 800728a:	4c05      	ldr	r4, [pc, #20]	; (80072a0 <_lseek_r+0x20>)
 800728c:	6022      	str	r2, [r4, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f7fa fdc7 	bl	8001e22 <_lseek>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d102      	bne.n	800729e <_lseek_r+0x1e>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	b103      	cbz	r3, 800729e <_lseek_r+0x1e>
 800729c:	602b      	str	r3, [r5, #0]
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	2000121c 	.word	0x2000121c

080072a4 <__swhatbuf_r>:
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	460e      	mov	r6, r1
 80072a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ac:	b096      	sub	sp, #88	; 0x58
 80072ae:	2900      	cmp	r1, #0
 80072b0:	4614      	mov	r4, r2
 80072b2:	461d      	mov	r5, r3
 80072b4:	da07      	bge.n	80072c6 <__swhatbuf_r+0x22>
 80072b6:	2300      	movs	r3, #0
 80072b8:	602b      	str	r3, [r5, #0]
 80072ba:	89b3      	ldrh	r3, [r6, #12]
 80072bc:	061a      	lsls	r2, r3, #24
 80072be:	d410      	bmi.n	80072e2 <__swhatbuf_r+0x3e>
 80072c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072c4:	e00e      	b.n	80072e4 <__swhatbuf_r+0x40>
 80072c6:	466a      	mov	r2, sp
 80072c8:	f000 f8be 	bl	8007448 <_fstat_r>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	dbf2      	blt.n	80072b6 <__swhatbuf_r+0x12>
 80072d0:	9a01      	ldr	r2, [sp, #4]
 80072d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072da:	425a      	negs	r2, r3
 80072dc:	415a      	adcs	r2, r3
 80072de:	602a      	str	r2, [r5, #0]
 80072e0:	e7ee      	b.n	80072c0 <__swhatbuf_r+0x1c>
 80072e2:	2340      	movs	r3, #64	; 0x40
 80072e4:	2000      	movs	r0, #0
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	b016      	add	sp, #88	; 0x58
 80072ea:	bd70      	pop	{r4, r5, r6, pc}

080072ec <__smakebuf_r>:
 80072ec:	898b      	ldrh	r3, [r1, #12]
 80072ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072f0:	079d      	lsls	r5, r3, #30
 80072f2:	4606      	mov	r6, r0
 80072f4:	460c      	mov	r4, r1
 80072f6:	d507      	bpl.n	8007308 <__smakebuf_r+0x1c>
 80072f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	6123      	str	r3, [r4, #16]
 8007300:	2301      	movs	r3, #1
 8007302:	6163      	str	r3, [r4, #20]
 8007304:	b002      	add	sp, #8
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	ab01      	add	r3, sp, #4
 800730a:	466a      	mov	r2, sp
 800730c:	f7ff ffca 	bl	80072a4 <__swhatbuf_r>
 8007310:	9900      	ldr	r1, [sp, #0]
 8007312:	4605      	mov	r5, r0
 8007314:	4630      	mov	r0, r6
 8007316:	f7ff faad 	bl	8006874 <_malloc_r>
 800731a:	b948      	cbnz	r0, 8007330 <__smakebuf_r+0x44>
 800731c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007320:	059a      	lsls	r2, r3, #22
 8007322:	d4ef      	bmi.n	8007304 <__smakebuf_r+0x18>
 8007324:	f023 0303 	bic.w	r3, r3, #3
 8007328:	f043 0302 	orr.w	r3, r3, #2
 800732c:	81a3      	strh	r3, [r4, #12]
 800732e:	e7e3      	b.n	80072f8 <__smakebuf_r+0xc>
 8007330:	4b0d      	ldr	r3, [pc, #52]	; (8007368 <__smakebuf_r+0x7c>)
 8007332:	62b3      	str	r3, [r6, #40]	; 0x28
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	6020      	str	r0, [r4, #0]
 8007338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733c:	81a3      	strh	r3, [r4, #12]
 800733e:	9b00      	ldr	r3, [sp, #0]
 8007340:	6120      	str	r0, [r4, #16]
 8007342:	6163      	str	r3, [r4, #20]
 8007344:	9b01      	ldr	r3, [sp, #4]
 8007346:	b15b      	cbz	r3, 8007360 <__smakebuf_r+0x74>
 8007348:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800734c:	4630      	mov	r0, r6
 800734e:	f000 f88d 	bl	800746c <_isatty_r>
 8007352:	b128      	cbz	r0, 8007360 <__smakebuf_r+0x74>
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	f023 0303 	bic.w	r3, r3, #3
 800735a:	f043 0301 	orr.w	r3, r3, #1
 800735e:	81a3      	strh	r3, [r4, #12]
 8007360:	89a3      	ldrh	r3, [r4, #12]
 8007362:	431d      	orrs	r5, r3
 8007364:	81a5      	strh	r5, [r4, #12]
 8007366:	e7cd      	b.n	8007304 <__smakebuf_r+0x18>
 8007368:	08006729 	.word	0x08006729

0800736c <memchr>:
 800736c:	b510      	push	{r4, lr}
 800736e:	b2c9      	uxtb	r1, r1
 8007370:	4402      	add	r2, r0
 8007372:	4290      	cmp	r0, r2
 8007374:	4603      	mov	r3, r0
 8007376:	d101      	bne.n	800737c <memchr+0x10>
 8007378:	2300      	movs	r3, #0
 800737a:	e003      	b.n	8007384 <memchr+0x18>
 800737c:	781c      	ldrb	r4, [r3, #0]
 800737e:	3001      	adds	r0, #1
 8007380:	428c      	cmp	r4, r1
 8007382:	d1f6      	bne.n	8007372 <memchr+0x6>
 8007384:	4618      	mov	r0, r3
 8007386:	bd10      	pop	{r4, pc}

08007388 <__malloc_lock>:
 8007388:	4770      	bx	lr

0800738a <__malloc_unlock>:
 800738a:	4770      	bx	lr

0800738c <_free_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4605      	mov	r5, r0
 8007390:	2900      	cmp	r1, #0
 8007392:	d043      	beq.n	800741c <_free_r+0x90>
 8007394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007398:	1f0c      	subs	r4, r1, #4
 800739a:	2b00      	cmp	r3, #0
 800739c:	bfb8      	it	lt
 800739e:	18e4      	addlt	r4, r4, r3
 80073a0:	f7ff fff2 	bl	8007388 <__malloc_lock>
 80073a4:	4a1e      	ldr	r2, [pc, #120]	; (8007420 <_free_r+0x94>)
 80073a6:	6813      	ldr	r3, [r2, #0]
 80073a8:	4610      	mov	r0, r2
 80073aa:	b933      	cbnz	r3, 80073ba <_free_r+0x2e>
 80073ac:	6063      	str	r3, [r4, #4]
 80073ae:	6014      	str	r4, [r2, #0]
 80073b0:	4628      	mov	r0, r5
 80073b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073b6:	f7ff bfe8 	b.w	800738a <__malloc_unlock>
 80073ba:	42a3      	cmp	r3, r4
 80073bc:	d90b      	bls.n	80073d6 <_free_r+0x4a>
 80073be:	6821      	ldr	r1, [r4, #0]
 80073c0:	1862      	adds	r2, r4, r1
 80073c2:	4293      	cmp	r3, r2
 80073c4:	bf01      	itttt	eq
 80073c6:	681a      	ldreq	r2, [r3, #0]
 80073c8:	685b      	ldreq	r3, [r3, #4]
 80073ca:	1852      	addeq	r2, r2, r1
 80073cc:	6022      	streq	r2, [r4, #0]
 80073ce:	6063      	str	r3, [r4, #4]
 80073d0:	6004      	str	r4, [r0, #0]
 80073d2:	e7ed      	b.n	80073b0 <_free_r+0x24>
 80073d4:	4613      	mov	r3, r2
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	b10a      	cbz	r2, 80073de <_free_r+0x52>
 80073da:	42a2      	cmp	r2, r4
 80073dc:	d9fa      	bls.n	80073d4 <_free_r+0x48>
 80073de:	6819      	ldr	r1, [r3, #0]
 80073e0:	1858      	adds	r0, r3, r1
 80073e2:	42a0      	cmp	r0, r4
 80073e4:	d10b      	bne.n	80073fe <_free_r+0x72>
 80073e6:	6820      	ldr	r0, [r4, #0]
 80073e8:	4401      	add	r1, r0
 80073ea:	1858      	adds	r0, r3, r1
 80073ec:	4282      	cmp	r2, r0
 80073ee:	6019      	str	r1, [r3, #0]
 80073f0:	d1de      	bne.n	80073b0 <_free_r+0x24>
 80073f2:	6810      	ldr	r0, [r2, #0]
 80073f4:	6852      	ldr	r2, [r2, #4]
 80073f6:	4401      	add	r1, r0
 80073f8:	6019      	str	r1, [r3, #0]
 80073fa:	605a      	str	r2, [r3, #4]
 80073fc:	e7d8      	b.n	80073b0 <_free_r+0x24>
 80073fe:	d902      	bls.n	8007406 <_free_r+0x7a>
 8007400:	230c      	movs	r3, #12
 8007402:	602b      	str	r3, [r5, #0]
 8007404:	e7d4      	b.n	80073b0 <_free_r+0x24>
 8007406:	6820      	ldr	r0, [r4, #0]
 8007408:	1821      	adds	r1, r4, r0
 800740a:	428a      	cmp	r2, r1
 800740c:	bf01      	itttt	eq
 800740e:	6811      	ldreq	r1, [r2, #0]
 8007410:	6852      	ldreq	r2, [r2, #4]
 8007412:	1809      	addeq	r1, r1, r0
 8007414:	6021      	streq	r1, [r4, #0]
 8007416:	6062      	str	r2, [r4, #4]
 8007418:	605c      	str	r4, [r3, #4]
 800741a:	e7c9      	b.n	80073b0 <_free_r+0x24>
 800741c:	bd38      	pop	{r3, r4, r5, pc}
 800741e:	bf00      	nop
 8007420:	20001038 	.word	0x20001038

08007424 <_read_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4605      	mov	r5, r0
 8007428:	4608      	mov	r0, r1
 800742a:	4611      	mov	r1, r2
 800742c:	2200      	movs	r2, #0
 800742e:	4c05      	ldr	r4, [pc, #20]	; (8007444 <_read_r+0x20>)
 8007430:	6022      	str	r2, [r4, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	f7fa fc98 	bl	8001d68 <_read>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d102      	bne.n	8007442 <_read_r+0x1e>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	b103      	cbz	r3, 8007442 <_read_r+0x1e>
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	bd38      	pop	{r3, r4, r5, pc}
 8007444:	2000121c 	.word	0x2000121c

08007448 <_fstat_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	2300      	movs	r3, #0
 800744c:	4c06      	ldr	r4, [pc, #24]	; (8007468 <_fstat_r+0x20>)
 800744e:	4605      	mov	r5, r0
 8007450:	4608      	mov	r0, r1
 8007452:	4611      	mov	r1, r2
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	f7fa fccb 	bl	8001df0 <_fstat>
 800745a:	1c43      	adds	r3, r0, #1
 800745c:	d102      	bne.n	8007464 <_fstat_r+0x1c>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	b103      	cbz	r3, 8007464 <_fstat_r+0x1c>
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	bd38      	pop	{r3, r4, r5, pc}
 8007466:	bf00      	nop
 8007468:	2000121c 	.word	0x2000121c

0800746c <_isatty_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	2300      	movs	r3, #0
 8007470:	4c05      	ldr	r4, [pc, #20]	; (8007488 <_isatty_r+0x1c>)
 8007472:	4605      	mov	r5, r0
 8007474:	4608      	mov	r0, r1
 8007476:	6023      	str	r3, [r4, #0]
 8007478:	f7fa fcc9 	bl	8001e0e <_isatty>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d102      	bne.n	8007486 <_isatty_r+0x1a>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	b103      	cbz	r3, 8007486 <_isatty_r+0x1a>
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	2000121c 	.word	0x2000121c

0800748c <_init>:
 800748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748e:	bf00      	nop
 8007490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007492:	bc08      	pop	{r3}
 8007494:	469e      	mov	lr, r3
 8007496:	4770      	bx	lr

08007498 <_fini>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	bf00      	nop
 800749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749e:	bc08      	pop	{r3}
 80074a0:	469e      	mov	lr, r3
 80074a2:	4770      	bx	lr
