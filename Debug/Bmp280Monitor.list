
Bmp280Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ac  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080073bc  080073bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007578  08007578  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007578  08007578  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007578  08007578  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007578  08007578  00017578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800757c  0800757c  0001757c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001280  20000074  080075f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012f4  080075f4  000212f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020151  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004708  00000000  00000000  000401ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001730  00000000  00000000  000448f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001518  00000000  00000000  00046028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d985  00000000  00000000  00047540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016c2c  00000000  00000000  00064ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c07d  00000000  00000000  0007baf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117b6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066c0  00000000  00000000  00117bec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080073a4 	.word	0x080073a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080073a4 	.word	0x080073a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a58:	f1a2 0201 	sub.w	r2, r2, #1
 8000a5c:	d1ed      	bne.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_ADC1_Init+0x74>)
 8000bca:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <MX_ADC1_Init+0x78>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <MX_ADC1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_ADC1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_ADC1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_ADC1_Init+0x74>)
 8000be2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000be6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_ADC1_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_ADC1_Init+0x74>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf4:	480d      	ldr	r0, [pc, #52]	; (8000c2c <MX_ADC1_Init+0x74>)
 8000bf6:	f000 ff49 	bl	8001a8c <HAL_ADC_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c00:	f000 fa04 	bl	800100c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c04:	2310      	movs	r3, #16
 8000c06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_ADC1_Init+0x74>)
 8000c16:	f001 f99f 	bl	8001f58 <HAL_ADC_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c20:	f000 f9f4 	bl	800100c <Error_Handler>
  }

}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20001068 	.word	0x20001068
 8000c30:	40012400 	.word	0x40012400

08000c34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <HAL_ADC_MspInit+0x44>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d113      	bne.n	8000c6e <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_ADC_MspInit+0x48>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <HAL_ADC_MspInit+0x48>)
 8000c4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c50:	6193      	str	r3, [r2, #24]
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_ADC_MspInit+0x48>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2105      	movs	r1, #5
 8000c62:	2012      	movs	r0, #18
 8000c64:	f001 fc57 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c68:	2012      	movs	r0, #18
 8000c6a:	f001 fc70 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40012400 	.word	0x40012400
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
extern uint8_t flag;
extern int16_t Result;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1){
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_ADC_ConvCpltCallback+0x30>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d109      	bne.n	8000ca6 <HAL_ADC_ConvCpltCallback+0x26>
    	Result = HAL_ADC_GetValue(&hadc1);
 8000c92:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <HAL_ADC_ConvCpltCallback+0x34>)
 8000c94:	f001 f888 	bl	8001da8 <HAL_ADC_GetValue>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b21a      	sxth	r2, r3
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_ADC_ConvCpltCallback+0x38>)
 8000c9e:	801a      	strh	r2, [r3, #0]
    	flag = 1;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_ADC_ConvCpltCallback+0x3c>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
    }
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40012400 	.word	0x40012400
 8000cb4:	20001068 	.word	0x20001068
 8000cb8:	200002ea 	.word	0x200002ea
 8000cbc:	200002e8 	.word	0x200002e8

08000cc0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <MX_DMA_Init+0x68>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <MX_DMA_Init+0x68>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6153      	str	r3, [r2, #20]
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <MX_DMA_Init+0x68>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	200e      	movs	r0, #14
 8000ce4:	f001 fc17 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ce8:	200e      	movs	r0, #14
 8000cea:	f001 fc30 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2105      	movs	r1, #5
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	f001 fc0f 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000cf8:	200f      	movs	r0, #15
 8000cfa:	f001 fc28 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2105      	movs	r1, #5
 8000d02:	2010      	movs	r0, #16
 8000d04:	f001 fc07 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d08:	2010      	movs	r0, #16
 8000d0a:	f001 fc20 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2105      	movs	r1, #5
 8000d12:	2011      	movs	r0, #17
 8000d14:	f001 fbff 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d18:	2011      	movs	r0, #17
 8000d1a:	f001 fc18 	bl	800254e <HAL_NVIC_EnableIRQ>

}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000

08000d2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <vApplicationGetIdleTaskMemory+0x28>)
 8000d3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	20000090 	.word	0x20000090
 8000d58:	200000e4 	.word	0x200000e4

08000d5c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d5c:	b5b0      	push	{r4, r5, r7, lr}
 8000d5e:	b092      	sub	sp, #72	; 0x48
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutex */
  osMutexDef(mutex);
 8000d62:	2300      	movs	r3, #0
 8000d64:	643b      	str	r3, [r7, #64]	; 0x40
 8000d66:	2300      	movs	r3, #0
 8000d68:	647b      	str	r3, [r7, #68]	; 0x44
  mutexHandle = osMutexCreate(osMutex(mutex));
 8000d6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 fd06 	bl	8004780 <osMutexCreate>
 8000d74:	4602      	mov	r2, r0
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_FREERTOS_Init+0x88>)
 8000d78:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of semaphore */
  osSemaphoreDef(semaphore);
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d7e:	2300      	movs	r3, #0
 8000d80:	63fb      	str	r3, [r7, #60]	; 0x3c
  semaphoreHandle = osSemaphoreCreate(osSemaphore(semaphore), 1);
 8000d82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d86:	2101      	movs	r1, #1
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 fd11 	bl	80047b0 <osSemaphoreCreate>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <MX_FREERTOS_Init+0x8c>)
 8000d92:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of bmp280Monitor */
  osThreadDef(bmp280Monitor, taskBmp280Monitor, osPriorityNormal, 0, 256);
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_FREERTOS_Init+0x90>)
 8000d96:	f107 041c 	add.w	r4, r7, #28
 8000d9a:	461d      	mov	r5, r3
 8000d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000da4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bmp280MonitorHandle = osThreadCreate(osThread(bmp280Monitor), NULL);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f003 fc86 	bl	80046c0 <osThreadCreate>
 8000db4:	4602      	mov	r2, r0
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_FREERTOS_Init+0x94>)
 8000db8:	601a      	str	r2, [r3, #0]

  /* definition and creation of bluetooth */
  osThreadDef(bluetooth, taskBluetooth, osPriorityNormal, 0, 256);
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_FREERTOS_Init+0x98>)
 8000dbc:	463c      	mov	r4, r7
 8000dbe:	461d      	mov	r5, r3
 8000dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bluetoothHandle = osThreadCreate(osThread(bluetooth), NULL);
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 fc75 	bl	80046c0 <osThreadCreate>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <MX_FREERTOS_Init+0x9c>)
 8000dda:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000ddc:	bf00      	nop
 8000dde:	3748      	adds	r7, #72	; 0x48
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bdb0      	pop	{r4, r5, r7, pc}
 8000de4:	2000109c 	.word	0x2000109c
 8000de8:	200010a4 	.word	0x200010a4
 8000dec:	080073cc 	.word	0x080073cc
 8000df0:	200010a0 	.word	0x200010a0
 8000df4:	080073f4 	.word	0x080073f4
 8000df8:	20001098 	.word	0x20001098

08000dfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_GPIO_Init+0x8c>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <MX_GPIO_Init+0x8c>)
 8000e16:	f043 0320 	orr.w	r3, r3, #32
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_GPIO_Init+0x8c>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0320 	and.w	r3, r3, #32
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_GPIO_Init+0x8c>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <MX_GPIO_Init+0x8c>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_GPIO_Init+0x8c>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_GPIO_Init+0x8c>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <MX_GPIO_Init+0x8c>)
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_GPIO_Init+0x8c>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <MX_GPIO_Init+0x90>)
 8000e5e:	f001 ff43 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000e62:	2310      	movs	r3, #16
 8000e64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_GPIO_Init+0x90>)
 8000e7a:	f001 fddb 	bl	8002a34 <HAL_GPIO_Init>

}
 8000e7e:	bf00      	nop
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010800 	.word	0x40010800

08000e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e94:	f000 fdc8 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e98:	f000 f813 	bl	8000ec2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9c:	f7ff ffae 	bl	8000dfc <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea0:	f7ff ff0e 	bl	8000cc0 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ea4:	f000 f8b8 	bl	8001018 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ea8:	f000 fb6e 	bl	8001588 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000eac:	f7ff fe84 	bl	8000bb8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000eb0:	f000 fb94 	bl	80015dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uartInitInfo();
 8000eb4:	f000 fcfa 	bl	80018ac <uartInitInfo>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000eb8:	f7ff ff50 	bl	8000d5c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000ebc:	f003 fbf9 	bl	80046b2 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <main+0x30>

08000ec2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b094      	sub	sp, #80	; 0x50
 8000ec6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ecc:	2228      	movs	r2, #40	; 0x28
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f005 fb0c 	bl	80064ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	60da      	str	r2, [r3, #12]
 8000ee4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f00:	2301      	movs	r3, #1
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f04:	2302      	movs	r3, #2
 8000f06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f0e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 fefd 	bl	8002d18 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f24:	f000 f872 	bl	800100c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f38:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2102      	movs	r1, #2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 f967 	bl	8003218 <HAL_RCC_ClockConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f50:	f000 f85c 	bl	800100c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f54:	2302      	movs	r3, #2
 8000f56:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f5c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4618      	mov	r0, r3
 8000f62:	f002 fb25 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f6c:	f000 f84e 	bl	800100c <Error_Handler>
  }
}
 8000f70:	bf00      	nop
 8000f72:	3750      	adds	r7, #80	; 0x50
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <waitIdle>:
			D(printf("%s timeout: %d\r\n", waitStr, tout));
	}
  return pFlags->isIrqRx;
}

u8 waitIdle(char* waitStr, IrqFlags* pFlags, u16 pause, u16 timeout){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4611      	mov	r1, r2
 8000f84:	461a      	mov	r2, r3
 8000f86:	460b      	mov	r3, r1
 8000f88:	80fb      	strh	r3, [r7, #6]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	80bb      	strh	r3, [r7, #4]
	u16 tout = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	82fb      	strh	r3, [r7, #22]
	while(!(pFlags->isIrqIdle) && tout < timeout){
 8000f92:	e013      	b.n	8000fbc <waitIdle+0x44>
		osDelay(pause);
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 fbde 	bl	8004758 <osDelay>
		tout += pause;
 8000f9c:	8afa      	ldrh	r2, [r7, #22]
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	82fb      	strh	r3, [r7, #22]
		if(strlen(waitStr) > 1)
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f7ff f8d3 	bl	8000150 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d905      	bls.n	8000fbc <waitIdle+0x44>
			D(printf("%s timeout: %d\r\n", waitStr, tout));
 8000fb0:	8afb      	ldrh	r3, [r7, #22]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <waitIdle+0x6c>)
 8000fb8:	f005 faa2 	bl	8006500 <iprintf>
	while(!(pFlags->isIrqIdle) && tout < timeout){
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	f003 031c 	and.w	r3, r3, #28
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d103      	bne.n	8000fd2 <waitIdle+0x5a>
 8000fca:	8afa      	ldrh	r2, [r7, #22]
 8000fcc:	88bb      	ldrh	r3, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d3e0      	bcc.n	8000f94 <waitIdle+0x1c>
	}
  return pFlags->isIrqIdle;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8000fda:	b2db      	uxtb	r3, r3
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	08007410 	.word	0x08007410

08000fe8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ffa:	f000 fd2b 	bl	8001a54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40012c00 	.word	0x40012c00

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800101c:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_SPI1_Init+0x64>)
 800101e:	4a18      	ldr	r2, [pc, #96]	; (8001080 <MX_SPI1_Init+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_SPI1_Init+0x64>)
 8001024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001028:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_SPI1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_SPI1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_SPI1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_SPI1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_SPI1_Init+0x64>)
 8001044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001048:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_SPI1_Init+0x64>)
 800104c:	2228      	movs	r2, #40	; 0x28
 800104e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <MX_SPI1_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_SPI1_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <MX_SPI1_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_SPI1_Init+0x64>)
 8001064:	220a      	movs	r2, #10
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <MX_SPI1_Init+0x64>)
 800106a:	f002 fc13 	bl	8003894 <HAL_SPI_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001074:	f7ff ffca 	bl	800100c <Error_Handler>
  }

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200010a8 	.word	0x200010a8
 8001080:	40013000 	.word	0x40013000

08001084 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a1b      	ldr	r2, [pc, #108]	; (800110c <HAL_SPI_MspInit+0x88>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d12f      	bne.n	8001104 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_SPI_MspInit+0x8c>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a19      	ldr	r2, [pc, #100]	; (8001110 <HAL_SPI_MspInit+0x8c>)
 80010aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <HAL_SPI_MspInit+0x8c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_SPI_MspInit+0x8c>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a13      	ldr	r2, [pc, #76]	; (8001110 <HAL_SPI_MspInit+0x8c>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_SPI_MspInit+0x8c>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010d4:	23a0      	movs	r3, #160	; 0xa0
 80010d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	480b      	ldr	r0, [pc, #44]	; (8001114 <HAL_SPI_MspInit+0x90>)
 80010e8:	f001 fca4 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4619      	mov	r1, r3
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_SPI_MspInit+0x90>)
 8001100:	f001 fc98 	bl	8002a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40013000 	.word	0x40013000
 8001110:	40021000 	.word	0x40021000
 8001114:	40010800 	.word	0x40010800

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_MspInit+0x68>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <HAL_MspInit+0x68>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_MspInit+0x68>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_MspInit+0x68>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a11      	ldr	r2, [pc, #68]	; (8001180 <HAL_MspInit+0x68>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <HAL_MspInit+0x68>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	210f      	movs	r1, #15
 8001152:	f06f 0001 	mvn.w	r0, #1
 8001156:	f001 f9de 	bl	8002516 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_MspInit+0x6c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4a04      	ldr	r2, [pc, #16]	; (8001184 <HAL_MspInit+0x6c>)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000

08001188 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	2019      	movs	r0, #25
 800119e:	f001 f9ba 	bl	8002516 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80011a2:	2019      	movs	r0, #25
 80011a4:	f001 f9d3 	bl	800254e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011a8:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <HAL_InitTick+0x9c>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_InitTick+0x9c>)
 80011ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_InitTick+0x9c>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011c0:	f107 0210 	add.w	r2, r7, #16
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 f9a2 	bl	8003514 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011d0:	f002 f98c 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 80011d4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d8:	4a13      	ldr	r2, [pc, #76]	; (8001228 <HAL_InitTick+0xa0>)
 80011da:	fba2 2303 	umull	r2, r3, r2, r3
 80011de:	0c9b      	lsrs	r3, r3, #18
 80011e0:	3b01      	subs	r3, #1
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_InitTick+0xa4>)
 80011e6:	4a12      	ldr	r2, [pc, #72]	; (8001230 <HAL_InitTick+0xa8>)
 80011e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_InitTick+0xa4>)
 80011ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_InitTick+0xa4>)
 80011f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_InitTick+0xa4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_InitTick+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001204:	4809      	ldr	r0, [pc, #36]	; (800122c <HAL_InitTick+0xa4>)
 8001206:	f002 fbc9 	bl	800399c <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d104      	bne.n	800121a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <HAL_InitTick+0xa4>)
 8001212:	f002 fc1b 	bl	8003a4c <HAL_TIM_Base_Start_IT>
 8001216:	4603      	mov	r3, r0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3730      	adds	r7, #48	; 0x30
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40021000 	.word	0x40021000
 8001228:	431bde83 	.word	0x431bde83
 800122c:	20001100 	.word	0x20001100
 8001230:	40012c00 	.word	0x40012c00

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <HardFault_Handler+0x4>

08001246 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <MemManage_Handler+0x4>

0800124c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <BusFault_Handler+0x4>

08001252 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <UsageFault_Handler+0x4>

08001258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <DMA1_Channel4_IRQHandler+0x10>)
 800126a:	f001 faaf 	bl	80027cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200011a0 	.word	0x200011a0

08001278 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <DMA1_Channel5_IRQHandler+0x10>)
 800127e:	f001 faa5 	bl	80027cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200011e4 	.word	0x200011e4

0800128c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <DMA1_Channel6_IRQHandler+0x10>)
 8001292:	f001 fa9b 	bl	80027cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000115c 	.word	0x2000115c

080012a0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <DMA1_Channel7_IRQHandler+0x10>)
 80012a6:	f001 fa91 	bl	80027cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20001228 	.word	0x20001228

080012b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <ADC1_2_IRQHandler+0x10>)
 80012ba:	f000 fd81 	bl	8001dc0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20001068 	.word	0x20001068

080012c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <TIM1_UP_IRQHandler+0x10>)
 80012ce:	f002 fc0f 	bl	8003af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20001100 	.word	0x20001100

080012dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012e2:	4817      	ldr	r0, [pc, #92]	; (8001340 <USART1_IRQHandler+0x64>)
 80012e4:	f002 fe72 	bl	8003fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET) &&
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <USART1_IRQHandler+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	d115      	bne.n	8001322 <USART1_IRQHandler+0x46>
		  (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_IDLE) != RESET)){
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <USART1_IRQHandler+0x64>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f003 0310 	and.w	r3, r3, #16
  if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET) &&
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00e      	beq.n	8001322 <USART1_IRQHandler+0x46>
	  uInfoBlth.irqFlags.isIrqIdle += 1;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <USART1_IRQHandler+0x68>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	3301      	adds	r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	b2d9      	uxtb	r1, r3
 8001318:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <USART1_IRQHandler+0x68>)
 800131a:	7813      	ldrb	r3, [r2, #0]
 800131c:	f361 0384 	bfi	r3, r1, #2, #3
 8001320:	7013      	strb	r3, [r2, #0]
//	  printf("INTERRUPT: IDLE\r\n");
}

__HAL_UART_CLEAR_PEFLAG(&huart1);
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <USART1_IRQHandler+0x64>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <USART1_IRQHandler+0x64>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART1_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000126c 	.word	0x2000126c
 8001344:	20001148 	.word	0x20001148

08001348 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <USART2_IRQHandler+0x10>)
 800134e:	f002 fe3d 	bl	8003fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200012ac 	.word	0x200012ac

0800135c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e00a      	b.n	8001384 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800136e:	f3af 8000 	nop.w
 8001372:	4601      	mov	r1, r0
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	60ba      	str	r2, [r7, #8]
 800137a:	b2ca      	uxtb	r2, r1
 800137c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	dbf0      	blt.n	800136e <_read+0x12>
	}

return len;
 800138c:	687b      	ldr	r3, [r7, #4]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	e009      	b.n	80013bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	60ba      	str	r2, [r7, #8]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbf1      	blt.n	80013a8 <_write+0x12>
	}
	return len;
 80013c4:	687b      	ldr	r3, [r7, #4]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_close>:

int _close(int file)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
	return -1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f4:	605a      	str	r2, [r3, #4]
	return 0;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <_isatty>:

int _isatty(int file)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	return 1;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001416:	b480      	push	{r7}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
	return 0;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr
	...

08001430 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_sbrk+0x50>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x16>
		heap_end = &end;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <_sbrk+0x50>)
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <_sbrk+0x54>)
 8001444:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <_sbrk+0x50>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <_sbrk+0x50>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	466a      	mov	r2, sp
 8001456:	4293      	cmp	r3, r2
 8001458:	d907      	bls.n	800146a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800145a:	f005 f813 	bl	8006484 <__errno>
 800145e:	4602      	mov	r2, r0
 8001460:	230c      	movs	r3, #12
 8001462:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001464:	f04f 33ff 	mov.w	r3, #4294967295
 8001468:	e006      	b.n	8001478 <_sbrk+0x48>
	}

	heap_end += incr;
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <_sbrk+0x50>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a03      	ldr	r2, [pc, #12]	; (8001480 <_sbrk+0x50>)
 8001474:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200002e4 	.word	0x200002e4
 8001484:	200012f8 	.word	0x200012f8

08001488 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <taskBluetooth>:

double temperature;
double pressure;

//static u32 resData[2];
void taskBluetooth(void const * argument){
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
//	uartInitInfo();
	for(;;){
//		xSemaphoreTake(semaphoreHandle, portMAX_DELAY);
        while(!waitIdle("", &uInfoBlth.irqFlags, 1000, 15000)){
 800149c:	e002      	b.n	80014a4 <taskBluetooth+0x10>
            D(printf("ERROR: NO WIRELESS SENS\r\n"));
 800149e:	4809      	ldr	r0, [pc, #36]	; (80014c4 <taskBluetooth+0x30>)
 80014a0:	f005 f8a2 	bl	80065e8 <puts>
        while(!waitIdle("", &uInfoBlth.irqFlags, 1000, 15000)){
 80014a4:	f643 2398 	movw	r3, #15000	; 0x3a98
 80014a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014ac:	4906      	ldr	r1, [pc, #24]	; (80014c8 <taskBluetooth+0x34>)
 80014ae:	4807      	ldr	r0, [pc, #28]	; (80014cc <taskBluetooth+0x38>)
 80014b0:	f7ff fd62 	bl	8000f78 <waitIdle>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f1      	beq.n	800149e <taskBluetooth+0xa>
        }
        D(printf("OK\r\n"));
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <taskBluetooth+0x3c>)
 80014bc:	f005 f894 	bl	80065e8 <puts>
        while(!waitIdle("", &uInfoBlth.irqFlags, 1000, 15000)){
 80014c0:	e7f0      	b.n	80014a4 <taskBluetooth+0x10>
 80014c2:	bf00      	nop
 80014c4:	08007424 	.word	0x08007424
 80014c8:	20001148 	.word	0x20001148
 80014cc:	08007440 	.word	0x08007440
 80014d0:	08007444 	.word	0x08007444
 80014d4:	00000000 	.word	0x00000000

080014d8 <taskBmp280Monitor>:
void configBMP();
uint8_t flag = 0;
int16_t Result=0;
const uint16_t V25 = 1750;// when V25=1.41V at ref 3.3V
const uint16_t Avg_Slope = 5; //when avg_slope=4.3mV/C at ref 3.3V
void taskBmp280Monitor(void const * argument){
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	}*/


    float temp;

    HAL_ADCEx_Calibration_Start(&hadc1);
 80014e0:	4825      	ldr	r0, [pc, #148]	; (8001578 <taskBmp280Monitor+0xa0>)
 80014e2:	f000 febd 	bl	8002260 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_IT(&hadc1);
 80014e6:	4824      	ldr	r0, [pc, #144]	; (8001578 <taskBmp280Monitor+0xa0>)
 80014e8:	f000 fba8 	bl	8001c3c <HAL_ADC_Start_IT>
    for(;;){
    	while(!flag) osDelay(100);
 80014ec:	e002      	b.n	80014f4 <taskBmp280Monitor+0x1c>
 80014ee:	2064      	movs	r0, #100	; 0x64
 80014f0:	f003 f932 	bl	8004758 <osDelay>
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <taskBmp280Monitor+0xa4>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f8      	beq.n	80014ee <taskBmp280Monitor+0x16>
    	temp = (float) Result * 1.0 /4096*Vref;   // Напряжение в вольтах на датчике.
 80014fc:	4b20      	ldr	r3, [pc, #128]	; (8001580 <taskBmp280Monitor+0xa8>)
 80014fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fb04 	bl	8000b10 <__aeabi_i2f>
 8001508:	4603      	mov	r3, r0
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe ff8c 	bl	8000428 <__aeabi_f2d>
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <taskBmp280Monitor+0xac>)
 8001516:	f7ff f909 	bl	800072c <__aeabi_ddiv>
 800151a:	4603      	mov	r3, r0
 800151c:	460c      	mov	r4, r1
 800151e:	4618      	mov	r0, r3
 8001520:	4621      	mov	r1, r4
 8001522:	a313      	add	r3, pc, #76	; (adr r3, 8001570 <taskBmp280Monitor+0x98>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7fe ffd6 	bl	80004d8 <__aeabi_dmul>
 800152c:	4603      	mov	r3, r0
 800152e:	460c      	mov	r4, r1
 8001530:	4618      	mov	r0, r3
 8001532:	4621      	mov	r1, r4
 8001534:	f7ff f9e2 	bl	80008fc <__aeabi_d2f>
 8001538:	4603      	mov	r3, r0
 800153a:	60fb      	str	r3, [r7, #12]
    	temp = (uint16_t)((V25-Result)/Avg_Slope+25);
 800153c:	f240 63d6 	movw	r3, #1750	; 0x6d6
 8001540:	461a      	mov	r2, r3
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <taskBmp280Monitor+0xa8>)
 8001544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2205      	movs	r2, #5
 800154c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	3319      	adds	r3, #25
 8001554:	b29b      	uxth	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fad6 	bl	8000b08 <__aeabi_ui2f>
 800155c:	4603      	mov	r3, r0
 800155e:	60fb      	str	r3, [r7, #12]
    	flag = 0;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <taskBmp280Monitor+0xa4>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
    	HAL_ADC_Start_IT(&hadc1);
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <taskBmp280Monitor+0xa0>)
 8001568:	f000 fb68 	bl	8001c3c <HAL_ADC_Start_IT>
    	while(!flag) osDelay(100);
 800156c:	e7c2      	b.n	80014f4 <taskBmp280Monitor+0x1c>
 800156e:	bf00      	nop
 8001570:	60000000 	.word	0x60000000
 8001574:	400a6666 	.word	0x400a6666
 8001578:	20001068 	.word	0x20001068
 800157c:	200002e8 	.word	0x200002e8
 8001580:	200002ea 	.word	0x200002ea
 8001584:	40b00000 	.word	0x40b00000

08001588 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_USART1_UART_Init+0x50>)
 8001590:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 8001594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001598:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015c0:	f002 fc36 	bl	8003e30 <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015ca:	f7ff fd1f 	bl	800100c <Error_Handler>
  }

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000126c 	.word	0x2000126c
 80015d8:	40013800 	.word	0x40013800

080015dc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_USART2_UART_Init+0x50>)
 80015e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_USART2_UART_Init+0x4c>)
 8001614:	f002 fc0c 	bl	8003e30 <HAL_UART_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161e:	f7ff fcf5 	bl	800100c <Error_Handler>
  }

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200012ac 	.word	0x200012ac
 800162c:	40004400 	.word	0x40004400

08001630 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a8c      	ldr	r2, [pc, #560]	; (800187c <HAL_UART_MspInit+0x24c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	f040 8087 	bne.w	8001760 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001652:	4b8b      	ldr	r3, [pc, #556]	; (8001880 <HAL_UART_MspInit+0x250>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a8a      	ldr	r2, [pc, #552]	; (8001880 <HAL_UART_MspInit+0x250>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6193      	str	r3, [r2, #24]
 800165e:	4b88      	ldr	r3, [pc, #544]	; (8001880 <HAL_UART_MspInit+0x250>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b85      	ldr	r3, [pc, #532]	; (8001880 <HAL_UART_MspInit+0x250>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	4a84      	ldr	r2, [pc, #528]	; (8001880 <HAL_UART_MspInit+0x250>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6193      	str	r3, [r2, #24]
 8001676:	4b82      	ldr	r3, [pc, #520]	; (8001880 <HAL_UART_MspInit+0x250>)
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001690:	f107 0318 	add.w	r3, r7, #24
 8001694:	4619      	mov	r1, r3
 8001696:	487b      	ldr	r0, [pc, #492]	; (8001884 <HAL_UART_MspInit+0x254>)
 8001698:	f001 f9cc 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800169c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	f107 0318 	add.w	r3, r7, #24
 80016ae:	4619      	mov	r1, r3
 80016b0:	4874      	ldr	r0, [pc, #464]	; (8001884 <HAL_UART_MspInit+0x254>)
 80016b2:	f001 f9bf 	bl	8002a34 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80016b6:	4b74      	ldr	r3, [pc, #464]	; (8001888 <HAL_UART_MspInit+0x258>)
 80016b8:	4a74      	ldr	r2, [pc, #464]	; (800188c <HAL_UART_MspInit+0x25c>)
 80016ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016bc:	4b72      	ldr	r3, [pc, #456]	; (8001888 <HAL_UART_MspInit+0x258>)
 80016be:	2200      	movs	r2, #0
 80016c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c2:	4b71      	ldr	r3, [pc, #452]	; (8001888 <HAL_UART_MspInit+0x258>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016c8:	4b6f      	ldr	r3, [pc, #444]	; (8001888 <HAL_UART_MspInit+0x258>)
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ce:	4b6e      	ldr	r3, [pc, #440]	; (8001888 <HAL_UART_MspInit+0x258>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d4:	4b6c      	ldr	r3, [pc, #432]	; (8001888 <HAL_UART_MspInit+0x258>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016da:	4b6b      	ldr	r3, [pc, #428]	; (8001888 <HAL_UART_MspInit+0x258>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016e0:	4b69      	ldr	r3, [pc, #420]	; (8001888 <HAL_UART_MspInit+0x258>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016e6:	4868      	ldr	r0, [pc, #416]	; (8001888 <HAL_UART_MspInit+0x258>)
 80016e8:	f000 ff40 	bl	800256c <HAL_DMA_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80016f2:	f7ff fc8b 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a63      	ldr	r2, [pc, #396]	; (8001888 <HAL_UART_MspInit+0x258>)
 80016fa:	635a      	str	r2, [r3, #52]	; 0x34
 80016fc:	4a62      	ldr	r2, [pc, #392]	; (8001888 <HAL_UART_MspInit+0x258>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001702:	4b63      	ldr	r3, [pc, #396]	; (8001890 <HAL_UART_MspInit+0x260>)
 8001704:	4a63      	ldr	r2, [pc, #396]	; (8001894 <HAL_UART_MspInit+0x264>)
 8001706:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001708:	4b61      	ldr	r3, [pc, #388]	; (8001890 <HAL_UART_MspInit+0x260>)
 800170a:	2210      	movs	r2, #16
 800170c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800170e:	4b60      	ldr	r3, [pc, #384]	; (8001890 <HAL_UART_MspInit+0x260>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001714:	4b5e      	ldr	r3, [pc, #376]	; (8001890 <HAL_UART_MspInit+0x260>)
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800171a:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <HAL_UART_MspInit+0x260>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001720:	4b5b      	ldr	r3, [pc, #364]	; (8001890 <HAL_UART_MspInit+0x260>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001726:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <HAL_UART_MspInit+0x260>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800172c:	4b58      	ldr	r3, [pc, #352]	; (8001890 <HAL_UART_MspInit+0x260>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001732:	4857      	ldr	r0, [pc, #348]	; (8001890 <HAL_UART_MspInit+0x260>)
 8001734:	f000 ff1a 	bl	800256c <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800173e:	f7ff fc65 	bl	800100c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a52      	ldr	r2, [pc, #328]	; (8001890 <HAL_UART_MspInit+0x260>)
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
 8001748:	4a51      	ldr	r2, [pc, #324]	; (8001890 <HAL_UART_MspInit+0x260>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2105      	movs	r1, #5
 8001752:	2025      	movs	r0, #37	; 0x25
 8001754:	f000 fedf 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001758:	2025      	movs	r0, #37	; 0x25
 800175a:	f000 fef8 	bl	800254e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800175e:	e089      	b.n	8001874 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a4c      	ldr	r2, [pc, #304]	; (8001898 <HAL_UART_MspInit+0x268>)
 8001766:	4293      	cmp	r3, r2
 8001768:	f040 8084 	bne.w	8001874 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 800176c:	4b44      	ldr	r3, [pc, #272]	; (8001880 <HAL_UART_MspInit+0x250>)
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	4a43      	ldr	r2, [pc, #268]	; (8001880 <HAL_UART_MspInit+0x250>)
 8001772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001776:	61d3      	str	r3, [r2, #28]
 8001778:	4b41      	ldr	r3, [pc, #260]	; (8001880 <HAL_UART_MspInit+0x250>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b3e      	ldr	r3, [pc, #248]	; (8001880 <HAL_UART_MspInit+0x250>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a3d      	ldr	r2, [pc, #244]	; (8001880 <HAL_UART_MspInit+0x250>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <HAL_UART_MspInit+0x250>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800179c:	2304      	movs	r3, #4
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 0318 	add.w	r3, r7, #24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4835      	ldr	r0, [pc, #212]	; (8001884 <HAL_UART_MspInit+0x254>)
 80017b0:	f001 f940 	bl	8002a34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017b4:	2308      	movs	r3, #8
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 0318 	add.w	r3, r7, #24
 80017c4:	4619      	mov	r1, r3
 80017c6:	482f      	ldr	r0, [pc, #188]	; (8001884 <HAL_UART_MspInit+0x254>)
 80017c8:	f001 f934 	bl	8002a34 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <HAL_UART_MspInit+0x26c>)
 80017ce:	4a34      	ldr	r2, [pc, #208]	; (80018a0 <HAL_UART_MspInit+0x270>)
 80017d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d2:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_UART_MspInit+0x26c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_UART_MspInit+0x26c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017de:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_UART_MspInit+0x26c>)
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_UART_MspInit+0x26c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ea:	4b2c      	ldr	r3, [pc, #176]	; (800189c <HAL_UART_MspInit+0x26c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_UART_MspInit+0x26c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_UART_MspInit+0x26c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017fc:	4827      	ldr	r0, [pc, #156]	; (800189c <HAL_UART_MspInit+0x26c>)
 80017fe:	f000 feb5 	bl	800256c <HAL_DMA_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8001808:	f7ff fc00 	bl	800100c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a23      	ldr	r2, [pc, #140]	; (800189c <HAL_UART_MspInit+0x26c>)
 8001810:	635a      	str	r2, [r3, #52]	; 0x34
 8001812:	4a22      	ldr	r2, [pc, #136]	; (800189c <HAL_UART_MspInit+0x26c>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_UART_MspInit+0x274>)
 800181a:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <HAL_UART_MspInit+0x278>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_UART_MspInit+0x274>)
 8001820:	2210      	movs	r2, #16
 8001822:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_UART_MspInit+0x274>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800182a:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <HAL_UART_MspInit+0x274>)
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_UART_MspInit+0x274>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_UART_MspInit+0x274>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_UART_MspInit+0x274>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_UART_MspInit+0x274>)
 8001844:	2200      	movs	r2, #0
 8001846:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001848:	4816      	ldr	r0, [pc, #88]	; (80018a4 <HAL_UART_MspInit+0x274>)
 800184a:	f000 fe8f 	bl	800256c <HAL_DMA_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8001854:	f7ff fbda 	bl	800100c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <HAL_UART_MspInit+0x274>)
 800185c:	631a      	str	r2, [r3, #48]	; 0x30
 800185e:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <HAL_UART_MspInit+0x274>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2105      	movs	r1, #5
 8001868:	2026      	movs	r0, #38	; 0x26
 800186a:	f000 fe54 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800186e:	2026      	movs	r0, #38	; 0x26
 8001870:	f000 fe6d 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	; 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40013800 	.word	0x40013800
 8001880:	40021000 	.word	0x40021000
 8001884:	40010800 	.word	0x40010800
 8001888:	200011e4 	.word	0x200011e4
 800188c:	40020058 	.word	0x40020058
 8001890:	200011a0 	.word	0x200011a0
 8001894:	40020044 	.word	0x40020044
 8001898:	40004400 	.word	0x40004400
 800189c:	2000115c 	.word	0x2000115c
 80018a0:	4002006c 	.word	0x4002006c
 80018a4:	20001228 	.word	0x20001228
 80018a8:	40020080 	.word	0x40020080

080018ac <uartInitInfo>:
UartInfo uInfoBlth;

static u8 usartSimBufRx[USART_SZ_BUF_RX_USART1];
static u8 usartSimBufTx[USART_SZ_BUF_TX_USART1];

void uartInitInfo(){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	uInfoBlth.irqFlags.regIrq = 0;
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <uartInitInfo+0x34>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
	uInfoBlth.pRxBuf = usartSimBufRx;
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <uartInitInfo+0x34>)
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <uartInitInfo+0x38>)
 80018ba:	605a      	str	r2, [r3, #4]
	uInfoBlth.szRxBuf = USART_SZ_BUF_RX_USART1;
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <uartInitInfo+0x34>)
 80018be:	2214      	movs	r2, #20
 80018c0:	819a      	strh	r2, [r3, #12]
	uInfoBlth.szTxBuf = USART_SZ_BUF_TX_USART1;
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <uartInitInfo+0x34>)
 80018c4:	2214      	movs	r2, #20
 80018c6:	81da      	strh	r2, [r3, #14]
	uInfoBlth.pTxBuf = usartSimBufTx;
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <uartInitInfo+0x34>)
 80018ca:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <uartInitInfo+0x3c>)
 80018cc:	609a      	str	r2, [r3, #8]
	uInfoBlth.pHuart = &huart1;
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <uartInitInfo+0x34>)
 80018d0:	4a06      	ldr	r2, [pc, #24]	; (80018ec <uartInitInfo+0x40>)
 80018d2:	611a      	str	r2, [r3, #16]
	uartRxDma(&uInfoBlth);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <uartInitInfo+0x34>)
 80018d6:	f000 f82d 	bl	8001934 <uartRxDma>
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20001148 	.word	0x20001148
 80018e4:	200002ec 	.word	0x200002ec
 80018e8:	20000300 	.word	0x20000300
 80018ec:	2000126c 	.word	0x2000126c

080018f0 <HAL_UART_TxCpltCallback>:
void uartClearInfo(UartInfo* pUinf){
  pUinf->irqFlags.regIrq = 0;
  memset(pUinf->pRxBuf, '\0', pUinf->szRxBuf);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <HAL_UART_TxCpltCallback+0x38>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d10c      	bne.n	800191c <HAL_UART_TxCpltCallback+0x2c>
//		printf("IRQ: TXGSM\r\n");
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_UART_TxCpltCallback+0x3c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_UART_TxCpltCallback+0x3c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0210 	orr.w	r2, r2, #16
 8001910:	60da      	str	r2, [r3, #12]
		uInfoBlth.irqFlags.isIrqTx = 1;
 8001912:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_UART_TxCpltCallback+0x40>)
 8001914:	7813      	ldrb	r3, [r2, #0]
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	7013      	strb	r3, [r2, #0]
  }
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40013800 	.word	0x40013800
 800192c:	2000126c 	.word	0x2000126c
 8001930:	20001148 	.word	0x20001148

08001934 <uartRxDma>:

void uartRxDma(UartInfo* pUInf){
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(pUInf->pHuart, pUInf->pRxBuf, pUInf->szRxBuf);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6918      	ldr	r0, [r3, #16]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	899b      	ldrh	r3, [r3, #12]
 8001948:	461a      	mov	r2, r3
 800194a:	f002 fabf 	bl	8003ecc <HAL_UART_Receive_DMA>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* uartHandle){
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  // D(printf("OK: UART RxCpltCallback\r\n"));
	if(uartHandle->Instance == USART1){
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_UART_RxCpltCallback+0x2c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d107      	bne.n	800197a <HAL_UART_RxCpltCallback+0x22>
		uInfoBlth.irqFlags.isIrqRx = 1;
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_UART_RxCpltCallback+0x30>)
 800196c:	7813      	ldrb	r3, [r2, #0]
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	7013      	strb	r3, [r2, #0]
		uartRxDma(&uInfoBlth);
 8001974:	4804      	ldr	r0, [pc, #16]	; (8001988 <HAL_UART_RxCpltCallback+0x30>)
 8001976:	f7ff ffdd 	bl	8001934 <uartRxDma>
	}

}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40013800 	.word	0x40013800
 8001988:	20001148 	.word	0x20001148

0800198c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	u32 error = HAL_UART_GetError(huart);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f002 fc22 	bl	80041de <HAL_UART_GetError>
 800199a:	60f8      	str	r0, [r7, #12]
	D(printf("HAL_UART_ErrorCallback\r\n"));
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <HAL_UART_ErrorCallback+0x40>)
 800199e:	f004 fe23 	bl	80065e8 <puts>
	if(huart->Instance == USART1){
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <HAL_UART_ErrorCallback+0x44>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d10b      	bne.n	80019c4 <HAL_UART_ErrorCallback+0x38>
		u32 error = HAL_UART_GetError(huart);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f002 fc16 	bl	80041de <HAL_UART_GetError>
 80019b2:	60b8      	str	r0, [r7, #8]
		D(printf("HAL_UART_ErrorCallback() sim800 ERROR_CODE: %d\r\n", (int)error));
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4619      	mov	r1, r3
 80019b8:	4806      	ldr	r0, [pc, #24]	; (80019d4 <HAL_UART_ErrorCallback+0x48>)
 80019ba:	f004 fda1 	bl	8006500 <iprintf>
//		sprintf(bufResponse, "HAL_UART_ErrorCallback() sim800 ERROR_CODE: %d\r\n", (int)error);
//		createLog(logError, LOG_SZ_ERROR, bufResponse);
		uartRxDma(&uInfoBlth);
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <HAL_UART_ErrorCallback+0x4c>)
 80019c0:	f7ff ffb8 	bl	8001934 <uartRxDma>
	}

}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	0800744c 	.word	0x0800744c
 80019d0:	40013800 	.word	0x40013800
 80019d4:	08007464 	.word	0x08007464
 80019d8:	20001148 	.word	0x20001148

080019dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019de:	e003      	b.n	80019e8 <LoopCopyDataInit>

080019e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80019e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019e6:	3104      	adds	r1, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019e8:	480a      	ldr	r0, [pc, #40]	; (8001a14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80019ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019f0:	d3f6      	bcc.n	80019e0 <CopyDataInit>
  ldr r2, =_sbss
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80019f4:	e002      	b.n	80019fc <LoopFillZerobss>

080019f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80019f8:	f842 3b04 	str.w	r3, [r2], #4

080019fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80019fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a00:	d3f9      	bcc.n	80019f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a02:	f7ff fd41 	bl	8001488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a06:	f004 fd43 	bl	8006490 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0a:	f7ff fa41 	bl	8000e90 <main>
  bx lr
 8001a0e:	4770      	bx	lr
  ldr r3, =_sidata
 8001a10:	08007580 	.word	0x08007580
  ldr r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a18:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001a1c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001a20:	200012f4 	.word	0x200012f4

08001a24 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <CAN1_RX1_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_Init+0x28>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_Init+0x28>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 fd61 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff fba2 	bl	8001188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fb68 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000

08001a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_IncTick+0x1c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_IncTick+0x20>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <HAL_IncTick+0x20>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	20000008 	.word	0x20000008
 8001a74:	200012ec 	.word	0x200012ec

08001a78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a7c:	4b02      	ldr	r3, [pc, #8]	; (8001a88 <HAL_GetTick+0x10>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	200012ec 	.word	0x200012ec

08001a8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0be      	b.n	8001c2c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff f8b2 	bl	8000c34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fb8b 	bl	80021ec <ADC_ConversionStop_Disable>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f040 8099 	bne.w	8001c1a <HAL_ADC_Init+0x18e>
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 8095 	bne.w	8001c1a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001af8:	f023 0302 	bic.w	r3, r3, #2
 8001afc:	f043 0202 	orr.w	r2, r3, #2
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b0c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	7b1b      	ldrb	r3, [r3, #12]
 8001b12:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b14:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b24:	d003      	beq.n	8001b2e <HAL_ADC_Init+0xa2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d102      	bne.n	8001b34 <HAL_ADC_Init+0xa8>
 8001b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b32:	e000      	b.n	8001b36 <HAL_ADC_Init+0xaa>
 8001b34:	2300      	movs	r3, #0
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7d1b      	ldrb	r3, [r3, #20]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d119      	bne.n	8001b78 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7b1b      	ldrb	r3, [r3, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	035a      	lsls	r2, r3, #13
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	e00b      	b.n	8001b78 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f043 0220 	orr.w	r2, r3, #32
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_ADC_Init+0x1a8>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6812      	ldr	r2, [r2, #0]
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba8:	d003      	beq.n	8001bb2 <HAL_ADC_Init+0x126>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d104      	bne.n	8001bbc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	051b      	lsls	r3, r3, #20
 8001bba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_ADC_Init+0x1ac>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d10b      	bne.n	8001bf8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	f023 0303 	bic.w	r3, r3, #3
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bf6:	e018      	b.n	8001c2a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	f023 0312 	bic.w	r3, r3, #18
 8001c00:	f043 0210 	orr.w	r2, r3, #16
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c18:	e007      	b.n	8001c2a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1e:	f043 0210 	orr.w	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	ffe1f7fd 	.word	0xffe1f7fd
 8001c38:	ff1f0efe 	.word	0xff1f0efe

08001c3c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_Start_IT+0x1a>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e0a0      	b.n	8001d98 <HAL_ADC_Start_IT+0x15c>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fa72 	bl	8002148 <ADC_Enable>
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 808f 	bne.w	8001d8e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a45      	ldr	r2, [pc, #276]	; (8001da0 <HAL_ADC_Start_IT+0x164>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d105      	bne.n	8001c9a <HAL_ADC_Start_IT+0x5e>
 8001c8e:	4b45      	ldr	r3, [pc, #276]	; (8001da4 <HAL_ADC_Start_IT+0x168>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d115      	bne.n	8001cc6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d026      	beq.n	8001d02 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cc4:	e01d      	b.n	8001d02 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a33      	ldr	r2, [pc, #204]	; (8001da4 <HAL_ADC_Start_IT+0x168>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d004      	beq.n	8001ce6 <HAL_ADC_Start_IT+0xaa>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a2f      	ldr	r2, [pc, #188]	; (8001da0 <HAL_ADC_Start_IT+0x164>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d10d      	bne.n	8001d02 <HAL_ADC_Start_IT+0xc6>
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <HAL_ADC_Start_IT+0x168>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	f023 0206 	bic.w	r2, r3, #6
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d1a:	e002      	b.n	8001d22 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f06f 0202 	mvn.w	r2, #2
 8001d32:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0220 	orr.w	r2, r2, #32
 8001d42:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d52:	d113      	bne.n	8001d7c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d58:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <HAL_ADC_Start_IT+0x164>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d105      	bne.n	8001d6a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_ADC_Start_IT+0x168>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d108      	bne.n	8001d7c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	e00c      	b.n	8001d96 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	e003      	b.n	8001d96 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40012800 	.word	0x40012800
 8001da4:	40012400 	.word	0x40012400

08001da8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	d140      	bne.n	8001e58 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d139      	bne.n	8001e58 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e06:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e0a:	d11d      	bne.n	8001e48 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d119      	bne.n	8001e48 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0220 	bic.w	r2, r2, #32
 8001e22:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7fe ff19 	bl	8000c80 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f06f 0212 	mvn.w	r2, #18
 8001e56:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e62:	2b80      	cmp	r3, #128	; 0x80
 8001e64:	d14f      	bne.n	8001f06 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d148      	bne.n	8001f06 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001e96:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001e9a:	d012      	beq.n	8001ec2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d125      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001eb4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001eb8:	d11d      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d119      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ed0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fa4e 	bl	8002398 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 020c 	mvn.w	r2, #12
 8001f04:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d114      	bne.n	8001f3e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10d      	bne.n	8001f3e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f809 	bl	8001f46 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0201 	mvn.w	r2, #1
 8001f3c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x20>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e0dc      	b.n	8002132 <HAL_ADC_ConfigChannel+0x1da>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b06      	cmp	r3, #6
 8001f86:	d81c      	bhi.n	8001fc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	3b05      	subs	r3, #5
 8001f9a:	221f      	movs	r2, #31
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	4019      	ands	r1, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3b05      	subs	r3, #5
 8001fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001fc0:	e03c      	b.n	800203c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b0c      	cmp	r3, #12
 8001fc8:	d81c      	bhi.n	8002004 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	3b23      	subs	r3, #35	; 0x23
 8001fdc:	221f      	movs	r2, #31
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	4019      	ands	r1, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b23      	subs	r3, #35	; 0x23
 8001ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
 8002002:	e01b      	b.n	800203c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	3b41      	subs	r3, #65	; 0x41
 8002016:	221f      	movs	r2, #31
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	4019      	ands	r1, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	3b41      	subs	r3, #65	; 0x41
 8002030:	fa00 f203 	lsl.w	r2, r0, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b09      	cmp	r3, #9
 8002042:	d91c      	bls.n	800207e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68d9      	ldr	r1, [r3, #12]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	3b1e      	subs	r3, #30
 8002056:	2207      	movs	r2, #7
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	4019      	ands	r1, r3
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6898      	ldr	r0, [r3, #8]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	3b1e      	subs	r3, #30
 8002070:	fa00 f203 	lsl.w	r2, r0, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	e019      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6919      	ldr	r1, [r3, #16]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	2207      	movs	r2, #7
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	4019      	ands	r1, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6898      	ldr	r0, [r3, #8]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	fa00 f203 	lsl.w	r2, r0, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b10      	cmp	r3, #16
 80020b8:	d003      	beq.n	80020c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020be:	2b11      	cmp	r3, #17
 80020c0:	d132      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1d      	ldr	r2, [pc, #116]	; (800213c <HAL_ADC_ConfigChannel+0x1e4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d125      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d126      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020e8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d11a      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020f2:	4b13      	ldr	r3, [pc, #76]	; (8002140 <HAL_ADC_ConfigChannel+0x1e8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a13      	ldr	r2, [pc, #76]	; (8002144 <HAL_ADC_ConfigChannel+0x1ec>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	0c9a      	lsrs	r2, r3, #18
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002108:	e002      	b.n	8002110 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3b01      	subs	r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f9      	bne.n	800210a <HAL_ADC_ConfigChannel+0x1b2>
 8002116:	e007      	b.n	8002128 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	f043 0220 	orr.w	r2, r3, #32
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	40012400 	.word	0x40012400
 8002140:	20000000 	.word	0x20000000
 8002144:	431bde83 	.word	0x431bde83

08002148 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b01      	cmp	r3, #1
 8002164:	d039      	beq.n	80021da <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0201 	orr.w	r2, r2, #1
 8002174:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <ADC_Enable+0x9c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <ADC_Enable+0xa0>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	0c9b      	lsrs	r3, r3, #18
 8002182:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002184:	e002      	b.n	800218c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3b01      	subs	r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f9      	bne.n	8002186 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002192:	f7ff fc71 	bl	8001a78 <HAL_GetTick>
 8002196:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002198:	e018      	b.n	80021cc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800219a:	f7ff fc6d 	bl	8001a78 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d911      	bls.n	80021cc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	f043 0210 	orr.w	r2, r3, #16
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e007      	b.n	80021dc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d1df      	bne.n	800219a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000000 	.word	0x20000000
 80021e8:	431bde83 	.word	0x431bde83

080021ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d127      	bne.n	8002256 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0201 	bic.w	r2, r2, #1
 8002214:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002216:	f7ff fc2f 	bl	8001a78 <HAL_GetTick>
 800221a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800221c:	e014      	b.n	8002248 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800221e:	f7ff fc2b 	bl	8001a78 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d90d      	bls.n	8002248 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	f043 0210 	orr.w	r2, r3, #16
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e007      	b.n	8002258 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d0e3      	beq.n	800221e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_ADCEx_Calibration_Start+0x1e>
 800227a:	2302      	movs	r3, #2
 800227c:	e086      	b.n	800238c <HAL_ADCEx_Calibration_Start+0x12c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ffb0 	bl	80021ec <ADC_ConversionStop_Disable>
 800228c:	4603      	mov	r3, r0
 800228e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002290:	7dfb      	ldrb	r3, [r7, #23]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d175      	bne.n	8002382 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800229e:	f023 0302 	bic.w	r3, r3, #2
 80022a2:	f043 0202 	orr.w	r2, r3, #2
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80022aa:	4b3a      	ldr	r3, [pc, #232]	; (8002394 <HAL_ADCEx_Calibration_Start+0x134>)
 80022ac:	681c      	ldr	r4, [r3, #0]
 80022ae:	2002      	movs	r0, #2
 80022b0:	f001 fa34 	bl	800371c <HAL_RCCEx_GetPeriphCLKFreq>
 80022b4:	4603      	mov	r3, r0
 80022b6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80022ba:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80022bc:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80022be:	e002      	b.n	80022c6 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f9      	bne.n	80022c0 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff3b 	bl	8002148 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0208 	orr.w	r2, r2, #8
 80022e0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80022e2:	f7ff fbc9 	bl	8001a78 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80022e8:	e014      	b.n	8002314 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80022ea:	f7ff fbc5 	bl	8001a78 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b0a      	cmp	r3, #10
 80022f6:	d90d      	bls.n	8002314 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	f023 0312 	bic.w	r3, r3, #18
 8002300:	f043 0210 	orr.w	r2, r3, #16
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e03b      	b.n	800238c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1e3      	bne.n	80022ea <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0204 	orr.w	r2, r2, #4
 8002330:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002332:	f7ff fba1 	bl	8001a78 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002338:	e014      	b.n	8002364 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800233a:	f7ff fb9d 	bl	8001a78 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b0a      	cmp	r3, #10
 8002346:	d90d      	bls.n	8002364 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	f023 0312 	bic.w	r3, r3, #18
 8002350:	f043 0210 	orr.w	r2, r3, #16
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e013      	b.n	800238c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1e3      	bne.n	800233a <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800238a:	7dfb      	ldrb	r3, [r7, #23]
}
 800238c:	4618      	mov	r0, r3
 800238e:	371c      	adds	r7, #28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
	...

080023ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	60d3      	str	r3, [r2, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__NVIC_GetPriorityGrouping+0x18>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0307 	and.w	r3, r3, #7
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4906      	ldr	r1, [pc, #24]	; (8002444 <__NVIC_EnableIRQ+0x34>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	e000e100 	.word	0xe000e100

08002448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	db0a      	blt.n	8002472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	490c      	ldr	r1, [pc, #48]	; (8002494 <__NVIC_SetPriority+0x4c>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	0112      	lsls	r2, r2, #4
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	440b      	add	r3, r1
 800246c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002470:	e00a      	b.n	8002488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4908      	ldr	r1, [pc, #32]	; (8002498 <__NVIC_SetPriority+0x50>)
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	3b04      	subs	r3, #4
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	440b      	add	r3, r1
 8002486:	761a      	strb	r2, [r3, #24]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000e100 	.word	0xe000e100
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f1c3 0307 	rsb	r3, r3, #7
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	bf28      	it	cs
 80024ba:	2304      	movcs	r3, #4
 80024bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3304      	adds	r3, #4
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d902      	bls.n	80024cc <NVIC_EncodePriority+0x30>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3b03      	subs	r3, #3
 80024ca:	e000      	b.n	80024ce <NVIC_EncodePriority+0x32>
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	401a      	ands	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	4313      	orrs	r3, r2
         );
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3724      	adds	r7, #36	; 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff4f 	bl	80023ac <__NVIC_SetPriorityGrouping>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff64 	bl	80023f4 <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ffb2 	bl	800249c <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff81 	bl	8002448 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff57 	bl	8002410 <__NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e043      	b.n	800260a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_DMA_Init+0xa8>)
 800258a:	4413      	add	r3, r2
 800258c:	4a22      	ldr	r2, [pc, #136]	; (8002618 <HAL_DMA_Init+0xac>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	009a      	lsls	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a1f      	ldr	r2, [pc, #124]	; (800261c <HAL_DMA_Init+0xb0>)
 800259e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	bffdfff8 	.word	0xbffdfff8
 8002618:	cccccccd 	.word	0xcccccccd
 800261c:	40020000 	.word	0x40020000

08002620 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_DMA_Start_IT+0x20>
 800263c:	2302      	movs	r3, #2
 800263e:	e04a      	b.n	80026d6 <HAL_DMA_Start_IT+0xb6>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800264e:	2b01      	cmp	r3, #1
 8002650:	d13a      	bne.n	80026c8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f9ae 	bl	80029d8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 020e 	orr.w	r2, r2, #14
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e00f      	b.n	80026b6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0204 	bic.w	r2, r2, #4
 80026a4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 020a 	orr.w	r2, r2, #10
 80026b4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0201 	orr.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e005      	b.n	80026d4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
 80026d2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d005      	beq.n	8002702 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2204      	movs	r2, #4
 80026fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
 8002700:	e051      	b.n	80027a6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 020e 	bic.w	r2, r2, #14
 8002710:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <HAL_DMA_Abort_IT+0xd0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d029      	beq.n	8002780 <HAL_DMA_Abort_IT+0xa0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <HAL_DMA_Abort_IT+0xd4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d022      	beq.n	800277c <HAL_DMA_Abort_IT+0x9c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <HAL_DMA_Abort_IT+0xd8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d01a      	beq.n	8002776 <HAL_DMA_Abort_IT+0x96>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_DMA_Abort_IT+0xdc>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d012      	beq.n	8002770 <HAL_DMA_Abort_IT+0x90>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1c      	ldr	r2, [pc, #112]	; (80027c0 <HAL_DMA_Abort_IT+0xe0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00a      	beq.n	800276a <HAL_DMA_Abort_IT+0x8a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <HAL_DMA_Abort_IT+0xe4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d102      	bne.n	8002764 <HAL_DMA_Abort_IT+0x84>
 800275e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002762:	e00e      	b.n	8002782 <HAL_DMA_Abort_IT+0xa2>
 8002764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002768:	e00b      	b.n	8002782 <HAL_DMA_Abort_IT+0xa2>
 800276a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800276e:	e008      	b.n	8002782 <HAL_DMA_Abort_IT+0xa2>
 8002770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002774:	e005      	b.n	8002782 <HAL_DMA_Abort_IT+0xa2>
 8002776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277a:	e002      	b.n	8002782 <HAL_DMA_Abort_IT+0xa2>
 800277c:	2310      	movs	r3, #16
 800277e:	e000      	b.n	8002782 <HAL_DMA_Abort_IT+0xa2>
 8002780:	2301      	movs	r3, #1
 8002782:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_DMA_Abort_IT+0xe8>)
 8002784:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
    } 
  }
  return status;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40020008 	.word	0x40020008
 80027b4:	4002001c 	.word	0x4002001c
 80027b8:	40020030 	.word	0x40020030
 80027bc:	40020044 	.word	0x40020044
 80027c0:	40020058 	.word	0x40020058
 80027c4:	4002006c 	.word	0x4002006c
 80027c8:	40020000 	.word	0x40020000

080027cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	2204      	movs	r2, #4
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d04f      	beq.n	8002894 <HAL_DMA_IRQHandler+0xc8>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d04a      	beq.n	8002894 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0204 	bic.w	r2, r2, #4
 800281a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a66      	ldr	r2, [pc, #408]	; (80029bc <HAL_DMA_IRQHandler+0x1f0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d029      	beq.n	800287a <HAL_DMA_IRQHandler+0xae>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a65      	ldr	r2, [pc, #404]	; (80029c0 <HAL_DMA_IRQHandler+0x1f4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d022      	beq.n	8002876 <HAL_DMA_IRQHandler+0xaa>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a63      	ldr	r2, [pc, #396]	; (80029c4 <HAL_DMA_IRQHandler+0x1f8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d01a      	beq.n	8002870 <HAL_DMA_IRQHandler+0xa4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a62      	ldr	r2, [pc, #392]	; (80029c8 <HAL_DMA_IRQHandler+0x1fc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d012      	beq.n	800286a <HAL_DMA_IRQHandler+0x9e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a60      	ldr	r2, [pc, #384]	; (80029cc <HAL_DMA_IRQHandler+0x200>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00a      	beq.n	8002864 <HAL_DMA_IRQHandler+0x98>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a5f      	ldr	r2, [pc, #380]	; (80029d0 <HAL_DMA_IRQHandler+0x204>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d102      	bne.n	800285e <HAL_DMA_IRQHandler+0x92>
 8002858:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800285c:	e00e      	b.n	800287c <HAL_DMA_IRQHandler+0xb0>
 800285e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002862:	e00b      	b.n	800287c <HAL_DMA_IRQHandler+0xb0>
 8002864:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002868:	e008      	b.n	800287c <HAL_DMA_IRQHandler+0xb0>
 800286a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800286e:	e005      	b.n	800287c <HAL_DMA_IRQHandler+0xb0>
 8002870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002874:	e002      	b.n	800287c <HAL_DMA_IRQHandler+0xb0>
 8002876:	2340      	movs	r3, #64	; 0x40
 8002878:	e000      	b.n	800287c <HAL_DMA_IRQHandler+0xb0>
 800287a:	2304      	movs	r3, #4
 800287c:	4a55      	ldr	r2, [pc, #340]	; (80029d4 <HAL_DMA_IRQHandler+0x208>)
 800287e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8094 	beq.w	80029b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002892:	e08e      	b.n	80029b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	2202      	movs	r2, #2
 800289a:	409a      	lsls	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d056      	beq.n	8002952 <HAL_DMA_IRQHandler+0x186>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d051      	beq.n	8002952 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 020a 	bic.w	r2, r2, #10
 80028ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a38      	ldr	r2, [pc, #224]	; (80029bc <HAL_DMA_IRQHandler+0x1f0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d029      	beq.n	8002932 <HAL_DMA_IRQHandler+0x166>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a37      	ldr	r2, [pc, #220]	; (80029c0 <HAL_DMA_IRQHandler+0x1f4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <HAL_DMA_IRQHandler+0x162>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a35      	ldr	r2, [pc, #212]	; (80029c4 <HAL_DMA_IRQHandler+0x1f8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d01a      	beq.n	8002928 <HAL_DMA_IRQHandler+0x15c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a34      	ldr	r2, [pc, #208]	; (80029c8 <HAL_DMA_IRQHandler+0x1fc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d012      	beq.n	8002922 <HAL_DMA_IRQHandler+0x156>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a32      	ldr	r2, [pc, #200]	; (80029cc <HAL_DMA_IRQHandler+0x200>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00a      	beq.n	800291c <HAL_DMA_IRQHandler+0x150>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a31      	ldr	r2, [pc, #196]	; (80029d0 <HAL_DMA_IRQHandler+0x204>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d102      	bne.n	8002916 <HAL_DMA_IRQHandler+0x14a>
 8002910:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002914:	e00e      	b.n	8002934 <HAL_DMA_IRQHandler+0x168>
 8002916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291a:	e00b      	b.n	8002934 <HAL_DMA_IRQHandler+0x168>
 800291c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002920:	e008      	b.n	8002934 <HAL_DMA_IRQHandler+0x168>
 8002922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002926:	e005      	b.n	8002934 <HAL_DMA_IRQHandler+0x168>
 8002928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800292c:	e002      	b.n	8002934 <HAL_DMA_IRQHandler+0x168>
 800292e:	2320      	movs	r3, #32
 8002930:	e000      	b.n	8002934 <HAL_DMA_IRQHandler+0x168>
 8002932:	2302      	movs	r3, #2
 8002934:	4a27      	ldr	r2, [pc, #156]	; (80029d4 <HAL_DMA_IRQHandler+0x208>)
 8002936:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	d034      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002950:	e02f      	b.n	80029b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2208      	movs	r2, #8
 8002958:	409a      	lsls	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d028      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x1e8>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d023      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 020e 	bic.w	r2, r2, #14
 800297a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f202 	lsl.w	r2, r1, r2
 800298a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d004      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
    }
  }
  return;
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
}
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40020008 	.word	0x40020008
 80029c0:	4002001c 	.word	0x4002001c
 80029c4:	40020030 	.word	0x40020030
 80029c8:	40020044 	.word	0x40020044
 80029cc:	40020058 	.word	0x40020058
 80029d0:	4002006c 	.word	0x4002006c
 80029d4:	40020000 	.word	0x40020000

080029d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d108      	bne.n	8002a18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a16:	e007      	b.n	8002a28 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	60da      	str	r2, [r3, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b08b      	sub	sp, #44	; 0x2c
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a46:	e127      	b.n	8002c98 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	f040 8116 	bne.w	8002c92 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b12      	cmp	r3, #18
 8002a6c:	d034      	beq.n	8002ad8 <HAL_GPIO_Init+0xa4>
 8002a6e:	2b12      	cmp	r3, #18
 8002a70:	d80d      	bhi.n	8002a8e <HAL_GPIO_Init+0x5a>
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d02b      	beq.n	8002ace <HAL_GPIO_Init+0x9a>
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d804      	bhi.n	8002a84 <HAL_GPIO_Init+0x50>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d031      	beq.n	8002ae2 <HAL_GPIO_Init+0xae>
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d01c      	beq.n	8002abc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a82:	e048      	b.n	8002b16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d043      	beq.n	8002b10 <HAL_GPIO_Init+0xdc>
 8002a88:	2b11      	cmp	r3, #17
 8002a8a:	d01b      	beq.n	8002ac4 <HAL_GPIO_Init+0x90>
          break;
 8002a8c:	e043      	b.n	8002b16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a8e:	4a89      	ldr	r2, [pc, #548]	; (8002cb4 <HAL_GPIO_Init+0x280>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d026      	beq.n	8002ae2 <HAL_GPIO_Init+0xae>
 8002a94:	4a87      	ldr	r2, [pc, #540]	; (8002cb4 <HAL_GPIO_Init+0x280>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d806      	bhi.n	8002aa8 <HAL_GPIO_Init+0x74>
 8002a9a:	4a87      	ldr	r2, [pc, #540]	; (8002cb8 <HAL_GPIO_Init+0x284>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d020      	beq.n	8002ae2 <HAL_GPIO_Init+0xae>
 8002aa0:	4a86      	ldr	r2, [pc, #536]	; (8002cbc <HAL_GPIO_Init+0x288>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d01d      	beq.n	8002ae2 <HAL_GPIO_Init+0xae>
          break;
 8002aa6:	e036      	b.n	8002b16 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002aa8:	4a85      	ldr	r2, [pc, #532]	; (8002cc0 <HAL_GPIO_Init+0x28c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d019      	beq.n	8002ae2 <HAL_GPIO_Init+0xae>
 8002aae:	4a85      	ldr	r2, [pc, #532]	; (8002cc4 <HAL_GPIO_Init+0x290>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d016      	beq.n	8002ae2 <HAL_GPIO_Init+0xae>
 8002ab4:	4a84      	ldr	r2, [pc, #528]	; (8002cc8 <HAL_GPIO_Init+0x294>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_GPIO_Init+0xae>
          break;
 8002aba:	e02c      	b.n	8002b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	623b      	str	r3, [r7, #32]
          break;
 8002ac2:	e028      	b.n	8002b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	623b      	str	r3, [r7, #32]
          break;
 8002acc:	e023      	b.n	8002b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	623b      	str	r3, [r7, #32]
          break;
 8002ad6:	e01e      	b.n	8002b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	330c      	adds	r3, #12
 8002ade:	623b      	str	r3, [r7, #32]
          break;
 8002ae0:	e019      	b.n	8002b16 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002aea:	2304      	movs	r3, #4
 8002aec:	623b      	str	r3, [r7, #32]
          break;
 8002aee:	e012      	b.n	8002b16 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d105      	bne.n	8002b04 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002af8:	2308      	movs	r3, #8
 8002afa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	611a      	str	r2, [r3, #16]
          break;
 8002b02:	e008      	b.n	8002b16 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b04:	2308      	movs	r3, #8
 8002b06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	615a      	str	r2, [r3, #20]
          break;
 8002b0e:	e002      	b.n	8002b16 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
          break;
 8002b14:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2bff      	cmp	r3, #255	; 0xff
 8002b1a:	d801      	bhi.n	8002b20 <HAL_GPIO_Init+0xec>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	e001      	b.n	8002b24 <HAL_GPIO_Init+0xf0>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3304      	adds	r3, #4
 8002b24:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2bff      	cmp	r3, #255	; 0xff
 8002b2a:	d802      	bhi.n	8002b32 <HAL_GPIO_Init+0xfe>
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_Init+0x104>
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	3b08      	subs	r3, #8
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	210f      	movs	r1, #15
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	401a      	ands	r2, r3
 8002b4a:	6a39      	ldr	r1, [r7, #32]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	431a      	orrs	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8096 	beq.w	8002c92 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b66:	4b59      	ldr	r3, [pc, #356]	; (8002ccc <HAL_GPIO_Init+0x298>)
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <HAL_GPIO_Init+0x298>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6193      	str	r3, [r2, #24]
 8002b72:	4b56      	ldr	r3, [pc, #344]	; (8002ccc <HAL_GPIO_Init+0x298>)
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b7e:	4a54      	ldr	r2, [pc, #336]	; (8002cd0 <HAL_GPIO_Init+0x29c>)
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	3302      	adds	r3, #2
 8002b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	220f      	movs	r2, #15
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <HAL_GPIO_Init+0x2a0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d013      	beq.n	8002bd2 <HAL_GPIO_Init+0x19e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a4a      	ldr	r2, [pc, #296]	; (8002cd8 <HAL_GPIO_Init+0x2a4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00d      	beq.n	8002bce <HAL_GPIO_Init+0x19a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a49      	ldr	r2, [pc, #292]	; (8002cdc <HAL_GPIO_Init+0x2a8>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d007      	beq.n	8002bca <HAL_GPIO_Init+0x196>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a48      	ldr	r2, [pc, #288]	; (8002ce0 <HAL_GPIO_Init+0x2ac>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_GPIO_Init+0x192>
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e006      	b.n	8002bd4 <HAL_GPIO_Init+0x1a0>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e004      	b.n	8002bd4 <HAL_GPIO_Init+0x1a0>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e002      	b.n	8002bd4 <HAL_GPIO_Init+0x1a0>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_GPIO_Init+0x1a0>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd6:	f002 0203 	and.w	r2, r2, #3
 8002bda:	0092      	lsls	r2, r2, #2
 8002bdc:	4093      	lsls	r3, r2
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002be4:	493a      	ldr	r1, [pc, #232]	; (8002cd0 <HAL_GPIO_Init+0x29c>)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	3302      	adds	r3, #2
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d006      	beq.n	8002c0c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002bfe:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4938      	ldr	r1, [pc, #224]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]
 8002c0a:	e006      	b.n	8002c1a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c0c:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	4933      	ldr	r1, [pc, #204]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c26:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	492e      	ldr	r1, [pc, #184]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
 8002c32:	e006      	b.n	8002c42 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c34:	4b2b      	ldr	r3, [pc, #172]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	4929      	ldr	r1, [pc, #164]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c4e:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	4924      	ldr	r1, [pc, #144]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
 8002c5a:	e006      	b.n	8002c6a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c5c:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	491f      	ldr	r1, [pc, #124]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d006      	beq.n	8002c84 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	491a      	ldr	r1, [pc, #104]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60cb      	str	r3, [r1, #12]
 8002c82:	e006      	b.n	8002c92 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c84:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	4915      	ldr	r1, [pc, #84]	; (8002ce4 <HAL_GPIO_Init+0x2b0>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	3301      	adds	r3, #1
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f47f aed0 	bne.w	8002a48 <HAL_GPIO_Init+0x14>
  }
}
 8002ca8:	bf00      	nop
 8002caa:	372c      	adds	r7, #44	; 0x2c
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	10210000 	.word	0x10210000
 8002cb8:	10110000 	.word	0x10110000
 8002cbc:	10120000 	.word	0x10120000
 8002cc0:	10310000 	.word	0x10310000
 8002cc4:	10320000 	.word	0x10320000
 8002cc8:	10220000 	.word	0x10220000
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40010000 	.word	0x40010000
 8002cd4:	40010800 	.word	0x40010800
 8002cd8:	40010c00 	.word	0x40010c00
 8002cdc:	40011000 	.word	0x40011000
 8002ce0:	40011400 	.word	0x40011400
 8002ce4:	40010400 	.word	0x40010400

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d04:	e003      	b.n	8002d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	611a      	str	r2, [r3, #16]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e26c      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8087 	beq.w	8002e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d38:	4b92      	ldr	r3, [pc, #584]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d00c      	beq.n	8002d5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d44:	4b8f      	ldr	r3, [pc, #572]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d112      	bne.n	8002d76 <HAL_RCC_OscConfig+0x5e>
 8002d50:	4b8c      	ldr	r3, [pc, #560]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5c:	d10b      	bne.n	8002d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5e:	4b89      	ldr	r3, [pc, #548]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d06c      	beq.n	8002e44 <HAL_RCC_OscConfig+0x12c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d168      	bne.n	8002e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e246      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7e:	d106      	bne.n	8002d8e <HAL_RCC_OscConfig+0x76>
 8002d80:	4b80      	ldr	r3, [pc, #512]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a7f      	ldr	r2, [pc, #508]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	e02e      	b.n	8002dec <HAL_RCC_OscConfig+0xd4>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x98>
 8002d96:	4b7b      	ldr	r3, [pc, #492]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a7a      	ldr	r2, [pc, #488]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b78      	ldr	r3, [pc, #480]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a77      	ldr	r2, [pc, #476]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e01d      	b.n	8002dec <HAL_RCC_OscConfig+0xd4>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xbc>
 8002dba:	4b72      	ldr	r3, [pc, #456]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a71      	ldr	r2, [pc, #452]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b6f      	ldr	r3, [pc, #444]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a6e      	ldr	r2, [pc, #440]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e00b      	b.n	8002dec <HAL_RCC_OscConfig+0xd4>
 8002dd4:	4b6b      	ldr	r3, [pc, #428]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a6a      	ldr	r2, [pc, #424]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	4b68      	ldr	r3, [pc, #416]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a67      	ldr	r2, [pc, #412]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d013      	beq.n	8002e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe fe40 	bl	8001a78 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7fe fe3c 	bl	8001a78 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e1fa      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	4b5d      	ldr	r3, [pc, #372]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0xe4>
 8002e1a:	e014      	b.n	8002e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fe2c 	bl	8001a78 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fe fe28 	bl	8001a78 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e1e6      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e36:	4b53      	ldr	r3, [pc, #332]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x10c>
 8002e42:	e000      	b.n	8002e46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d063      	beq.n	8002f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e52:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e5e:	4b49      	ldr	r3, [pc, #292]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d11c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x18c>
 8002e6a:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d116      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_RCC_OscConfig+0x176>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e1ba      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8e:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4939      	ldr	r1, [pc, #228]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	e03a      	b.n	8002f1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eac:	4b36      	ldr	r3, [pc, #216]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fde1 	bl	8001a78 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eba:	f7fe fddd 	bl	8001a78 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e19b      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed8:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4927      	ldr	r1, [pc, #156]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]
 8002eec:	e015      	b.n	8002f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eee:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fdc0 	bl	8001a78 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efc:	f7fe fdbc 	bl	8001a78 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e17a      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d03a      	beq.n	8002f9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d019      	beq.n	8002f62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2e:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <HAL_RCC_OscConfig+0x274>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f34:	f7fe fda0 	bl	8001a78 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7fe fd9c 	bl	8001a78 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e15a      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	f000 fb0a 	bl	8003574 <RCC_Delay>
 8002f60:	e01c      	b.n	8002f9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_RCC_OscConfig+0x274>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f68:	f7fe fd86 	bl	8001a78 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6e:	e00f      	b.n	8002f90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fe fd82 	bl	8001a78 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d908      	bls.n	8002f90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e140      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	42420000 	.word	0x42420000
 8002f8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f90:	4b9e      	ldr	r3, [pc, #632]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e9      	bne.n	8002f70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80a6 	beq.w	80030f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fae:	4b97      	ldr	r3, [pc, #604]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10d      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	4b94      	ldr	r3, [pc, #592]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4a93      	ldr	r2, [pc, #588]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8002fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	61d3      	str	r3, [r2, #28]
 8002fc6:	4b91      	ldr	r3, [pc, #580]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd6:	4b8e      	ldr	r3, [pc, #568]	; (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d118      	bne.n	8003014 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe2:	4b8b      	ldr	r3, [pc, #556]	; (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a8a      	ldr	r2, [pc, #552]	; (8003210 <HAL_RCC_OscConfig+0x4f8>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fee:	f7fe fd43 	bl	8001a78 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff6:	f7fe fd3f 	bl	8001a78 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b64      	cmp	r3, #100	; 0x64
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0fd      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	4b81      	ldr	r3, [pc, #516]	; (8003210 <HAL_RCC_OscConfig+0x4f8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d106      	bne.n	800302a <HAL_RCC_OscConfig+0x312>
 800301c:	4b7b      	ldr	r3, [pc, #492]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4a7a      	ldr	r2, [pc, #488]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6213      	str	r3, [r2, #32]
 8003028:	e02d      	b.n	8003086 <HAL_RCC_OscConfig+0x36e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0x334>
 8003032:	4b76      	ldr	r3, [pc, #472]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4a75      	ldr	r2, [pc, #468]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	6213      	str	r3, [r2, #32]
 800303e:	4b73      	ldr	r3, [pc, #460]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	4a72      	ldr	r2, [pc, #456]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003044:	f023 0304 	bic.w	r3, r3, #4
 8003048:	6213      	str	r3, [r2, #32]
 800304a:	e01c      	b.n	8003086 <HAL_RCC_OscConfig+0x36e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b05      	cmp	r3, #5
 8003052:	d10c      	bne.n	800306e <HAL_RCC_OscConfig+0x356>
 8003054:	4b6d      	ldr	r3, [pc, #436]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4a6c      	ldr	r2, [pc, #432]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 800305a:	f043 0304 	orr.w	r3, r3, #4
 800305e:	6213      	str	r3, [r2, #32]
 8003060:	4b6a      	ldr	r3, [pc, #424]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	4a69      	ldr	r2, [pc, #420]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6213      	str	r3, [r2, #32]
 800306c:	e00b      	b.n	8003086 <HAL_RCC_OscConfig+0x36e>
 800306e:	4b67      	ldr	r3, [pc, #412]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4a66      	ldr	r2, [pc, #408]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	6213      	str	r3, [r2, #32]
 800307a:	4b64      	ldr	r3, [pc, #400]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4a63      	ldr	r2, [pc, #396]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003080:	f023 0304 	bic.w	r3, r3, #4
 8003084:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d015      	beq.n	80030ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308e:	f7fe fcf3 	bl	8001a78 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe fcef 	bl	8001a78 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e0ab      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ac:	4b57      	ldr	r3, [pc, #348]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ee      	beq.n	8003096 <HAL_RCC_OscConfig+0x37e>
 80030b8:	e014      	b.n	80030e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ba:	f7fe fcdd 	bl	8001a78 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fe fcd9 	bl	8001a78 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e095      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d8:	4b4c      	ldr	r3, [pc, #304]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1ee      	bne.n	80030c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d105      	bne.n	80030f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ea:	4b48      	ldr	r3, [pc, #288]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	4a47      	ldr	r2, [pc, #284]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 80030f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8081 	beq.w	8003202 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003100:	4b42      	ldr	r3, [pc, #264]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d061      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d146      	bne.n	80031a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003114:	4b3f      	ldr	r3, [pc, #252]	; (8003214 <HAL_RCC_OscConfig+0x4fc>)
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311a:	f7fe fcad 	bl	8001a78 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003122:	f7fe fca9 	bl	8001a78 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e067      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003134:	4b35      	ldr	r3, [pc, #212]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f0      	bne.n	8003122 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003148:	d108      	bne.n	800315c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800314a:	4b30      	ldr	r3, [pc, #192]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	492d      	ldr	r1, [pc, #180]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315c:	4b2b      	ldr	r3, [pc, #172]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a19      	ldr	r1, [r3, #32]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	430b      	orrs	r3, r1
 800316e:	4927      	ldr	r1, [pc, #156]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003174:	4b27      	ldr	r3, [pc, #156]	; (8003214 <HAL_RCC_OscConfig+0x4fc>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7fe fc7d 	bl	8001a78 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003182:	f7fe fc79 	bl	8001a78 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e037      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003194:	4b1d      	ldr	r3, [pc, #116]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x46a>
 80031a0:	e02f      	b.n	8003202 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a2:	4b1c      	ldr	r3, [pc, #112]	; (8003214 <HAL_RCC_OscConfig+0x4fc>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fe fc66 	bl	8001a78 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe fc62 	bl	8001a78 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e020      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c2:	4b12      	ldr	r3, [pc, #72]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x498>
 80031ce:	e018      	b.n	8003202 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e013      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_RCC_OscConfig+0x4f4>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	40007000 	.word	0x40007000
 8003214:	42420060 	.word	0x42420060

08003218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0d0      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d910      	bls.n	800325c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b67      	ldr	r3, [pc, #412]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 0207 	bic.w	r2, r3, #7
 8003242:	4965      	ldr	r1, [pc, #404]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0b8      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d020      	beq.n	80032aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003274:	4b59      	ldr	r3, [pc, #356]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a58      	ldr	r2, [pc, #352]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800327e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800328c:	4b53      	ldr	r3, [pc, #332]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003296:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003298:	4b50      	ldr	r3, [pc, #320]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	494d      	ldr	r1, [pc, #308]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d040      	beq.n	8003338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d115      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e07f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	4b41      	ldr	r3, [pc, #260]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e073      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e6:	4b3d      	ldr	r3, [pc, #244]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e06b      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f6:	4b39      	ldr	r3, [pc, #228]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f023 0203 	bic.w	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4936      	ldr	r1, [pc, #216]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003308:	f7fe fbb6 	bl	8001a78 <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	e00a      	b.n	8003326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7fe fbb2 	bl	8001a78 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e053      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	4b2d      	ldr	r3, [pc, #180]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 020c 	and.w	r2, r3, #12
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	429a      	cmp	r2, r3
 8003336:	d1eb      	bne.n	8003310 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003338:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d210      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 0207 	bic.w	r2, r3, #7
 800334e:	4922      	ldr	r1, [pc, #136]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e032      	b.n	80033ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4916      	ldr	r1, [pc, #88]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	490e      	ldr	r1, [pc, #56]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033a6:	f000 f821 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80033aa:	4601      	mov	r1, r0
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80033b8:	5cd3      	ldrb	r3, [r2, r3]
 80033ba:	fa21 f303 	lsr.w	r3, r1, r3
 80033be:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <HAL_RCC_ClockConfig+0x1cc>)
 80033c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x1d0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd fede 	bl	8001188 <HAL_InitTick>

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40022000 	.word	0x40022000
 80033dc:	40021000 	.word	0x40021000
 80033e0:	080074c8 	.word	0x080074c8
 80033e4:	20000000 	.word	0x20000000
 80033e8:	20000004 	.word	0x20000004

080033ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	b490      	push	{r4, r7}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033f2:	4b2a      	ldr	r3, [pc, #168]	; (800349c <HAL_RCC_GetSysClockFreq+0xb0>)
 80033f4:	1d3c      	adds	r4, r7, #4
 80033f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033fc:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	2300      	movs	r3, #0
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003416:	4b23      	ldr	r3, [pc, #140]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b04      	cmp	r3, #4
 8003424:	d002      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x40>
 8003426:	2b08      	cmp	r3, #8
 8003428:	d003      	beq.n	8003432 <HAL_RCC_GetSysClockFreq+0x46>
 800342a:	e02d      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800342c:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800342e:	623b      	str	r3, [r7, #32]
      break;
 8003430:	e02d      	b.n	800348e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	0c9b      	lsrs	r3, r3, #18
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800343e:	4413      	add	r3, r2
 8003440:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003444:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d013      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003450:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	0c5b      	lsrs	r3, r3, #17
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800345e:	4413      	add	r3, r2
 8003460:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003464:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	4a0f      	ldr	r2, [pc, #60]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800346a:	fb02 f203 	mul.w	r2, r2, r3
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
 8003476:	e004      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	4a0c      	ldr	r2, [pc, #48]	; (80034ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800347c:	fb02 f303 	mul.w	r3, r2, r3
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	623b      	str	r3, [r7, #32]
      break;
 8003486:	e002      	b.n	800348e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003488:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800348a:	623b      	str	r3, [r7, #32]
      break;
 800348c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348e:	6a3b      	ldr	r3, [r7, #32]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3728      	adds	r7, #40	; 0x28
 8003494:	46bd      	mov	sp, r7
 8003496:	bc90      	pop	{r4, r7}
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	08007498 	.word	0x08007498
 80034a0:	080074a8 	.word	0x080074a8
 80034a4:	40021000 	.word	0x40021000
 80034a8:	007a1200 	.word	0x007a1200
 80034ac:	003d0900 	.word	0x003d0900

080034b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b4:	4b02      	ldr	r3, [pc, #8]	; (80034c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr
 80034c0:	20000000 	.word	0x20000000

080034c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c8:	f7ff fff2 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034cc:	4601      	mov	r1, r0
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	0a1b      	lsrs	r3, r3, #8
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	4a03      	ldr	r2, [pc, #12]	; (80034e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021000 	.word	0x40021000
 80034e8:	080074d8 	.word	0x080074d8

080034ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034f0:	f7ff ffde 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034f4:	4601      	mov	r1, r0
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	0adb      	lsrs	r3, r3, #11
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	4a03      	ldr	r2, [pc, #12]	; (8003510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	080074d8 	.word	0x080074d8

08003514 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	220f      	movs	r2, #15
 8003522:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <HAL_RCC_GetClockConfig+0x58>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f003 0203 	and.w	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_RCC_GetClockConfig+0x58>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <HAL_RCC_GetClockConfig+0x58>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003548:	4b08      	ldr	r3, [pc, #32]	; (800356c <HAL_RCC_GetClockConfig+0x58>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	08db      	lsrs	r3, r3, #3
 800354e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_RCC_GetClockConfig+0x5c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0207 	and.w	r2, r3, #7
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	40021000 	.word	0x40021000
 8003570:	40022000 	.word	0x40022000

08003574 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <RCC_Delay+0x34>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <RCC_Delay+0x38>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0a5b      	lsrs	r3, r3, #9
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003590:	bf00      	nop
  }
  while (Delay --);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1e5a      	subs	r2, r3, #1
 8003596:	60fa      	str	r2, [r7, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f9      	bne.n	8003590 <RCC_Delay+0x1c>
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000000 	.word	0x20000000
 80035ac:	10624dd3 	.word	0x10624dd3

080035b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d07d      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80035cc:	2300      	movs	r3, #0
 80035ce:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d0:	4b4f      	ldr	r3, [pc, #316]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10d      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035dc:	4b4c      	ldr	r3, [pc, #304]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	4a4b      	ldr	r2, [pc, #300]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e6:	61d3      	str	r3, [r2, #28]
 80035e8:	4b49      	ldr	r3, [pc, #292]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f4:	2301      	movs	r3, #1
 80035f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	4b46      	ldr	r3, [pc, #280]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d118      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003604:	4b43      	ldr	r3, [pc, #268]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a42      	ldr	r2, [pc, #264]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800360a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003610:	f7fe fa32 	bl	8001a78 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003616:	e008      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003618:	f7fe fa2e 	bl	8001a78 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e06d      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362a:	4b3a      	ldr	r3, [pc, #232]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003636:	4b36      	ldr	r3, [pc, #216]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d02e      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	429a      	cmp	r2, r3
 8003652:	d027      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003654:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800365e:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003660:	2201      	movs	r2, #1
 8003662:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003664:	4b2c      	ldr	r3, [pc, #176]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800366a:	4a29      	ldr	r2, [pc, #164]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d014      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367a:	f7fe f9fd 	bl	8001a78 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003680:	e00a      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fe f9f9 	bl	8001a78 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e036      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0ee      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a4:	4b1a      	ldr	r3, [pc, #104]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4917      	ldr	r1, [pc, #92]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d105      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036bc:	4b14      	ldr	r3, [pc, #80]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	4a13      	ldr	r2, [pc, #76]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036d4:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	490b      	ldr	r1, [pc, #44]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036f2:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	4904      	ldr	r1, [pc, #16]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
 8003714:	40007000 	.word	0x40007000
 8003718:	42420440 	.word	0x42420440

0800371c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b08d      	sub	sp, #52	; 0x34
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003724:	4b55      	ldr	r3, [pc, #340]	; (800387c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003726:	f107 040c 	add.w	r4, r7, #12
 800372a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800372c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003730:	4b53      	ldr	r3, [pc, #332]	; (8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	2300      	movs	r3, #0
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800373e:	2300      	movs	r3, #0
 8003740:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	2300      	movs	r3, #0
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d07f      	beq.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003750:	2b10      	cmp	r3, #16
 8003752:	d002      	beq.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003754:	2b01      	cmp	r3, #1
 8003756:	d048      	beq.n	80037ea <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003758:	e08b      	b.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800375a:	4b4a      	ldr	r3, [pc, #296]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003760:	4b48      	ldr	r3, [pc, #288]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d07f      	beq.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	0c9b      	lsrs	r3, r3, #18
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003778:	4413      	add	r3, r2
 800377a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800377e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d018      	beq.n	80037bc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800378a:	4b3e      	ldr	r3, [pc, #248]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	0c5b      	lsrs	r3, r3, #17
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003798:	4413      	add	r3, r2
 800379a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80037aa:	4a37      	ldr	r2, [pc, #220]	; (8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	fb02 f303 	mul.w	r3, r2, r3
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ba:	e004      	b.n	80037c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	4a33      	ldr	r2, [pc, #204]	; (800388c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80037c0:	fb02 f303 	mul.w	r3, r2, r3
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80037c6:	4b2f      	ldr	r3, [pc, #188]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d2:	d102      	bne.n	80037da <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80037d8:	e048      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4a2c      	ldr	r2, [pc, #176]	; (8003890 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80037e0:	fba2 2303 	umull	r2, r3, r2, r3
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80037e8:	e040      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80037ea:	4b26      	ldr	r3, [pc, #152]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fa:	d108      	bne.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8003806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
 800380c:	e01f      	b.n	800384e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003818:	d109      	bne.n	800382e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800381a:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8003826:	f649 4340 	movw	r3, #40000	; 0x9c40
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
 800382c:	e00f      	b.n	800384e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003838:	d11a      	bne.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800383a:	4b12      	ldr	r3, [pc, #72]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d014      	beq.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8003846:	f24f 4324 	movw	r3, #62500	; 0xf424
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800384c:	e010      	b.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800384e:	e00f      	b.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003850:	f7ff fe4c 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	0b9b      	lsrs	r3, r3, #14
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	3301      	adds	r3, #1
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800386a:	e002      	b.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800386c:	bf00      	nop
 800386e:	e000      	b.n	8003872 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003870:	bf00      	nop
    }
  }
  return (frequency);
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003874:	4618      	mov	r0, r3
 8003876:	3734      	adds	r7, #52	; 0x34
 8003878:	46bd      	mov	sp, r7
 800387a:	bd90      	pop	{r4, r7, pc}
 800387c:	080074ac 	.word	0x080074ac
 8003880:	080074bc 	.word	0x080074bc
 8003884:	40021000 	.word	0x40021000
 8003888:	007a1200 	.word	0x007a1200
 800388c:	003d0900 	.word	0x003d0900
 8003890:	aaaaaaab 	.word	0xaaaaaaab

08003894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e076      	b.n	8003994 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d108      	bne.n	80038c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038b6:	d009      	beq.n	80038cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	61da      	str	r2, [r3, #28]
 80038be:	e005      	b.n	80038cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fd fbcc 	bl	8001084 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003902:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	ea42 0103 	orr.w	r1, r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	0c1a      	lsrs	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f002 0204 	and.w	r2, r2, #4
 8003972:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003982:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e041      	b.n	8003a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f839 	bl	8003a3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f000 f9b4 	bl	8003d48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d001      	beq.n	8003a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e03a      	b.n	8003ada <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <HAL_TIM_Base_Start_IT+0x98>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00e      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x58>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8e:	d009      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x58>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0x58>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a13      	ldr	r2, [pc, #76]	; (8003aec <HAL_TIM_Base_Start_IT+0xa0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d111      	bne.n	8003ac8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2b06      	cmp	r3, #6
 8003ab4:	d010      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac6:	e007      	b.n	8003ad8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40000800 	.word	0x40000800

08003af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d122      	bne.n	8003b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d11b      	bne.n	8003b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f06f 0202 	mvn.w	r2, #2
 8003b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8ed 	bl	8003d12 <HAL_TIM_IC_CaptureCallback>
 8003b38:	e005      	b.n	8003b46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8e0 	bl	8003d00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f8ef 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d122      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d11b      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f06f 0204 	mvn.w	r2, #4
 8003b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f8c3 	bl	8003d12 <HAL_TIM_IC_CaptureCallback>
 8003b8c:	e005      	b.n	8003b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8b6 	bl	8003d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f8c5 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d122      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d11b      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0208 	mvn.w	r2, #8
 8003bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2204      	movs	r2, #4
 8003bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f899 	bl	8003d12 <HAL_TIM_IC_CaptureCallback>
 8003be0:	e005      	b.n	8003bee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f88c 	bl	8003d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f89b 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d122      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d11b      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0210 	mvn.w	r2, #16
 8003c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f86f 	bl	8003d12 <HAL_TIM_IC_CaptureCallback>
 8003c34:	e005      	b.n	8003c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f862 	bl	8003d00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f871 	bl	8003d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d10e      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0201 	mvn.w	r2, #1
 8003c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd f9ba 	bl	8000fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7e:	2b80      	cmp	r3, #128	; 0x80
 8003c80:	d10e      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8c:	2b80      	cmp	r3, #128	; 0x80
 8003c8e:	d107      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f8bf 	bl	8003e1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b40      	cmp	r3, #64	; 0x40
 8003cac:	d10e      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d107      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f835 	bl	8003d36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d107      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0220 	mvn.w	r2, #32
 8003cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f88a 	bl	8003e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr

08003d12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr

08003d36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a29      	ldr	r2, [pc, #164]	; (8003e00 <TIM_Base_SetConfig+0xb8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00b      	beq.n	8003d78 <TIM_Base_SetConfig+0x30>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d66:	d007      	beq.n	8003d78 <TIM_Base_SetConfig+0x30>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <TIM_Base_SetConfig+0xbc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <TIM_Base_SetConfig+0x30>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a25      	ldr	r2, [pc, #148]	; (8003e08 <TIM_Base_SetConfig+0xc0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d108      	bne.n	8003d8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <TIM_Base_SetConfig+0xb8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00b      	beq.n	8003daa <TIM_Base_SetConfig+0x62>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d98:	d007      	beq.n	8003daa <TIM_Base_SetConfig+0x62>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <TIM_Base_SetConfig+0xbc>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_Base_SetConfig+0x62>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <TIM_Base_SetConfig+0xc0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d108      	bne.n	8003dbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <TIM_Base_SetConfig+0xb8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d103      	bne.n	8003df0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	615a      	str	r2, [r3, #20]
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800

08003e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e03f      	b.n	8003ec2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd fbea 	bl	8001630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	; 0x24
 8003e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fb77 	bl	8004568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d166      	bne.n	8003fb4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_UART_Receive_DMA+0x26>
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e05f      	b.n	8003fb6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_UART_Receive_DMA+0x38>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e058      	b.n	8003fb6 <HAL_UART_Receive_DMA+0xea>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	88fa      	ldrh	r2, [r7, #6]
 8003f16:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2222      	movs	r2, #34	; 0x22
 8003f22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	4a25      	ldr	r2, [pc, #148]	; (8003fc0 <HAL_UART_Receive_DMA+0xf4>)
 8003f2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	4a24      	ldr	r2, [pc, #144]	; (8003fc4 <HAL_UART_Receive_DMA+0xf8>)
 8003f34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3a:	4a23      	ldr	r2, [pc, #140]	; (8003fc8 <HAL_UART_Receive_DMA+0xfc>)
 8003f3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f42:	2200      	movs	r2, #0
 8003f44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8003f46:	f107 0308 	add.w	r3, r7, #8
 8003f4a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	f7fe fb5f 	bl	8002620 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695a      	ldr	r2, [r3, #20]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fae:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e000      	b.n	8003fb6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003fb4:	2302      	movs	r3, #2
  }
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	080041f5 	.word	0x080041f5
 8003fc4:	0800425d 	.word	0x0800425d
 8003fc8:	08004279 	.word	0x08004279

08003fcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10d      	bne.n	800401e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_UART_IRQHandler+0x52>
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa25 	bl	8004466 <UART_Receive_IT>
      return;
 800401c:	e0d1      	b.n	80041c2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80b0 	beq.w	8004186 <HAL_UART_IRQHandler+0x1ba>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <HAL_UART_IRQHandler+0x70>
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80a5 	beq.w	8004186 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_UART_IRQHandler+0x90>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004054:	f043 0201 	orr.w	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_UART_IRQHandler+0xb0>
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004074:	f043 0202 	orr.w	r2, r3, #2
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_UART_IRQHandler+0xd0>
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	f043 0204 	orr.w	r2, r3, #4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00f      	beq.n	80040c6 <HAL_UART_IRQHandler+0xfa>
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d104      	bne.n	80040ba <HAL_UART_IRQHandler+0xee>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	f043 0208 	orr.w	r2, r3, #8
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d078      	beq.n	80041c0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <HAL_UART_IRQHandler+0x11c>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f9bf 	bl	8004466 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d102      	bne.n	8004110 <HAL_UART_IRQHandler+0x144>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d031      	beq.n	8004174 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f910 	bl	8004336 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d023      	beq.n	800416c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004132:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004138:	2b00      	cmp	r3, #0
 800413a:	d013      	beq.n	8004164 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004140:	4a21      	ldr	r2, [pc, #132]	; (80041c8 <HAL_UART_IRQHandler+0x1fc>)
 8004142:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe fac9 	bl	80026e0 <HAL_DMA_Abort_IT>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d016      	beq.n	8004182 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800415e:	4610      	mov	r0, r2
 8004160:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004162:	e00e      	b.n	8004182 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fd fc11 	bl	800198c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416a:	e00a      	b.n	8004182 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fd fc0d 	bl	800198c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004172:	e006      	b.n	8004182 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7fd fc09 	bl	800198c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004180:	e01e      	b.n	80041c0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004182:	bf00      	nop
    return;
 8004184:	e01c      	b.n	80041c0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_UART_IRQHandler+0x1d6>
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f8fc 	bl	8004398 <UART_Transmit_IT>
    return;
 80041a0:	e00f      	b.n	80041c2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_UART_IRQHandler+0x1f6>
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f93d 	bl	8004436 <UART_EndTransmit_IT>
    return;
 80041bc:	bf00      	nop
 80041be:	e000      	b.n	80041c2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80041c0:	bf00      	nop
  }
}
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	08004371 	.word	0x08004371

080041cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr

080041de <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d11e      	bne.n	800424e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004224:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004244:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f7fd fb82 	bl	8001958 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff ffae 	bl	80041cc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b21      	cmp	r3, #33	; 0x21
 80042aa:	d108      	bne.n	80042be <UART_DMAError+0x46>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2200      	movs	r2, #0
 80042b6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80042b8:	68b8      	ldr	r0, [r7, #8]
 80042ba:	f000 f827 	bl	800430c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b22      	cmp	r3, #34	; 0x22
 80042de:	d108      	bne.n	80042f2 <UART_DMAError+0x7a>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2200      	movs	r2, #0
 80042ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042ec:	68b8      	ldr	r0, [r7, #8]
 80042ee:	f000 f822 	bl	8004336 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f6:	f043 0210 	orr.w	r2, r3, #16
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042fe:	68b8      	ldr	r0, [r7, #8]
 8004300:	f7fd fb44 	bl	800198c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004322:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800434c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7fd fafe 	bl	800198c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b21      	cmp	r3, #33	; 0x21
 80043aa:	d13e      	bne.n	800442a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b4:	d114      	bne.n	80043e0 <UART_Transmit_IT+0x48>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d110      	bne.n	80043e0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	1c9a      	adds	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	621a      	str	r2, [r3, #32]
 80043de:	e008      	b.n	80043f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	1c59      	adds	r1, r3, #1
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6211      	str	r1, [r2, #32]
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4619      	mov	r1, r3
 8004400:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004414:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004424:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e000      	b.n	800442c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800442a:	2302      	movs	r3, #2
  }
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800444c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fd fa4a 	bl	80018f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b22      	cmp	r3, #34	; 0x22
 8004478:	d170      	bne.n	800455c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004482:	d117      	bne.n	80044b4 <UART_Receive_IT+0x4e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d113      	bne.n	80044b4 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ac:	1c9a      	adds	r2, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	629a      	str	r2, [r3, #40]	; 0x28
 80044b2:	e026      	b.n	8004502 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b8:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c6:	d007      	beq.n	80044d8 <UART_Receive_IT+0x72>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10a      	bne.n	80044e6 <UART_Receive_IT+0x80>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	e008      	b.n	80044f8 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29b      	uxth	r3, r3
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	4619      	mov	r1, r3
 8004510:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004512:	2b00      	cmp	r3, #0
 8004514:	d120      	bne.n	8004558 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0220 	bic.w	r2, r2, #32
 8004524:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004534:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0201 	bic.w	r2, r2, #1
 8004544:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fd fa02 	bl	8001958 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e002      	b.n	800455e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	e000      	b.n	800455e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045a2:	f023 030c 	bic.w	r3, r3, #12
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	430b      	orrs	r3, r1
 80045ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a2c      	ldr	r2, [pc, #176]	; (800467c <UART_SetConfig+0x114>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d103      	bne.n	80045d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045d0:	f7fe ff8c 	bl	80034ec <HAL_RCC_GetPCLK2Freq>
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	e002      	b.n	80045de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045d8:	f7fe ff74 	bl	80034c4 <HAL_RCC_GetPCLK1Freq>
 80045dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009a      	lsls	r2, r3, #2
 80045e8:	441a      	add	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	4a22      	ldr	r2, [pc, #136]	; (8004680 <UART_SetConfig+0x118>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	0119      	lsls	r1, r3, #4
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009a      	lsls	r2, r3, #2
 8004608:	441a      	add	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	fbb2 f2f3 	udiv	r2, r2, r3
 8004614:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <UART_SetConfig+0x118>)
 8004616:	fba3 0302 	umull	r0, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	2064      	movs	r0, #100	; 0x64
 800461e:	fb00 f303 	mul.w	r3, r0, r3
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	3332      	adds	r3, #50	; 0x32
 8004628:	4a15      	ldr	r2, [pc, #84]	; (8004680 <UART_SetConfig+0x118>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004634:	4419      	add	r1, r3
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009a      	lsls	r2, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	fbb2 f2f3 	udiv	r2, r2, r3
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <UART_SetConfig+0x118>)
 800464e:	fba3 0302 	umull	r0, r3, r3, r2
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2064      	movs	r0, #100	; 0x64
 8004656:	fb00 f303 	mul.w	r3, r0, r3
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	3332      	adds	r3, #50	; 0x32
 8004660:	4a07      	ldr	r2, [pc, #28]	; (8004680 <UART_SetConfig+0x118>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	f003 020f 	and.w	r2, r3, #15
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	440a      	add	r2, r1
 8004672:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40013800 	.word	0x40013800
 8004680:	51eb851f 	.word	0x51eb851f

08004684 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004696:	2b84      	cmp	r3, #132	; 0x84
 8004698:	d005      	beq.n	80046a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800469a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	3303      	adds	r3, #3
 80046a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80046a6:	68fb      	ldr	r3, [r7, #12]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80046b6:	f000 fe69 	bl	800538c <vTaskStartScheduler>
  
  return osOK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}

080046c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80046c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c2:	b089      	sub	sp, #36	; 0x24
 80046c4:	af04      	add	r7, sp, #16
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d020      	beq.n	8004714 <osThreadCreate+0x54>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01c      	beq.n	8004714 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685c      	ldr	r4, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681d      	ldr	r5, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691e      	ldr	r6, [r3, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ffc9 	bl	8004684 <makeFreeRtosPriority>
 80046f2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046fc:	9202      	str	r2, [sp, #8]
 80046fe:	9301      	str	r3, [sp, #4]
 8004700:	9100      	str	r1, [sp, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	4632      	mov	r2, r6
 8004706:	4629      	mov	r1, r5
 8004708:	4620      	mov	r0, r4
 800470a:	f000 fc85 	bl	8005018 <xTaskCreateStatic>
 800470e:	4603      	mov	r3, r0
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	e01c      	b.n	800474e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685c      	ldr	r4, [r3, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004720:	b29e      	uxth	r6, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff ffab 	bl	8004684 <makeFreeRtosPriority>
 800472e:	4602      	mov	r2, r0
 8004730:	f107 030c 	add.w	r3, r7, #12
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	9200      	str	r2, [sp, #0]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	4632      	mov	r2, r6
 800473c:	4629      	mov	r1, r5
 800473e:	4620      	mov	r0, r4
 8004740:	f000 fcc3 	bl	80050ca <xTaskCreate>
 8004744:	4603      	mov	r3, r0
 8004746:	2b01      	cmp	r3, #1
 8004748:	d001      	beq.n	800474e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	e000      	b.n	8004750 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800474e:	68fb      	ldr	r3, [r7, #12]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004758 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <osDelay+0x16>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	e000      	b.n	8004770 <osDelay+0x18>
 800476e:	2301      	movs	r3, #1
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fdd7 	bl	8005324 <vTaskDelay>
  
  return osOK;
 8004776:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4619      	mov	r1, r3
 8004796:	2001      	movs	r0, #1
 8004798:	f000 fa54 	bl	8004c44 <xQueueCreateMutexStatic>
 800479c:	4603      	mov	r3, r0
 800479e:	e003      	b.n	80047a8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80047a0:	2001      	movs	r0, #1
 80047a2:	f000 fa37 	bl	8004c14 <xQueueCreateMutex>
 80047a6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d010      	beq.n	80047e4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10b      	bne.n	80047e0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	2303      	movs	r3, #3
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	2200      	movs	r2, #0
 80047d4:	2100      	movs	r1, #0
 80047d6:	2001      	movs	r0, #1
 80047d8:	f000 f934 	bl	8004a44 <xQueueGenericCreateStatic>
 80047dc:	4603      	mov	r3, r0
 80047de:	e016      	b.n	800480e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e014      	b.n	800480e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d110      	bne.n	800480c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80047ea:	2203      	movs	r2, #3
 80047ec:	2100      	movs	r1, #0
 80047ee:	2001      	movs	r0, #1
 80047f0:	f000 f99a 	bl	8004b28 <xQueueGenericCreate>
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <osSemaphoreCreate+0x58>
 80047fc:	2300      	movs	r3, #0
 80047fe:	2200      	movs	r2, #0
 8004800:	2100      	movs	r1, #0
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 fa3a 	bl	8004c7c <xQueueGenericSend>
      return sema;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	e000      	b.n	800480e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800480c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f103 0208 	add.w	r2, r3, #8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f04f 32ff 	mov.w	r2, #4294967295
 800482e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f103 0208 	add.w	r2, r3, #8
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f103 0208 	add.w	r2, r3, #8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr

080048b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048b2:	b480      	push	{r7}
 80048b4:	b085      	sub	sp, #20
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d103      	bne.n	80048d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e00c      	b.n	80048ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3308      	adds	r3, #8
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	e002      	b.n	80048e0 <vListInsert+0x2e>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d2f6      	bcs.n	80048da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	601a      	str	r2, [r3, #0]
}
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr

08004922 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6892      	ldr	r2, [r2, #8]
 8004938:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6852      	ldr	r2, [r2, #4]
 8004942:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d103      	bne.n	8004956 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	1e5a      	subs	r2, r3, #1
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d109      	bne.n	800499c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	e7fe      	b.n	800499a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800499c:	f001 fae4 	bl	8005f68 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a8:	68f9      	ldr	r1, [r7, #12]
 80049aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	441a      	add	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049cc:	3b01      	subs	r3, #1
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	441a      	add	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	22ff      	movs	r2, #255	; 0xff
 80049e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	22ff      	movs	r2, #255	; 0xff
 80049e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d114      	bne.n	8004a1c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01a      	beq.n	8004a30 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3310      	adds	r3, #16
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 ff06 	bl	8005810 <xTaskRemoveFromEventList>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d012      	beq.n	8004a30 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <xQueueGenericReset+0xcc>)
 8004a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	e009      	b.n	8004a30 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3310      	adds	r3, #16
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fef8 	bl	8004816 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3324      	adds	r3, #36	; 0x24
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fef3 	bl	8004816 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a30:	f001 fac8 	bl	8005fc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a34:	2301      	movs	r3, #1
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	e000ed04 	.word	0xe000ed04

08004a44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08e      	sub	sp, #56	; 0x38
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d109      	bne.n	8004a6c <xQueueGenericCreateStatic+0x28>
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6a:	e7fe      	b.n	8004a6a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <xQueueGenericCreateStatic+0x42>
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
 8004a84:	e7fe      	b.n	8004a84 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <xQueueGenericCreateStatic+0x4e>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <xQueueGenericCreateStatic+0x52>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <xQueueGenericCreateStatic+0x54>
 8004a96:	2300      	movs	r3, #0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d109      	bne.n	8004ab0 <xQueueGenericCreateStatic+0x6c>
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	623b      	str	r3, [r7, #32]
 8004aae:	e7fe      	b.n	8004aae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <xQueueGenericCreateStatic+0x78>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <xQueueGenericCreateStatic+0x7c>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <xQueueGenericCreateStatic+0x7e>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <xQueueGenericCreateStatic+0x96>
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	61fb      	str	r3, [r7, #28]
 8004ad8:	e7fe      	b.n	8004ad8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ada:	2348      	movs	r3, #72	; 0x48
 8004adc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b48      	cmp	r3, #72	; 0x48
 8004ae2:	d009      	beq.n	8004af8 <xQueueGenericCreateStatic+0xb4>
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	e7fe      	b.n	8004af6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00d      	beq.n	8004b1e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	4613      	mov	r3, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f842 	bl	8004ba2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3730      	adds	r7, #48	; 0x30
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08a      	sub	sp, #40	; 0x28
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <xQueueGenericCreate+0x28>
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	e7fe      	b.n	8004b4e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d102      	bne.n	8004b5c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	e004      	b.n	8004b66 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	fb02 f303 	mul.w	r3, r2, r3
 8004b64:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3348      	adds	r3, #72	; 0x48
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f001 fab6 	bl	80060dc <pvPortMalloc>
 8004b70:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00f      	beq.n	8004b98 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	3348      	adds	r3, #72	; 0x48
 8004b7c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b86:	79fa      	ldrb	r2, [r7, #7]
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f805 	bl	8004ba2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004b98:	69bb      	ldr	r3, [r7, #24]
	}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3720      	adds	r7, #32
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	e002      	b.n	8004bc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	69b8      	ldr	r0, [r7, #24]
 8004bd4:	f7ff fece 	bl	8004974 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00e      	beq.n	8004c0c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004c00:	2300      	movs	r3, #0
 8004c02:	2200      	movs	r2, #0
 8004c04:	2100      	movs	r1, #0
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f838 	bl	8004c7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6939      	ldr	r1, [r7, #16]
 8004c2c:	6978      	ldr	r0, [r7, #20]
 8004c2e:	f7ff ff7b 	bl	8004b28 <xQueueGenericCreate>
 8004c32:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7ff ffd3 	bl	8004be0 <prvInitialiseMutex>

		return pxNewQueue;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
	}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	6039      	str	r1, [r7, #0]
 8004c4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c50:	2301      	movs	r3, #1
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	6939      	ldr	r1, [r7, #16]
 8004c62:	6978      	ldr	r0, [r7, #20]
 8004c64:	f7ff feee 	bl	8004a44 <xQueueGenericCreateStatic>
 8004c68:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f7ff ffb8 	bl	8004be0 <prvInitialiseMutex>

		return pxNewQueue;
 8004c70:	68fb      	ldr	r3, [r7, #12]
	}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08e      	sub	sp, #56	; 0x38
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <xQueueGenericSend+0x30>
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004caa:	e7fe      	b.n	8004caa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <xQueueGenericSend+0x3e>
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <xQueueGenericSend+0x42>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <xQueueGenericSend+0x44>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <xQueueGenericSend+0x5c>
 8004cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc8:	f383 8811 	msr	BASEPRI, r3
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd6:	e7fe      	b.n	8004cd6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d103      	bne.n	8004ce6 <xQueueGenericSend+0x6a>
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <xQueueGenericSend+0x6e>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e000      	b.n	8004cec <xQueueGenericSend+0x70>
 8004cea:	2300      	movs	r3, #0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d109      	bne.n	8004d04 <xQueueGenericSend+0x88>
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	623b      	str	r3, [r7, #32]
 8004d02:	e7fe      	b.n	8004d02 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d04:	f000 ff3e 	bl	8005b84 <xTaskGetSchedulerState>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <xQueueGenericSend+0x98>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <xQueueGenericSend+0x9c>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <xQueueGenericSend+0x9e>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <xQueueGenericSend+0xb6>
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	e7fe      	b.n	8004d30 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d32:	f001 f919 	bl	8005f68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d302      	bcc.n	8004d48 <xQueueGenericSend+0xcc>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d129      	bne.n	8004d9c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d4e:	f000 f88f 	bl	8004e70 <prvCopyDataToQueue>
 8004d52:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d010      	beq.n	8004d7e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	3324      	adds	r3, #36	; 0x24
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fd55 	bl	8005810 <xTaskRemoveFromEventList>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d013      	beq.n	8004d94 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d6c:	4b3f      	ldr	r3, [pc, #252]	; (8004e6c <xQueueGenericSend+0x1f0>)
 8004d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	e00a      	b.n	8004d94 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d007      	beq.n	8004d94 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d84:	4b39      	ldr	r3, [pc, #228]	; (8004e6c <xQueueGenericSend+0x1f0>)
 8004d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d94:	f001 f916 	bl	8005fc4 <vPortExitCritical>
				return pdPASS;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e063      	b.n	8004e64 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004da2:	f001 f90f 	bl	8005fc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	e05c      	b.n	8004e64 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d106      	bne.n	8004dbe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004db0:	f107 0314 	add.w	r3, r7, #20
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fd8d 	bl	80058d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dbe:	f001 f901 	bl	8005fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dc2:	f000 fb41 	bl	8005448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dc6:	f001 f8cf 	bl	8005f68 <vPortEnterCritical>
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dd0:	b25b      	sxtb	r3, r3
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd6:	d103      	bne.n	8004de0 <xQueueGenericSend+0x164>
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004de6:	b25b      	sxtb	r3, r3
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d103      	bne.n	8004df6 <xQueueGenericSend+0x17a>
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004df6:	f001 f8e5 	bl	8005fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dfa:	1d3a      	adds	r2, r7, #4
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fd7c 	bl	8005900 <xTaskCheckForTimeOut>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d124      	bne.n	8004e58 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e10:	f000 f8ea 	bl	8004fe8 <prvIsQueueFull>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d018      	beq.n	8004e4c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	3310      	adds	r3, #16
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4611      	mov	r1, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fcd0 	bl	80057c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e2a:	f000 f88b 	bl	8004f44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e2e:	f000 fb19 	bl	8005464 <xTaskResumeAll>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f47f af7c 	bne.w	8004d32 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004e3a:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <xQueueGenericSend+0x1f0>)
 8004e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	e772      	b.n	8004d32 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e4e:	f000 f879 	bl	8004f44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e52:	f000 fb07 	bl	8005464 <xTaskResumeAll>
 8004e56:	e76c      	b.n	8004d32 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e5a:	f000 f873 	bl	8004f44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e5e:	f000 fb01 	bl	8005464 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e62:	2300      	movs	r3, #0
		}
	}
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3738      	adds	r7, #56	; 0x38
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10d      	bne.n	8004eaa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d14d      	bne.n	8004f32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fe90 	bl	8005bc0 <xTaskPriorityDisinherit>
 8004ea0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	605a      	str	r2, [r3, #4]
 8004ea8:	e043      	b.n	8004f32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d119      	bne.n	8004ee4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6898      	ldr	r0, [r3, #8]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	461a      	mov	r2, r3
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	f001 fb0c 	bl	80064d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	441a      	add	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d32b      	bcc.n	8004f32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	609a      	str	r2, [r3, #8]
 8004ee2:	e026      	b.n	8004f32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68d8      	ldr	r0, [r3, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	461a      	mov	r2, r3
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	f001 faf2 	bl	80064d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	425b      	negs	r3, r3
 8004efe:	441a      	add	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d207      	bcs.n	8004f20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	425b      	negs	r3, r3
 8004f1a:	441a      	add	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d105      	bne.n	8004f32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f3a:	697b      	ldr	r3, [r7, #20]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f4c:	f001 f80c 	bl	8005f68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f58:	e011      	b.n	8004f7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d012      	beq.n	8004f88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3324      	adds	r3, #36	; 0x24
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fc52 	bl	8005810 <xTaskRemoveFromEventList>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f72:	f000 fd25 	bl	80059c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	dce9      	bgt.n	8004f5a <prvUnlockQueue+0x16>
 8004f86:	e000      	b.n	8004f8a <prvUnlockQueue+0x46>
					break;
 8004f88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	22ff      	movs	r2, #255	; 0xff
 8004f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f92:	f001 f817 	bl	8005fc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f96:	f000 ffe7 	bl	8005f68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fa2:	e011      	b.n	8004fc8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d012      	beq.n	8004fd2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3310      	adds	r3, #16
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fc2d 	bl	8005810 <xTaskRemoveFromEventList>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fbc:	f000 fd00 	bl	80059c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fc0:	7bbb      	ldrb	r3, [r7, #14]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dce9      	bgt.n	8004fa4 <prvUnlockQueue+0x60>
 8004fd0:	e000      	b.n	8004fd4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fd2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	22ff      	movs	r2, #255	; 0xff
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004fdc:	f000 fff2 	bl	8005fc4 <vPortExitCritical>
}
 8004fe0:	bf00      	nop
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ff0:	f000 ffba 	bl	8005f68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d102      	bne.n	8005006 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005000:	2301      	movs	r3, #1
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	e001      	b.n	800500a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800500a:	f000 ffdb 	bl	8005fc4 <vPortExitCritical>

	return xReturn;
 800500e:	68fb      	ldr	r3, [r7, #12]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08e      	sub	sp, #56	; 0x38
 800501c:	af04      	add	r7, sp, #16
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <xTaskCreateStatic+0x28>
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	623b      	str	r3, [r7, #32]
 800503e:	e7fe      	b.n	800503e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <xTaskCreateStatic+0x42>
 8005046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	e7fe      	b.n	8005058 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800505a:	2354      	movs	r3, #84	; 0x54
 800505c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b54      	cmp	r3, #84	; 0x54
 8005062:	d009      	beq.n	8005078 <xTaskCreateStatic+0x60>
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	e7fe      	b.n	8005076 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507a:	2b00      	cmp	r3, #0
 800507c:	d01e      	beq.n	80050bc <xTaskCreateStatic+0xa4>
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800508c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	2202      	movs	r2, #2
 8005092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005096:	2300      	movs	r3, #0
 8005098:	9303      	str	r3, [sp, #12]
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	9302      	str	r3, [sp, #8]
 800509e:	f107 0314 	add.w	r3, r7, #20
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 f850 	bl	8005154 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050b6:	f000 f8cb 	bl	8005250 <prvAddNewTaskToReadyList>
 80050ba:	e001      	b.n	80050c0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80050c0:	697b      	ldr	r3, [r7, #20]
	}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3728      	adds	r7, #40	; 0x28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b08c      	sub	sp, #48	; 0x30
 80050ce:	af04      	add	r7, sp, #16
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fffc 	bl	80060dc <pvPortMalloc>
 80050e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00e      	beq.n	800510a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80050ec:	2054      	movs	r0, #84	; 0x54
 80050ee:	f000 fff5 	bl	80060dc <pvPortMalloc>
 80050f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
 8005100:	e005      	b.n	800510e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005102:	6978      	ldr	r0, [r7, #20]
 8005104:	f001 f8ac 	bl	8006260 <vPortFree>
 8005108:	e001      	b.n	800510e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d017      	beq.n	8005144 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800511c:	88fa      	ldrh	r2, [r7, #6]
 800511e:	2300      	movs	r3, #0
 8005120:	9303      	str	r3, [sp, #12]
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	9302      	str	r3, [sp, #8]
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	9301      	str	r3, [sp, #4]
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f80e 	bl	8005154 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005138:	69f8      	ldr	r0, [r7, #28]
 800513a:	f000 f889 	bl	8005250 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800513e:	2301      	movs	r3, #1
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	e002      	b.n	800514a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005144:	f04f 33ff 	mov.w	r3, #4294967295
 8005148:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800514a:	69bb      	ldr	r3, [r7, #24]
	}
 800514c:	4618      	mov	r0, r3
 800514e:	3720      	adds	r7, #32
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800516c:	3b01      	subs	r3, #1
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	f023 0307 	bic.w	r3, r3, #7
 800517a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <prvInitialiseNewTask+0x46>
 8005186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e7fe      	b.n	8005198 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	e012      	b.n	80051c6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	7819      	ldrb	r1, [r3, #0]
 80051a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	3334      	adds	r3, #52	; 0x34
 80051b0:	460a      	mov	r2, r1
 80051b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	4413      	add	r3, r2
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d006      	beq.n	80051ce <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	3301      	adds	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	2b0f      	cmp	r3, #15
 80051ca:	d9e9      	bls.n	80051a0 <prvInitialiseNewTask+0x4c>
 80051cc:	e000      	b.n	80051d0 <prvInitialiseNewTask+0x7c>
		{
			break;
 80051ce:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	2b06      	cmp	r3, #6
 80051dc:	d901      	bls.n	80051e2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051de:	2306      	movs	r3, #6
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	2200      	movs	r2, #0
 80051f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	3304      	adds	r3, #4
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff fb2b 	bl	8004854 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	3318      	adds	r3, #24
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff fb26 	bl	8004854 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	f1c3 0207 	rsb	r2, r3, #7
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800521c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	2200      	movs	r2, #0
 8005222:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	69b8      	ldr	r0, [r7, #24]
 8005232:	f000 fdaf 	bl	8005d94 <pxPortInitialiseStack>
 8005236:	4602      	mov	r2, r0
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800523c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005246:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005248:	bf00      	nop
 800524a:	3720      	adds	r7, #32
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005258:	f000 fe86 	bl	8005f68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800525c:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <prvAddNewTaskToReadyList+0xb8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	4a29      	ldr	r2, [pc, #164]	; (8005308 <prvAddNewTaskToReadyList+0xb8>)
 8005264:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005266:	4b29      	ldr	r3, [pc, #164]	; (800530c <prvAddNewTaskToReadyList+0xbc>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d109      	bne.n	8005282 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800526e:	4a27      	ldr	r2, [pc, #156]	; (800530c <prvAddNewTaskToReadyList+0xbc>)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005274:	4b24      	ldr	r3, [pc, #144]	; (8005308 <prvAddNewTaskToReadyList+0xb8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d110      	bne.n	800529e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800527c:	f000 fbc4 	bl	8005a08 <prvInitialiseTaskLists>
 8005280:	e00d      	b.n	800529e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005282:	4b23      	ldr	r3, [pc, #140]	; (8005310 <prvAddNewTaskToReadyList+0xc0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800528a:	4b20      	ldr	r3, [pc, #128]	; (800530c <prvAddNewTaskToReadyList+0xbc>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005294:	429a      	cmp	r2, r3
 8005296:	d802      	bhi.n	800529e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005298:	4a1c      	ldr	r2, [pc, #112]	; (800530c <prvAddNewTaskToReadyList+0xbc>)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800529e:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <prvAddNewTaskToReadyList+0xc4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3301      	adds	r3, #1
 80052a4:	4a1b      	ldr	r2, [pc, #108]	; (8005314 <prvAddNewTaskToReadyList+0xc4>)
 80052a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	2201      	movs	r2, #1
 80052ae:	409a      	lsls	r2, r3
 80052b0:	4b19      	ldr	r3, [pc, #100]	; (8005318 <prvAddNewTaskToReadyList+0xc8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	4a18      	ldr	r2, [pc, #96]	; (8005318 <prvAddNewTaskToReadyList+0xc8>)
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052be:	4613      	mov	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4a15      	ldr	r2, [pc, #84]	; (800531c <prvAddNewTaskToReadyList+0xcc>)
 80052c8:	441a      	add	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3304      	adds	r3, #4
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f7ff facb 	bl	800486c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052d6:	f000 fe75 	bl	8005fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052da:	4b0d      	ldr	r3, [pc, #52]	; (8005310 <prvAddNewTaskToReadyList+0xc0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00e      	beq.n	8005300 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052e2:	4b0a      	ldr	r3, [pc, #40]	; (800530c <prvAddNewTaskToReadyList+0xbc>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d207      	bcs.n	8005300 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <prvAddNewTaskToReadyList+0xd0>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20000414 	.word	0x20000414
 800530c:	20000314 	.word	0x20000314
 8005310:	20000420 	.word	0x20000420
 8005314:	20000430 	.word	0x20000430
 8005318:	2000041c 	.word	0x2000041c
 800531c:	20000318 	.word	0x20000318
 8005320:	e000ed04 	.word	0xe000ed04

08005324 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <vTaskDelay+0x60>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d009      	beq.n	8005352 <vTaskDelay+0x2e>
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	60bb      	str	r3, [r7, #8]
 8005350:	e7fe      	b.n	8005350 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005352:	f000 f879 	bl	8005448 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005356:	2100      	movs	r1, #0
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fcb5 	bl	8005cc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800535e:	f000 f881 	bl	8005464 <xTaskResumeAll>
 8005362:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d107      	bne.n	800537a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800536a:	4b07      	ldr	r3, [pc, #28]	; (8005388 <vTaskDelay+0x64>)
 800536c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	2000043c 	.word	0x2000043c
 8005388:	e000ed04 	.word	0xe000ed04

0800538c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08a      	sub	sp, #40	; 0x28
 8005390:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800539a:	463a      	mov	r2, r7
 800539c:	1d39      	adds	r1, r7, #4
 800539e:	f107 0308 	add.w	r3, r7, #8
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fb fcc2 	bl	8000d2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053a8:	6839      	ldr	r1, [r7, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	9202      	str	r2, [sp, #8]
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	2300      	movs	r3, #0
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	2300      	movs	r3, #0
 80053b8:	460a      	mov	r2, r1
 80053ba:	491d      	ldr	r1, [pc, #116]	; (8005430 <vTaskStartScheduler+0xa4>)
 80053bc:	481d      	ldr	r0, [pc, #116]	; (8005434 <vTaskStartScheduler+0xa8>)
 80053be:	f7ff fe2b 	bl	8005018 <xTaskCreateStatic>
 80053c2:	4602      	mov	r2, r0
 80053c4:	4b1c      	ldr	r3, [pc, #112]	; (8005438 <vTaskStartScheduler+0xac>)
 80053c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80053c8:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <vTaskStartScheduler+0xac>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80053d0:	2301      	movs	r3, #1
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e001      	b.n	80053da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d115      	bne.n	800540c <vTaskStartScheduler+0x80>
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053f2:	4b12      	ldr	r3, [pc, #72]	; (800543c <vTaskStartScheduler+0xb0>)
 80053f4:	f04f 32ff 	mov.w	r2, #4294967295
 80053f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053fa:	4b11      	ldr	r3, [pc, #68]	; (8005440 <vTaskStartScheduler+0xb4>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005400:	4b10      	ldr	r3, [pc, #64]	; (8005444 <vTaskStartScheduler+0xb8>)
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005406:	f000 fd3f 	bl	8005e88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800540a:	e00d      	b.n	8005428 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d109      	bne.n	8005428 <vTaskStartScheduler+0x9c>
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	e7fe      	b.n	8005426 <vTaskStartScheduler+0x9a>
}
 8005428:	bf00      	nop
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	080074c0 	.word	0x080074c0
 8005434:	080059d9 	.word	0x080059d9
 8005438:	20000438 	.word	0x20000438
 800543c:	20000434 	.word	0x20000434
 8005440:	20000420 	.word	0x20000420
 8005444:	20000418 	.word	0x20000418

08005448 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800544c:	4b04      	ldr	r3, [pc, #16]	; (8005460 <vTaskSuspendAll+0x18>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3301      	adds	r3, #1
 8005452:	4a03      	ldr	r2, [pc, #12]	; (8005460 <vTaskSuspendAll+0x18>)
 8005454:	6013      	str	r3, [r2, #0]
}
 8005456:	bf00      	nop
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	2000043c 	.word	0x2000043c

08005464 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800546e:	2300      	movs	r3, #0
 8005470:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005472:	4b41      	ldr	r3, [pc, #260]	; (8005578 <xTaskResumeAll+0x114>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d109      	bne.n	800548e <xTaskResumeAll+0x2a>
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	e7fe      	b.n	800548c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800548e:	f000 fd6b 	bl	8005f68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005492:	4b39      	ldr	r3, [pc, #228]	; (8005578 <xTaskResumeAll+0x114>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3b01      	subs	r3, #1
 8005498:	4a37      	ldr	r2, [pc, #220]	; (8005578 <xTaskResumeAll+0x114>)
 800549a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549c:	4b36      	ldr	r3, [pc, #216]	; (8005578 <xTaskResumeAll+0x114>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d161      	bne.n	8005568 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054a4:	4b35      	ldr	r3, [pc, #212]	; (800557c <xTaskResumeAll+0x118>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d05d      	beq.n	8005568 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054ac:	e02e      	b.n	800550c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80054ae:	4b34      	ldr	r3, [pc, #208]	; (8005580 <xTaskResumeAll+0x11c>)
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3318      	adds	r3, #24
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fa31 	bl	8004922 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3304      	adds	r3, #4
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff fa2c 	bl	8004922 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ce:	2201      	movs	r2, #1
 80054d0:	409a      	lsls	r2, r3
 80054d2:	4b2c      	ldr	r3, [pc, #176]	; (8005584 <xTaskResumeAll+0x120>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	4a2a      	ldr	r2, [pc, #168]	; (8005584 <xTaskResumeAll+0x120>)
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	4613      	mov	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4a27      	ldr	r2, [pc, #156]	; (8005588 <xTaskResumeAll+0x124>)
 80054ea:	441a      	add	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3304      	adds	r3, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f7ff f9ba 	bl	800486c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fc:	4b23      	ldr	r3, [pc, #140]	; (800558c <xTaskResumeAll+0x128>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005502:	429a      	cmp	r2, r3
 8005504:	d302      	bcc.n	800550c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005506:	4b22      	ldr	r3, [pc, #136]	; (8005590 <xTaskResumeAll+0x12c>)
 8005508:	2201      	movs	r2, #1
 800550a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800550c:	4b1c      	ldr	r3, [pc, #112]	; (8005580 <xTaskResumeAll+0x11c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1cc      	bne.n	80054ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800551a:	f000 fb0f 	bl	8005b3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800551e:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <xTaskResumeAll+0x130>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d010      	beq.n	800554c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800552a:	f000 f837 	bl	800559c <xTaskIncrementTick>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005534:	4b16      	ldr	r3, [pc, #88]	; (8005590 <xTaskResumeAll+0x12c>)
 8005536:	2201      	movs	r2, #1
 8005538:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3b01      	subs	r3, #1
 800553e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f1      	bne.n	800552a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <xTaskResumeAll+0x130>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800554c:	4b10      	ldr	r3, [pc, #64]	; (8005590 <xTaskResumeAll+0x12c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d009      	beq.n	8005568 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005554:	2301      	movs	r3, #1
 8005556:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005558:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <xTaskResumeAll+0x134>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005568:	f000 fd2c 	bl	8005fc4 <vPortExitCritical>

	return xAlreadyYielded;
 800556c:	68bb      	ldr	r3, [r7, #8]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	2000043c 	.word	0x2000043c
 800557c:	20000414 	.word	0x20000414
 8005580:	200003d4 	.word	0x200003d4
 8005584:	2000041c 	.word	0x2000041c
 8005588:	20000318 	.word	0x20000318
 800558c:	20000314 	.word	0x20000314
 8005590:	20000428 	.word	0x20000428
 8005594:	20000424 	.word	0x20000424
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055a6:	4b50      	ldr	r3, [pc, #320]	; (80056e8 <xTaskIncrementTick+0x14c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f040 808c 	bne.w	80056c8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055b0:	4b4e      	ldr	r3, [pc, #312]	; (80056ec <xTaskIncrementTick+0x150>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3301      	adds	r3, #1
 80055b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055b8:	4a4c      	ldr	r2, [pc, #304]	; (80056ec <xTaskIncrementTick+0x150>)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d11f      	bne.n	8005604 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80055c4:	4b4a      	ldr	r3, [pc, #296]	; (80056f0 <xTaskIncrementTick+0x154>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <xTaskIncrementTick+0x46>
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	e7fe      	b.n	80055e0 <xTaskIncrementTick+0x44>
 80055e2:	4b43      	ldr	r3, [pc, #268]	; (80056f0 <xTaskIncrementTick+0x154>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	4b42      	ldr	r3, [pc, #264]	; (80056f4 <xTaskIncrementTick+0x158>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a40      	ldr	r2, [pc, #256]	; (80056f0 <xTaskIncrementTick+0x154>)
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	4a40      	ldr	r2, [pc, #256]	; (80056f4 <xTaskIncrementTick+0x158>)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	4b40      	ldr	r3, [pc, #256]	; (80056f8 <xTaskIncrementTick+0x15c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3301      	adds	r3, #1
 80055fc:	4a3e      	ldr	r2, [pc, #248]	; (80056f8 <xTaskIncrementTick+0x15c>)
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	f000 fa9c 	bl	8005b3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005604:	4b3d      	ldr	r3, [pc, #244]	; (80056fc <xTaskIncrementTick+0x160>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	429a      	cmp	r2, r3
 800560c:	d34d      	bcc.n	80056aa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800560e:	4b38      	ldr	r3, [pc, #224]	; (80056f0 <xTaskIncrementTick+0x154>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <xTaskIncrementTick+0x80>
 8005618:	2301      	movs	r3, #1
 800561a:	e000      	b.n	800561e <xTaskIncrementTick+0x82>
 800561c:	2300      	movs	r3, #0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005622:	4b36      	ldr	r3, [pc, #216]	; (80056fc <xTaskIncrementTick+0x160>)
 8005624:	f04f 32ff 	mov.w	r2, #4294967295
 8005628:	601a      	str	r2, [r3, #0]
					break;
 800562a:	e03e      	b.n	80056aa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800562c:	4b30      	ldr	r3, [pc, #192]	; (80056f0 <xTaskIncrementTick+0x154>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	429a      	cmp	r2, r3
 8005642:	d203      	bcs.n	800564c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005644:	4a2d      	ldr	r2, [pc, #180]	; (80056fc <xTaskIncrementTick+0x160>)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6013      	str	r3, [r2, #0]
						break;
 800564a:	e02e      	b.n	80056aa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	3304      	adds	r3, #4
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff f966 	bl	8004922 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	2b00      	cmp	r3, #0
 800565c:	d004      	beq.n	8005668 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	3318      	adds	r3, #24
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff f95d 	bl	8004922 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	2201      	movs	r2, #1
 800566e:	409a      	lsls	r2, r3
 8005670:	4b23      	ldr	r3, [pc, #140]	; (8005700 <xTaskIncrementTick+0x164>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4313      	orrs	r3, r2
 8005676:	4a22      	ldr	r2, [pc, #136]	; (8005700 <xTaskIncrementTick+0x164>)
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4a1f      	ldr	r2, [pc, #124]	; (8005704 <xTaskIncrementTick+0x168>)
 8005688:	441a      	add	r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	3304      	adds	r3, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f7ff f8eb 	bl	800486c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569a:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <xTaskIncrementTick+0x16c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d3b4      	bcc.n	800560e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80056a4:	2301      	movs	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056a8:	e7b1      	b.n	800560e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056aa:	4b17      	ldr	r3, [pc, #92]	; (8005708 <xTaskIncrementTick+0x16c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b0:	4914      	ldr	r1, [pc, #80]	; (8005704 <xTaskIncrementTick+0x168>)
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d907      	bls.n	80056d2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80056c2:	2301      	movs	r3, #1
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	e004      	b.n	80056d2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80056c8:	4b10      	ldr	r3, [pc, #64]	; (800570c <xTaskIncrementTick+0x170>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	4a0f      	ldr	r2, [pc, #60]	; (800570c <xTaskIncrementTick+0x170>)
 80056d0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80056d2:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <xTaskIncrementTick+0x174>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80056da:	2301      	movs	r3, #1
 80056dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80056de:	697b      	ldr	r3, [r7, #20]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	2000043c 	.word	0x2000043c
 80056ec:	20000418 	.word	0x20000418
 80056f0:	200003cc 	.word	0x200003cc
 80056f4:	200003d0 	.word	0x200003d0
 80056f8:	2000042c 	.word	0x2000042c
 80056fc:	20000434 	.word	0x20000434
 8005700:	2000041c 	.word	0x2000041c
 8005704:	20000318 	.word	0x20000318
 8005708:	20000314 	.word	0x20000314
 800570c:	20000424 	.word	0x20000424
 8005710:	20000428 	.word	0x20000428

08005714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800571a:	4b26      	ldr	r3, [pc, #152]	; (80057b4 <vTaskSwitchContext+0xa0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005722:	4b25      	ldr	r3, [pc, #148]	; (80057b8 <vTaskSwitchContext+0xa4>)
 8005724:	2201      	movs	r2, #1
 8005726:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005728:	e03e      	b.n	80057a8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800572a:	4b23      	ldr	r3, [pc, #140]	; (80057b8 <vTaskSwitchContext+0xa4>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005730:	4b22      	ldr	r3, [pc, #136]	; (80057bc <vTaskSwitchContext+0xa8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	fab3 f383 	clz	r3, r3
 800573c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800573e:	7afb      	ldrb	r3, [r7, #11]
 8005740:	f1c3 031f 	rsb	r3, r3, #31
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	491e      	ldr	r1, [pc, #120]	; (80057c0 <vTaskSwitchContext+0xac>)
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	440b      	add	r3, r1
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <vTaskSwitchContext+0x5a>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	607b      	str	r3, [r7, #4]
 800576c:	e7fe      	b.n	800576c <vTaskSwitchContext+0x58>
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4a11      	ldr	r2, [pc, #68]	; (80057c0 <vTaskSwitchContext+0xac>)
 800577a:	4413      	add	r3, r2
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	605a      	str	r2, [r3, #4]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	3308      	adds	r3, #8
 8005790:	429a      	cmp	r2, r3
 8005792:	d104      	bne.n	800579e <vTaskSwitchContext+0x8a>
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4a07      	ldr	r2, [pc, #28]	; (80057c4 <vTaskSwitchContext+0xb0>)
 80057a6:	6013      	str	r3, [r2, #0]
}
 80057a8:	bf00      	nop
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	2000043c 	.word	0x2000043c
 80057b8:	20000428 	.word	0x20000428
 80057bc:	2000041c 	.word	0x2000041c
 80057c0:	20000318 	.word	0x20000318
 80057c4:	20000314 	.word	0x20000314

080057c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d109      	bne.n	80057ec <vTaskPlaceOnEventList+0x24>
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	e7fe      	b.n	80057ea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057ec:	4b07      	ldr	r3, [pc, #28]	; (800580c <vTaskPlaceOnEventList+0x44>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3318      	adds	r3, #24
 80057f2:	4619      	mov	r1, r3
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff f85c 	bl	80048b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057fa:	2101      	movs	r1, #1
 80057fc:	6838      	ldr	r0, [r7, #0]
 80057fe:	f000 fa63 	bl	8005cc8 <prvAddCurrentTaskToDelayedList>
}
 8005802:	bf00      	nop
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20000314 	.word	0x20000314

08005810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <xTaskRemoveFromEventList+0x2a>
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	e7fe      	b.n	8005838 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	3318      	adds	r3, #24
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff f86f 	bl	8004922 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005844:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <xTaskRemoveFromEventList+0xac>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d11c      	bne.n	8005886 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	3304      	adds	r3, #4
 8005850:	4618      	mov	r0, r3
 8005852:	f7ff f866 	bl	8004922 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	2201      	movs	r2, #1
 800585c:	409a      	lsls	r2, r3
 800585e:	4b18      	ldr	r3, [pc, #96]	; (80058c0 <xTaskRemoveFromEventList+0xb0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4313      	orrs	r3, r2
 8005864:	4a16      	ldr	r2, [pc, #88]	; (80058c0 <xTaskRemoveFromEventList+0xb0>)
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <xTaskRemoveFromEventList+0xb4>)
 8005876:	441a      	add	r2, r3
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	3304      	adds	r3, #4
 800587c:	4619      	mov	r1, r3
 800587e:	4610      	mov	r0, r2
 8005880:	f7fe fff4 	bl	800486c <vListInsertEnd>
 8005884:	e005      	b.n	8005892 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	3318      	adds	r3, #24
 800588a:	4619      	mov	r1, r3
 800588c:	480e      	ldr	r0, [pc, #56]	; (80058c8 <xTaskRemoveFromEventList+0xb8>)
 800588e:	f7fe ffed 	bl	800486c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005896:	4b0d      	ldr	r3, [pc, #52]	; (80058cc <xTaskRemoveFromEventList+0xbc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	429a      	cmp	r2, r3
 800589e:	d905      	bls.n	80058ac <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058a4:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <xTaskRemoveFromEventList+0xc0>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e001      	b.n	80058b0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80058ac:	2300      	movs	r3, #0
 80058ae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80058b0:	697b      	ldr	r3, [r7, #20]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	2000043c 	.word	0x2000043c
 80058c0:	2000041c 	.word	0x2000041c
 80058c4:	20000318 	.word	0x20000318
 80058c8:	200003d4 	.word	0x200003d4
 80058cc:	20000314 	.word	0x20000314
 80058d0:	20000428 	.word	0x20000428

080058d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <vTaskInternalSetTimeOutState+0x24>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058e4:	4b05      	ldr	r3, [pc, #20]	; (80058fc <vTaskInternalSetTimeOutState+0x28>)
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	605a      	str	r2, [r3, #4]
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bc80      	pop	{r7}
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	2000042c 	.word	0x2000042c
 80058fc:	20000418 	.word	0x20000418

08005900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d109      	bne.n	8005924 <xTaskCheckForTimeOut+0x24>
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	e7fe      	b.n	8005922 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <xTaskCheckForTimeOut+0x3e>
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e7fe      	b.n	800593c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800593e:	f000 fb13 	bl	8005f68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005942:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <xTaskCheckForTimeOut+0xb8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595a:	d102      	bne.n	8005962 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800595c:	2300      	movs	r3, #0
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	e023      	b.n	80059aa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b15      	ldr	r3, [pc, #84]	; (80059bc <xTaskCheckForTimeOut+0xbc>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d007      	beq.n	800597e <xTaskCheckForTimeOut+0x7e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	429a      	cmp	r2, r3
 8005976:	d302      	bcc.n	800597e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005978:	2301      	movs	r3, #1
 800597a:	61fb      	str	r3, [r7, #28]
 800597c:	e015      	b.n	80059aa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	429a      	cmp	r2, r3
 8005986:	d20b      	bcs.n	80059a0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	1ad2      	subs	r2, r2, r3
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ff9d 	bl	80058d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
 800599e:	e004      	b.n	80059aa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059a6:	2301      	movs	r3, #1
 80059a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059aa:	f000 fb0b 	bl	8005fc4 <vPortExitCritical>

	return xReturn;
 80059ae:	69fb      	ldr	r3, [r7, #28]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000418 	.word	0x20000418
 80059bc:	2000042c 	.word	0x2000042c

080059c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059c4:	4b03      	ldr	r3, [pc, #12]	; (80059d4 <vTaskMissedYield+0x14>)
 80059c6:	2201      	movs	r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
}
 80059ca:	bf00      	nop
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20000428 	.word	0x20000428

080059d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059e0:	f000 f852 	bl	8005a88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059e4:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <prvIdleTask+0x28>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d9f9      	bls.n	80059e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <prvIdleTask+0x2c>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059fc:	e7f0      	b.n	80059e0 <prvIdleTask+0x8>
 80059fe:	bf00      	nop
 8005a00:	20000318 	.word	0x20000318
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a0e:	2300      	movs	r3, #0
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	e00c      	b.n	8005a2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4a12      	ldr	r2, [pc, #72]	; (8005a68 <prvInitialiseTaskLists+0x60>)
 8005a20:	4413      	add	r3, r2
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe fef7 	bl	8004816 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	607b      	str	r3, [r7, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b06      	cmp	r3, #6
 8005a32:	d9ef      	bls.n	8005a14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a34:	480d      	ldr	r0, [pc, #52]	; (8005a6c <prvInitialiseTaskLists+0x64>)
 8005a36:	f7fe feee 	bl	8004816 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a3a:	480d      	ldr	r0, [pc, #52]	; (8005a70 <prvInitialiseTaskLists+0x68>)
 8005a3c:	f7fe feeb 	bl	8004816 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a40:	480c      	ldr	r0, [pc, #48]	; (8005a74 <prvInitialiseTaskLists+0x6c>)
 8005a42:	f7fe fee8 	bl	8004816 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a46:	480c      	ldr	r0, [pc, #48]	; (8005a78 <prvInitialiseTaskLists+0x70>)
 8005a48:	f7fe fee5 	bl	8004816 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a4c:	480b      	ldr	r0, [pc, #44]	; (8005a7c <prvInitialiseTaskLists+0x74>)
 8005a4e:	f7fe fee2 	bl	8004816 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a52:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <prvInitialiseTaskLists+0x78>)
 8005a54:	4a05      	ldr	r2, [pc, #20]	; (8005a6c <prvInitialiseTaskLists+0x64>)
 8005a56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <prvInitialiseTaskLists+0x7c>)
 8005a5a:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <prvInitialiseTaskLists+0x68>)
 8005a5c:	601a      	str	r2, [r3, #0]
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000318 	.word	0x20000318
 8005a6c:	200003a4 	.word	0x200003a4
 8005a70:	200003b8 	.word	0x200003b8
 8005a74:	200003d4 	.word	0x200003d4
 8005a78:	200003e8 	.word	0x200003e8
 8005a7c:	20000400 	.word	0x20000400
 8005a80:	200003cc 	.word	0x200003cc
 8005a84:	200003d0 	.word	0x200003d0

08005a88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a8e:	e019      	b.n	8005ac4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a90:	f000 fa6a 	bl	8005f68 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a94:	4b0f      	ldr	r3, [pc, #60]	; (8005ad4 <prvCheckTasksWaitingTermination+0x4c>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe ff3e 	bl	8004922 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <prvCheckTasksWaitingTermination+0x50>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	4a0a      	ldr	r2, [pc, #40]	; (8005ad8 <prvCheckTasksWaitingTermination+0x50>)
 8005aae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <prvCheckTasksWaitingTermination+0x54>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	4a09      	ldr	r2, [pc, #36]	; (8005adc <prvCheckTasksWaitingTermination+0x54>)
 8005ab8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005aba:	f000 fa83 	bl	8005fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f80e 	bl	8005ae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <prvCheckTasksWaitingTermination+0x54>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e1      	bne.n	8005a90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	200003e8 	.word	0x200003e8
 8005ad8:	20000414 	.word	0x20000414
 8005adc:	200003fc 	.word	0x200003fc

08005ae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d108      	bne.n	8005b04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fbb2 	bl	8006260 <vPortFree>
				vPortFree( pxTCB );
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fbaf 	bl	8006260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b02:	e017      	b.n	8005b34 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d103      	bne.n	8005b16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fba6 	bl	8006260 <vPortFree>
	}
 8005b14:	e00e      	b.n	8005b34 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d009      	beq.n	8005b34 <prvDeleteTCB+0x54>
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e7fe      	b.n	8005b32 <prvDeleteTCB+0x52>
	}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b42:	4b0e      	ldr	r3, [pc, #56]	; (8005b7c <prvResetNextTaskUnblockTime+0x40>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <prvResetNextTaskUnblockTime+0x14>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <prvResetNextTaskUnblockTime+0x16>
 8005b50:	2300      	movs	r3, #0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d004      	beq.n	8005b60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b56:	4b0a      	ldr	r3, [pc, #40]	; (8005b80 <prvResetNextTaskUnblockTime+0x44>)
 8005b58:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b5e:	e008      	b.n	8005b72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b60:	4b06      	ldr	r3, [pc, #24]	; (8005b7c <prvResetNextTaskUnblockTime+0x40>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	4a04      	ldr	r2, [pc, #16]	; (8005b80 <prvResetNextTaskUnblockTime+0x44>)
 8005b70:	6013      	str	r3, [r2, #0]
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr
 8005b7c:	200003cc 	.word	0x200003cc
 8005b80:	20000434 	.word	0x20000434

08005b84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	; (8005bb8 <xTaskGetSchedulerState+0x34>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d102      	bne.n	8005b98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b92:	2301      	movs	r3, #1
 8005b94:	607b      	str	r3, [r7, #4]
 8005b96:	e008      	b.n	8005baa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b98:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <xTaskGetSchedulerState+0x38>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d102      	bne.n	8005ba6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	607b      	str	r3, [r7, #4]
 8005ba4:	e001      	b.n	8005baa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005baa:	687b      	ldr	r3, [r7, #4]
	}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	20000420 	.word	0x20000420
 8005bbc:	2000043c 	.word	0x2000043c

08005bc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d06c      	beq.n	8005cb0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005bd6:	4b39      	ldr	r3, [pc, #228]	; (8005cbc <xTaskPriorityDisinherit+0xfc>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d009      	beq.n	8005bf4 <xTaskPriorityDisinherit+0x34>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	e7fe      	b.n	8005bf2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <xTaskPriorityDisinherit+0x50>
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	e7fe      	b.n	8005c0e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c14:	1e5a      	subs	r2, r3, #1
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d044      	beq.n	8005cb0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d140      	bne.n	8005cb0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	3304      	adds	r3, #4
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe fe75 	bl	8004922 <uxListRemove>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d115      	bne.n	8005c6a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c42:	491f      	ldr	r1, [pc, #124]	; (8005cc0 <xTaskPriorityDisinherit+0x100>)
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <xTaskPriorityDisinherit+0xaa>
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	2201      	movs	r2, #1
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	43da      	mvns	r2, r3
 8005c60:	4b18      	ldr	r3, [pc, #96]	; (8005cc4 <xTaskPriorityDisinherit+0x104>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4013      	ands	r3, r2
 8005c66:	4a17      	ldr	r2, [pc, #92]	; (8005cc4 <xTaskPriorityDisinherit+0x104>)
 8005c68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c76:	f1c3 0207 	rsb	r2, r3, #7
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	2201      	movs	r2, #1
 8005c84:	409a      	lsls	r2, r3
 8005c86:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <xTaskPriorityDisinherit+0x104>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	4a0d      	ldr	r2, [pc, #52]	; (8005cc4 <xTaskPriorityDisinherit+0x104>)
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4a08      	ldr	r2, [pc, #32]	; (8005cc0 <xTaskPriorityDisinherit+0x100>)
 8005c9e:	441a      	add	r2, r3
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	f7fe fde0 	bl	800486c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cac:	2301      	movs	r3, #1
 8005cae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cb0:	697b      	ldr	r3, [r7, #20]
	}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000314 	.word	0x20000314
 8005cc0:	20000318 	.word	0x20000318
 8005cc4:	2000041c 	.word	0x2000041c

08005cc8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005cd2:	4b29      	ldr	r3, [pc, #164]	; (8005d78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cd8:	4b28      	ldr	r3, [pc, #160]	; (8005d7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe fe1f 	bl	8004922 <uxListRemove>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005cea:	4b24      	ldr	r3, [pc, #144]	; (8005d7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	43da      	mvns	r2, r3
 8005cf8:	4b21      	ldr	r3, [pc, #132]	; (8005d80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	4a20      	ldr	r2, [pc, #128]	; (8005d80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d08:	d10a      	bne.n	8005d20 <prvAddCurrentTaskToDelayedList+0x58>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d10:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3304      	adds	r3, #4
 8005d16:	4619      	mov	r1, r3
 8005d18:	481a      	ldr	r0, [pc, #104]	; (8005d84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d1a:	f7fe fda7 	bl	800486c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d1e:	e026      	b.n	8005d6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4413      	add	r3, r2
 8005d26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d28:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d209      	bcs.n	8005d4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d38:	4b13      	ldr	r3, [pc, #76]	; (8005d88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4619      	mov	r1, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	f7fe fdb4 	bl	80048b2 <vListInsert>
}
 8005d4a:	e010      	b.n	8005d6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d4c:	4b0f      	ldr	r3, [pc, #60]	; (8005d8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	4b0a      	ldr	r3, [pc, #40]	; (8005d7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4619      	mov	r1, r3
 8005d58:	4610      	mov	r0, r2
 8005d5a:	f7fe fdaa 	bl	80048b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d5e:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d202      	bcs.n	8005d6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d68:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6013      	str	r3, [r2, #0]
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000418 	.word	0x20000418
 8005d7c:	20000314 	.word	0x20000314
 8005d80:	2000041c 	.word	0x2000041c
 8005d84:	20000400 	.word	0x20000400
 8005d88:	200003d0 	.word	0x200003d0
 8005d8c:	200003cc 	.word	0x200003cc
 8005d90:	20000434 	.word	0x20000434

08005d94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3b04      	subs	r3, #4
 8005da4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3b04      	subs	r3, #4
 8005db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f023 0201 	bic.w	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3b04      	subs	r3, #4
 8005dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005dc4:	4a08      	ldr	r2, [pc, #32]	; (8005de8 <pxPortInitialiseStack+0x54>)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3b14      	subs	r3, #20
 8005dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3b20      	subs	r3, #32
 8005dda:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bc80      	pop	{r7}
 8005de6:	4770      	bx	lr
 8005de8:	08005ded 	.word	0x08005ded

08005dec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005df6:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <prvTaskExitError+0x4c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d009      	beq.n	8005e14 <prvTaskExitError+0x28>
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	e7fe      	b.n	8005e12 <prvTaskExitError+0x26>
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e26:	bf00      	nop
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0fc      	beq.n	8005e28 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e2e:	bf00      	nop
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr
 8005e38:	2000000c 	.word	0x2000000c
 8005e3c:	00000000 	.word	0x00000000

08005e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e40:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <pxCurrentTCBConst2>)
 8005e42:	6819      	ldr	r1, [r3, #0]
 8005e44:	6808      	ldr	r0, [r1, #0]
 8005e46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e4a:	f380 8809 	msr	PSP, r0
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f04f 0000 	mov.w	r0, #0
 8005e56:	f380 8811 	msr	BASEPRI, r0
 8005e5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005e5e:	4770      	bx	lr

08005e60 <pxCurrentTCBConst2>:
 8005e60:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop

08005e68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005e68:	4806      	ldr	r0, [pc, #24]	; (8005e84 <prvPortStartFirstTask+0x1c>)
 8005e6a:	6800      	ldr	r0, [r0, #0]
 8005e6c:	6800      	ldr	r0, [r0, #0]
 8005e6e:	f380 8808 	msr	MSP, r0
 8005e72:	b662      	cpsie	i
 8005e74:	b661      	cpsie	f
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	df00      	svc	0
 8005e80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e82:	bf00      	nop
 8005e84:	e000ed08 	.word	0xe000ed08

08005e88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e8e:	4b31      	ldr	r3, [pc, #196]	; (8005f54 <xPortStartScheduler+0xcc>)
 8005e90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	22ff      	movs	r2, #255	; 0xff
 8005e9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ea8:	78fb      	ldrb	r3, [r7, #3]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	4b29      	ldr	r3, [pc, #164]	; (8005f58 <xPortStartScheduler+0xd0>)
 8005eb4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005eb6:	4b29      	ldr	r3, [pc, #164]	; (8005f5c <xPortStartScheduler+0xd4>)
 8005eb8:	2207      	movs	r2, #7
 8005eba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ebc:	e009      	b.n	8005ed2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005ebe:	4b27      	ldr	r3, [pc, #156]	; (8005f5c <xPortStartScheduler+0xd4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	4a25      	ldr	r2, [pc, #148]	; (8005f5c <xPortStartScheduler+0xd4>)
 8005ec6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	2b80      	cmp	r3, #128	; 0x80
 8005edc:	d0ef      	beq.n	8005ebe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ede:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <xPortStartScheduler+0xd4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f1c3 0307 	rsb	r3, r3, #7
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d009      	beq.n	8005efe <xPortStartScheduler+0x76>
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	60bb      	str	r3, [r7, #8]
 8005efc:	e7fe      	b.n	8005efc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005efe:	4b17      	ldr	r3, [pc, #92]	; (8005f5c <xPortStartScheduler+0xd4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <xPortStartScheduler+0xd4>)
 8005f06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f08:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <xPortStartScheduler+0xd4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f10:	4a12      	ldr	r2, [pc, #72]	; (8005f5c <xPortStartScheduler+0xd4>)
 8005f12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f1c:	4b10      	ldr	r3, [pc, #64]	; (8005f60 <xPortStartScheduler+0xd8>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0f      	ldr	r2, [pc, #60]	; (8005f60 <xPortStartScheduler+0xd8>)
 8005f22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f28:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <xPortStartScheduler+0xd8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a0c      	ldr	r2, [pc, #48]	; (8005f60 <xPortStartScheduler+0xd8>)
 8005f2e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f34:	f000 f8b0 	bl	8006098 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <xPortStartScheduler+0xdc>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f3e:	f7ff ff93 	bl	8005e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f42:	f7ff fbe7 	bl	8005714 <vTaskSwitchContext>
	prvTaskExitError();
 8005f46:	f7ff ff51 	bl	8005dec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	e000e400 	.word	0xe000e400
 8005f58:	20000440 	.word	0x20000440
 8005f5c:	20000444 	.word	0x20000444
 8005f60:	e000ed20 	.word	0xe000ed20
 8005f64:	2000000c 	.word	0x2000000c

08005f68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <vPortEnterCritical+0x54>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	3301      	adds	r3, #1
 8005f86:	4a0d      	ldr	r2, [pc, #52]	; (8005fbc <vPortEnterCritical+0x54>)
 8005f88:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f8a:	4b0c      	ldr	r3, [pc, #48]	; (8005fbc <vPortEnterCritical+0x54>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d10e      	bne.n	8005fb0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f92:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <vPortEnterCritical+0x58>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d009      	beq.n	8005fb0 <vPortEnterCritical+0x48>
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	603b      	str	r3, [r7, #0]
 8005fae:	e7fe      	b.n	8005fae <vPortEnterCritical+0x46>
	}
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	2000000c 	.word	0x2000000c
 8005fc0:	e000ed04 	.word	0xe000ed04

08005fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005fca:	4b10      	ldr	r3, [pc, #64]	; (800600c <vPortExitCritical+0x48>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d109      	bne.n	8005fe6 <vPortExitCritical+0x22>
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	607b      	str	r3, [r7, #4]
 8005fe4:	e7fe      	b.n	8005fe4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005fe6:	4b09      	ldr	r3, [pc, #36]	; (800600c <vPortExitCritical+0x48>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	4a07      	ldr	r2, [pc, #28]	; (800600c <vPortExitCritical+0x48>)
 8005fee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ff0:	4b06      	ldr	r3, [pc, #24]	; (800600c <vPortExitCritical+0x48>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <vPortExitCritical+0x3e>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	bc80      	pop	{r7}
 800600a:	4770      	bx	lr
 800600c:	2000000c 	.word	0x2000000c

08006010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006010:	f3ef 8009 	mrs	r0, PSP
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <pxCurrentTCBConst>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006020:	6010      	str	r0, [r2, #0]
 8006022:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006026:	f04f 0050 	mov.w	r0, #80	; 0x50
 800602a:	f380 8811 	msr	BASEPRI, r0
 800602e:	f7ff fb71 	bl	8005714 <vTaskSwitchContext>
 8006032:	f04f 0000 	mov.w	r0, #0
 8006036:	f380 8811 	msr	BASEPRI, r0
 800603a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800603e:	6819      	ldr	r1, [r3, #0]
 8006040:	6808      	ldr	r0, [r1, #0]
 8006042:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006046:	f380 8809 	msr	PSP, r0
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	4770      	bx	lr

08006050 <pxCurrentTCBConst>:
 8006050:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop

08006058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006070:	f7ff fa94 	bl	800559c <xTaskIncrementTick>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800607a:	4b06      	ldr	r3, [pc, #24]	; (8006094 <SysTick_Handler+0x3c>)
 800607c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	2300      	movs	r3, #0
 8006084:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800609c:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <vPortSetupTimerInterrupt+0x30>)
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060a2:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <vPortSetupTimerInterrupt+0x34>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060a8:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <vPortSetupTimerInterrupt+0x38>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <vPortSetupTimerInterrupt+0x3c>)
 80060ae:	fba2 2303 	umull	r2, r3, r2, r3
 80060b2:	099b      	lsrs	r3, r3, #6
 80060b4:	4a08      	ldr	r2, [pc, #32]	; (80060d8 <vPortSetupTimerInterrupt+0x40>)
 80060b6:	3b01      	subs	r3, #1
 80060b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060ba:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <vPortSetupTimerInterrupt+0x30>)
 80060bc:	2207      	movs	r2, #7
 80060be:	601a      	str	r2, [r3, #0]
}
 80060c0:	bf00      	nop
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr
 80060c8:	e000e010 	.word	0xe000e010
 80060cc:	e000e018 	.word	0xe000e018
 80060d0:	20000000 	.word	0x20000000
 80060d4:	10624dd3 	.word	0x10624dd3
 80060d8:	e000e014 	.word	0xe000e014

080060dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	; 0x28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060e8:	f7ff f9ae 	bl	8005448 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060ec:	4b57      	ldr	r3, [pc, #348]	; (800624c <pvPortMalloc+0x170>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060f4:	f000 f90c 	bl	8006310 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060f8:	4b55      	ldr	r3, [pc, #340]	; (8006250 <pvPortMalloc+0x174>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4013      	ands	r3, r2
 8006100:	2b00      	cmp	r3, #0
 8006102:	f040 808c 	bne.w	800621e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01c      	beq.n	8006146 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800610c:	2208      	movs	r2, #8
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4413      	add	r3, r2
 8006112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	2b00      	cmp	r3, #0
 800611c:	d013      	beq.n	8006146 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f023 0307 	bic.w	r3, r3, #7
 8006124:	3308      	adds	r3, #8
 8006126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <pvPortMalloc+0x6a>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	e7fe      	b.n	8006144 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d068      	beq.n	800621e <pvPortMalloc+0x142>
 800614c:	4b41      	ldr	r3, [pc, #260]	; (8006254 <pvPortMalloc+0x178>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	429a      	cmp	r2, r3
 8006154:	d863      	bhi.n	800621e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006156:	4b40      	ldr	r3, [pc, #256]	; (8006258 <pvPortMalloc+0x17c>)
 8006158:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800615a:	4b3f      	ldr	r3, [pc, #252]	; (8006258 <pvPortMalloc+0x17c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006160:	e004      	b.n	800616c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	429a      	cmp	r2, r3
 8006174:	d903      	bls.n	800617e <pvPortMalloc+0xa2>
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1f1      	bne.n	8006162 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800617e:	4b33      	ldr	r3, [pc, #204]	; (800624c <pvPortMalloc+0x170>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006184:	429a      	cmp	r2, r3
 8006186:	d04a      	beq.n	800621e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2208      	movs	r2, #8
 800618e:	4413      	add	r3, r2
 8006190:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	1ad2      	subs	r2, r2, r3
 80061a2:	2308      	movs	r3, #8
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d91e      	bls.n	80061e8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4413      	add	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d009      	beq.n	80061d0 <pvPortMalloc+0xf4>
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	e7fe      	b.n	80061ce <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	1ad2      	subs	r2, r2, r3
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061e2:	69b8      	ldr	r0, [r7, #24]
 80061e4:	f000 f8f6 	bl	80063d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061e8:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <pvPortMalloc+0x178>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	4a18      	ldr	r2, [pc, #96]	; (8006254 <pvPortMalloc+0x178>)
 80061f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061f6:	4b17      	ldr	r3, [pc, #92]	; (8006254 <pvPortMalloc+0x178>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b18      	ldr	r3, [pc, #96]	; (800625c <pvPortMalloc+0x180>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d203      	bcs.n	800620a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006202:	4b14      	ldr	r3, [pc, #80]	; (8006254 <pvPortMalloc+0x178>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a15      	ldr	r2, [pc, #84]	; (800625c <pvPortMalloc+0x180>)
 8006208:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	4b10      	ldr	r3, [pc, #64]	; (8006250 <pvPortMalloc+0x174>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	431a      	orrs	r2, r3
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800621e:	f7ff f921 	bl	8005464 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	2b00      	cmp	r3, #0
 800622a:	d009      	beq.n	8006240 <pvPortMalloc+0x164>
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	e7fe      	b.n	800623e <pvPortMalloc+0x162>
	return pvReturn;
 8006240:	69fb      	ldr	r3, [r7, #28]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3728      	adds	r7, #40	; 0x28
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20001050 	.word	0x20001050
 8006250:	2000105c 	.word	0x2000105c
 8006254:	20001054 	.word	0x20001054
 8006258:	20001048 	.word	0x20001048
 800625c:	20001058 	.word	0x20001058

08006260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d046      	beq.n	8006300 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006272:	2308      	movs	r3, #8
 8006274:	425b      	negs	r3, r3
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	4413      	add	r3, r2
 800627a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	4b20      	ldr	r3, [pc, #128]	; (8006308 <vPortFree+0xa8>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4013      	ands	r3, r2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <vPortFree+0x42>
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	e7fe      	b.n	80062a0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d009      	beq.n	80062be <vPortFree+0x5e>
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	60bb      	str	r3, [r7, #8]
 80062bc:	e7fe      	b.n	80062bc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	4b11      	ldr	r3, [pc, #68]	; (8006308 <vPortFree+0xa8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4013      	ands	r3, r2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d019      	beq.n	8006300 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d115      	bne.n	8006300 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <vPortFree+0xa8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	43db      	mvns	r3, r3
 80062de:	401a      	ands	r2, r3
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062e4:	f7ff f8b0 	bl	8005448 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	4b07      	ldr	r3, [pc, #28]	; (800630c <vPortFree+0xac>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4413      	add	r3, r2
 80062f2:	4a06      	ldr	r2, [pc, #24]	; (800630c <vPortFree+0xac>)
 80062f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062f6:	6938      	ldr	r0, [r7, #16]
 80062f8:	f000 f86c 	bl	80063d4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80062fc:	f7ff f8b2 	bl	8005464 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006300:	bf00      	nop
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	2000105c 	.word	0x2000105c
 800630c:	20001054 	.word	0x20001054

08006310 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006316:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800631a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800631c:	4b27      	ldr	r3, [pc, #156]	; (80063bc <prvHeapInit+0xac>)
 800631e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 0307 	and.w	r3, r3, #7
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00c      	beq.n	8006344 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3307      	adds	r3, #7
 800632e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0307 	bic.w	r3, r3, #7
 8006336:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	4a1f      	ldr	r2, [pc, #124]	; (80063bc <prvHeapInit+0xac>)
 8006340:	4413      	add	r3, r2
 8006342:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006348:	4a1d      	ldr	r2, [pc, #116]	; (80063c0 <prvHeapInit+0xb0>)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800634e:	4b1c      	ldr	r3, [pc, #112]	; (80063c0 <prvHeapInit+0xb0>)
 8006350:	2200      	movs	r2, #0
 8006352:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	4413      	add	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800635c:	2208      	movs	r2, #8
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	1a9b      	subs	r3, r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0307 	bic.w	r3, r3, #7
 800636a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <prvHeapInit+0xb4>)
 8006370:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006372:	4b14      	ldr	r3, [pc, #80]	; (80063c4 <prvHeapInit+0xb4>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2200      	movs	r2, #0
 8006378:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800637a:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <prvHeapInit+0xb4>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	1ad2      	subs	r2, r2, r3
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006390:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <prvHeapInit+0xb4>)
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	4a0a      	ldr	r2, [pc, #40]	; (80063c8 <prvHeapInit+0xb8>)
 800639e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4a09      	ldr	r2, [pc, #36]	; (80063cc <prvHeapInit+0xbc>)
 80063a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063a8:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <prvHeapInit+0xc0>)
 80063aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80063ae:	601a      	str	r2, [r3, #0]
}
 80063b0:	bf00      	nop
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20000448 	.word	0x20000448
 80063c0:	20001048 	.word	0x20001048
 80063c4:	20001050 	.word	0x20001050
 80063c8:	20001058 	.word	0x20001058
 80063cc:	20001054 	.word	0x20001054
 80063d0:	2000105c 	.word	0x2000105c

080063d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063dc:	4b27      	ldr	r3, [pc, #156]	; (800647c <prvInsertBlockIntoFreeList+0xa8>)
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	e002      	b.n	80063e8 <prvInsertBlockIntoFreeList+0x14>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d8f7      	bhi.n	80063e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	4413      	add	r3, r2
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d108      	bne.n	8006416 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	441a      	add	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	441a      	add	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d118      	bne.n	800645c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	4b14      	ldr	r3, [pc, #80]	; (8006480 <prvInsertBlockIntoFreeList+0xac>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d00d      	beq.n	8006452 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	441a      	add	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e008      	b.n	8006464 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006452:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <prvInsertBlockIntoFreeList+0xac>)
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	e003      	b.n	8006464 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	d002      	beq.n	8006472 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr
 800647c:	20001048 	.word	0x20001048
 8006480:	20001050 	.word	0x20001050

08006484 <__errno>:
 8006484:	4b01      	ldr	r3, [pc, #4]	; (800648c <__errno+0x8>)
 8006486:	6818      	ldr	r0, [r3, #0]
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	20000010 	.word	0x20000010

08006490 <__libc_init_array>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	2500      	movs	r5, #0
 8006494:	4e0c      	ldr	r6, [pc, #48]	; (80064c8 <__libc_init_array+0x38>)
 8006496:	4c0d      	ldr	r4, [pc, #52]	; (80064cc <__libc_init_array+0x3c>)
 8006498:	1ba4      	subs	r4, r4, r6
 800649a:	10a4      	asrs	r4, r4, #2
 800649c:	42a5      	cmp	r5, r4
 800649e:	d109      	bne.n	80064b4 <__libc_init_array+0x24>
 80064a0:	f000 ff80 	bl	80073a4 <_init>
 80064a4:	2500      	movs	r5, #0
 80064a6:	4e0a      	ldr	r6, [pc, #40]	; (80064d0 <__libc_init_array+0x40>)
 80064a8:	4c0a      	ldr	r4, [pc, #40]	; (80064d4 <__libc_init_array+0x44>)
 80064aa:	1ba4      	subs	r4, r4, r6
 80064ac:	10a4      	asrs	r4, r4, #2
 80064ae:	42a5      	cmp	r5, r4
 80064b0:	d105      	bne.n	80064be <__libc_init_array+0x2e>
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
 80064b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064b8:	4798      	blx	r3
 80064ba:	3501      	adds	r5, #1
 80064bc:	e7ee      	b.n	800649c <__libc_init_array+0xc>
 80064be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064c2:	4798      	blx	r3
 80064c4:	3501      	adds	r5, #1
 80064c6:	e7f2      	b.n	80064ae <__libc_init_array+0x1e>
 80064c8:	08007578 	.word	0x08007578
 80064cc:	08007578 	.word	0x08007578
 80064d0:	08007578 	.word	0x08007578
 80064d4:	0800757c 	.word	0x0800757c

080064d8 <memcpy>:
 80064d8:	b510      	push	{r4, lr}
 80064da:	1e43      	subs	r3, r0, #1
 80064dc:	440a      	add	r2, r1
 80064de:	4291      	cmp	r1, r2
 80064e0:	d100      	bne.n	80064e4 <memcpy+0xc>
 80064e2:	bd10      	pop	{r4, pc}
 80064e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ec:	e7f7      	b.n	80064de <memcpy+0x6>

080064ee <memset>:
 80064ee:	4603      	mov	r3, r0
 80064f0:	4402      	add	r2, r0
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d100      	bne.n	80064f8 <memset+0xa>
 80064f6:	4770      	bx	lr
 80064f8:	f803 1b01 	strb.w	r1, [r3], #1
 80064fc:	e7f9      	b.n	80064f2 <memset+0x4>
	...

08006500 <iprintf>:
 8006500:	b40f      	push	{r0, r1, r2, r3}
 8006502:	4b0a      	ldr	r3, [pc, #40]	; (800652c <iprintf+0x2c>)
 8006504:	b513      	push	{r0, r1, r4, lr}
 8006506:	681c      	ldr	r4, [r3, #0]
 8006508:	b124      	cbz	r4, 8006514 <iprintf+0x14>
 800650a:	69a3      	ldr	r3, [r4, #24]
 800650c:	b913      	cbnz	r3, 8006514 <iprintf+0x14>
 800650e:	4620      	mov	r0, r4
 8006510:	f000 fa22 	bl	8006958 <__sinit>
 8006514:	ab05      	add	r3, sp, #20
 8006516:	9a04      	ldr	r2, [sp, #16]
 8006518:	68a1      	ldr	r1, [r4, #8]
 800651a:	4620      	mov	r0, r4
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	f000 fbd7 	bl	8006cd0 <_vfiprintf_r>
 8006522:	b002      	add	sp, #8
 8006524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006528:	b004      	add	sp, #16
 800652a:	4770      	bx	lr
 800652c:	20000010 	.word	0x20000010

08006530 <_puts_r>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	460e      	mov	r6, r1
 8006534:	4605      	mov	r5, r0
 8006536:	b118      	cbz	r0, 8006540 <_puts_r+0x10>
 8006538:	6983      	ldr	r3, [r0, #24]
 800653a:	b90b      	cbnz	r3, 8006540 <_puts_r+0x10>
 800653c:	f000 fa0c 	bl	8006958 <__sinit>
 8006540:	69ab      	ldr	r3, [r5, #24]
 8006542:	68ac      	ldr	r4, [r5, #8]
 8006544:	b913      	cbnz	r3, 800654c <_puts_r+0x1c>
 8006546:	4628      	mov	r0, r5
 8006548:	f000 fa06 	bl	8006958 <__sinit>
 800654c:	4b23      	ldr	r3, [pc, #140]	; (80065dc <_puts_r+0xac>)
 800654e:	429c      	cmp	r4, r3
 8006550:	d117      	bne.n	8006582 <_puts_r+0x52>
 8006552:	686c      	ldr	r4, [r5, #4]
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	071b      	lsls	r3, r3, #28
 8006558:	d51d      	bpl.n	8006596 <_puts_r+0x66>
 800655a:	6923      	ldr	r3, [r4, #16]
 800655c:	b1db      	cbz	r3, 8006596 <_puts_r+0x66>
 800655e:	3e01      	subs	r6, #1
 8006560:	68a3      	ldr	r3, [r4, #8]
 8006562:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006566:	3b01      	subs	r3, #1
 8006568:	60a3      	str	r3, [r4, #8]
 800656a:	b9e9      	cbnz	r1, 80065a8 <_puts_r+0x78>
 800656c:	2b00      	cmp	r3, #0
 800656e:	da2e      	bge.n	80065ce <_puts_r+0x9e>
 8006570:	4622      	mov	r2, r4
 8006572:	210a      	movs	r1, #10
 8006574:	4628      	mov	r0, r5
 8006576:	f000 f83f 	bl	80065f8 <__swbuf_r>
 800657a:	3001      	adds	r0, #1
 800657c:	d011      	beq.n	80065a2 <_puts_r+0x72>
 800657e:	200a      	movs	r0, #10
 8006580:	e011      	b.n	80065a6 <_puts_r+0x76>
 8006582:	4b17      	ldr	r3, [pc, #92]	; (80065e0 <_puts_r+0xb0>)
 8006584:	429c      	cmp	r4, r3
 8006586:	d101      	bne.n	800658c <_puts_r+0x5c>
 8006588:	68ac      	ldr	r4, [r5, #8]
 800658a:	e7e3      	b.n	8006554 <_puts_r+0x24>
 800658c:	4b15      	ldr	r3, [pc, #84]	; (80065e4 <_puts_r+0xb4>)
 800658e:	429c      	cmp	r4, r3
 8006590:	bf08      	it	eq
 8006592:	68ec      	ldreq	r4, [r5, #12]
 8006594:	e7de      	b.n	8006554 <_puts_r+0x24>
 8006596:	4621      	mov	r1, r4
 8006598:	4628      	mov	r0, r5
 800659a:	f000 f87f 	bl	800669c <__swsetup_r>
 800659e:	2800      	cmp	r0, #0
 80065a0:	d0dd      	beq.n	800655e <_puts_r+0x2e>
 80065a2:	f04f 30ff 	mov.w	r0, #4294967295
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	da04      	bge.n	80065b6 <_puts_r+0x86>
 80065ac:	69a2      	ldr	r2, [r4, #24]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	dc06      	bgt.n	80065c0 <_puts_r+0x90>
 80065b2:	290a      	cmp	r1, #10
 80065b4:	d004      	beq.n	80065c0 <_puts_r+0x90>
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	6022      	str	r2, [r4, #0]
 80065bc:	7019      	strb	r1, [r3, #0]
 80065be:	e7cf      	b.n	8006560 <_puts_r+0x30>
 80065c0:	4622      	mov	r2, r4
 80065c2:	4628      	mov	r0, r5
 80065c4:	f000 f818 	bl	80065f8 <__swbuf_r>
 80065c8:	3001      	adds	r0, #1
 80065ca:	d1c9      	bne.n	8006560 <_puts_r+0x30>
 80065cc:	e7e9      	b.n	80065a2 <_puts_r+0x72>
 80065ce:	200a      	movs	r0, #10
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	6022      	str	r2, [r4, #0]
 80065d6:	7018      	strb	r0, [r3, #0]
 80065d8:	e7e5      	b.n	80065a6 <_puts_r+0x76>
 80065da:	bf00      	nop
 80065dc:	08007504 	.word	0x08007504
 80065e0:	08007524 	.word	0x08007524
 80065e4:	080074e4 	.word	0x080074e4

080065e8 <puts>:
 80065e8:	4b02      	ldr	r3, [pc, #8]	; (80065f4 <puts+0xc>)
 80065ea:	4601      	mov	r1, r0
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	f7ff bf9f 	b.w	8006530 <_puts_r>
 80065f2:	bf00      	nop
 80065f4:	20000010 	.word	0x20000010

080065f8 <__swbuf_r>:
 80065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fa:	460e      	mov	r6, r1
 80065fc:	4614      	mov	r4, r2
 80065fe:	4605      	mov	r5, r0
 8006600:	b118      	cbz	r0, 800660a <__swbuf_r+0x12>
 8006602:	6983      	ldr	r3, [r0, #24]
 8006604:	b90b      	cbnz	r3, 800660a <__swbuf_r+0x12>
 8006606:	f000 f9a7 	bl	8006958 <__sinit>
 800660a:	4b21      	ldr	r3, [pc, #132]	; (8006690 <__swbuf_r+0x98>)
 800660c:	429c      	cmp	r4, r3
 800660e:	d12a      	bne.n	8006666 <__swbuf_r+0x6e>
 8006610:	686c      	ldr	r4, [r5, #4]
 8006612:	69a3      	ldr	r3, [r4, #24]
 8006614:	60a3      	str	r3, [r4, #8]
 8006616:	89a3      	ldrh	r3, [r4, #12]
 8006618:	071a      	lsls	r2, r3, #28
 800661a:	d52e      	bpl.n	800667a <__swbuf_r+0x82>
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	b363      	cbz	r3, 800667a <__swbuf_r+0x82>
 8006620:	6923      	ldr	r3, [r4, #16]
 8006622:	6820      	ldr	r0, [r4, #0]
 8006624:	b2f6      	uxtb	r6, r6
 8006626:	1ac0      	subs	r0, r0, r3
 8006628:	6963      	ldr	r3, [r4, #20]
 800662a:	4637      	mov	r7, r6
 800662c:	4283      	cmp	r3, r0
 800662e:	dc04      	bgt.n	800663a <__swbuf_r+0x42>
 8006630:	4621      	mov	r1, r4
 8006632:	4628      	mov	r0, r5
 8006634:	f000 f926 	bl	8006884 <_fflush_r>
 8006638:	bb28      	cbnz	r0, 8006686 <__swbuf_r+0x8e>
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	3001      	adds	r0, #1
 800663e:	3b01      	subs	r3, #1
 8006640:	60a3      	str	r3, [r4, #8]
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	6022      	str	r2, [r4, #0]
 8006648:	701e      	strb	r6, [r3, #0]
 800664a:	6963      	ldr	r3, [r4, #20]
 800664c:	4283      	cmp	r3, r0
 800664e:	d004      	beq.n	800665a <__swbuf_r+0x62>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	07db      	lsls	r3, r3, #31
 8006654:	d519      	bpl.n	800668a <__swbuf_r+0x92>
 8006656:	2e0a      	cmp	r6, #10
 8006658:	d117      	bne.n	800668a <__swbuf_r+0x92>
 800665a:	4621      	mov	r1, r4
 800665c:	4628      	mov	r0, r5
 800665e:	f000 f911 	bl	8006884 <_fflush_r>
 8006662:	b190      	cbz	r0, 800668a <__swbuf_r+0x92>
 8006664:	e00f      	b.n	8006686 <__swbuf_r+0x8e>
 8006666:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <__swbuf_r+0x9c>)
 8006668:	429c      	cmp	r4, r3
 800666a:	d101      	bne.n	8006670 <__swbuf_r+0x78>
 800666c:	68ac      	ldr	r4, [r5, #8]
 800666e:	e7d0      	b.n	8006612 <__swbuf_r+0x1a>
 8006670:	4b09      	ldr	r3, [pc, #36]	; (8006698 <__swbuf_r+0xa0>)
 8006672:	429c      	cmp	r4, r3
 8006674:	bf08      	it	eq
 8006676:	68ec      	ldreq	r4, [r5, #12]
 8006678:	e7cb      	b.n	8006612 <__swbuf_r+0x1a>
 800667a:	4621      	mov	r1, r4
 800667c:	4628      	mov	r0, r5
 800667e:	f000 f80d 	bl	800669c <__swsetup_r>
 8006682:	2800      	cmp	r0, #0
 8006684:	d0cc      	beq.n	8006620 <__swbuf_r+0x28>
 8006686:	f04f 37ff 	mov.w	r7, #4294967295
 800668a:	4638      	mov	r0, r7
 800668c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800668e:	bf00      	nop
 8006690:	08007504 	.word	0x08007504
 8006694:	08007524 	.word	0x08007524
 8006698:	080074e4 	.word	0x080074e4

0800669c <__swsetup_r>:
 800669c:	4b32      	ldr	r3, [pc, #200]	; (8006768 <__swsetup_r+0xcc>)
 800669e:	b570      	push	{r4, r5, r6, lr}
 80066a0:	681d      	ldr	r5, [r3, #0]
 80066a2:	4606      	mov	r6, r0
 80066a4:	460c      	mov	r4, r1
 80066a6:	b125      	cbz	r5, 80066b2 <__swsetup_r+0x16>
 80066a8:	69ab      	ldr	r3, [r5, #24]
 80066aa:	b913      	cbnz	r3, 80066b2 <__swsetup_r+0x16>
 80066ac:	4628      	mov	r0, r5
 80066ae:	f000 f953 	bl	8006958 <__sinit>
 80066b2:	4b2e      	ldr	r3, [pc, #184]	; (800676c <__swsetup_r+0xd0>)
 80066b4:	429c      	cmp	r4, r3
 80066b6:	d10f      	bne.n	80066d8 <__swsetup_r+0x3c>
 80066b8:	686c      	ldr	r4, [r5, #4]
 80066ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066be:	b29a      	uxth	r2, r3
 80066c0:	0715      	lsls	r5, r2, #28
 80066c2:	d42c      	bmi.n	800671e <__swsetup_r+0x82>
 80066c4:	06d0      	lsls	r0, r2, #27
 80066c6:	d411      	bmi.n	80066ec <__swsetup_r+0x50>
 80066c8:	2209      	movs	r2, #9
 80066ca:	6032      	str	r2, [r6, #0]
 80066cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066d0:	81a3      	strh	r3, [r4, #12]
 80066d2:	f04f 30ff 	mov.w	r0, #4294967295
 80066d6:	e03e      	b.n	8006756 <__swsetup_r+0xba>
 80066d8:	4b25      	ldr	r3, [pc, #148]	; (8006770 <__swsetup_r+0xd4>)
 80066da:	429c      	cmp	r4, r3
 80066dc:	d101      	bne.n	80066e2 <__swsetup_r+0x46>
 80066de:	68ac      	ldr	r4, [r5, #8]
 80066e0:	e7eb      	b.n	80066ba <__swsetup_r+0x1e>
 80066e2:	4b24      	ldr	r3, [pc, #144]	; (8006774 <__swsetup_r+0xd8>)
 80066e4:	429c      	cmp	r4, r3
 80066e6:	bf08      	it	eq
 80066e8:	68ec      	ldreq	r4, [r5, #12]
 80066ea:	e7e6      	b.n	80066ba <__swsetup_r+0x1e>
 80066ec:	0751      	lsls	r1, r2, #29
 80066ee:	d512      	bpl.n	8006716 <__swsetup_r+0x7a>
 80066f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066f2:	b141      	cbz	r1, 8006706 <__swsetup_r+0x6a>
 80066f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066f8:	4299      	cmp	r1, r3
 80066fa:	d002      	beq.n	8006702 <__swsetup_r+0x66>
 80066fc:	4630      	mov	r0, r6
 80066fe:	f000 fa19 	bl	8006b34 <_free_r>
 8006702:	2300      	movs	r3, #0
 8006704:	6363      	str	r3, [r4, #52]	; 0x34
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800670c:	81a3      	strh	r3, [r4, #12]
 800670e:	2300      	movs	r3, #0
 8006710:	6063      	str	r3, [r4, #4]
 8006712:	6923      	ldr	r3, [r4, #16]
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	f043 0308 	orr.w	r3, r3, #8
 800671c:	81a3      	strh	r3, [r4, #12]
 800671e:	6923      	ldr	r3, [r4, #16]
 8006720:	b94b      	cbnz	r3, 8006736 <__swsetup_r+0x9a>
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800672c:	d003      	beq.n	8006736 <__swsetup_r+0x9a>
 800672e:	4621      	mov	r1, r4
 8006730:	4630      	mov	r0, r6
 8006732:	f000 f9bf 	bl	8006ab4 <__smakebuf_r>
 8006736:	89a2      	ldrh	r2, [r4, #12]
 8006738:	f012 0301 	ands.w	r3, r2, #1
 800673c:	d00c      	beq.n	8006758 <__swsetup_r+0xbc>
 800673e:	2300      	movs	r3, #0
 8006740:	60a3      	str	r3, [r4, #8]
 8006742:	6963      	ldr	r3, [r4, #20]
 8006744:	425b      	negs	r3, r3
 8006746:	61a3      	str	r3, [r4, #24]
 8006748:	6923      	ldr	r3, [r4, #16]
 800674a:	b953      	cbnz	r3, 8006762 <__swsetup_r+0xc6>
 800674c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006750:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006754:	d1ba      	bne.n	80066cc <__swsetup_r+0x30>
 8006756:	bd70      	pop	{r4, r5, r6, pc}
 8006758:	0792      	lsls	r2, r2, #30
 800675a:	bf58      	it	pl
 800675c:	6963      	ldrpl	r3, [r4, #20]
 800675e:	60a3      	str	r3, [r4, #8]
 8006760:	e7f2      	b.n	8006748 <__swsetup_r+0xac>
 8006762:	2000      	movs	r0, #0
 8006764:	e7f7      	b.n	8006756 <__swsetup_r+0xba>
 8006766:	bf00      	nop
 8006768:	20000010 	.word	0x20000010
 800676c:	08007504 	.word	0x08007504
 8006770:	08007524 	.word	0x08007524
 8006774:	080074e4 	.word	0x080074e4

08006778 <__sflush_r>:
 8006778:	898a      	ldrh	r2, [r1, #12]
 800677a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800677e:	4605      	mov	r5, r0
 8006780:	0710      	lsls	r0, r2, #28
 8006782:	460c      	mov	r4, r1
 8006784:	d458      	bmi.n	8006838 <__sflush_r+0xc0>
 8006786:	684b      	ldr	r3, [r1, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	dc05      	bgt.n	8006798 <__sflush_r+0x20>
 800678c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	dc02      	bgt.n	8006798 <__sflush_r+0x20>
 8006792:	2000      	movs	r0, #0
 8006794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800679a:	2e00      	cmp	r6, #0
 800679c:	d0f9      	beq.n	8006792 <__sflush_r+0x1a>
 800679e:	2300      	movs	r3, #0
 80067a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067a4:	682f      	ldr	r7, [r5, #0]
 80067a6:	6a21      	ldr	r1, [r4, #32]
 80067a8:	602b      	str	r3, [r5, #0]
 80067aa:	d032      	beq.n	8006812 <__sflush_r+0x9a>
 80067ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	075a      	lsls	r2, r3, #29
 80067b2:	d505      	bpl.n	80067c0 <__sflush_r+0x48>
 80067b4:	6863      	ldr	r3, [r4, #4]
 80067b6:	1ac0      	subs	r0, r0, r3
 80067b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067ba:	b10b      	cbz	r3, 80067c0 <__sflush_r+0x48>
 80067bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067be:	1ac0      	subs	r0, r0, r3
 80067c0:	2300      	movs	r3, #0
 80067c2:	4602      	mov	r2, r0
 80067c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067c6:	6a21      	ldr	r1, [r4, #32]
 80067c8:	4628      	mov	r0, r5
 80067ca:	47b0      	blx	r6
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	d106      	bne.n	80067e0 <__sflush_r+0x68>
 80067d2:	6829      	ldr	r1, [r5, #0]
 80067d4:	291d      	cmp	r1, #29
 80067d6:	d848      	bhi.n	800686a <__sflush_r+0xf2>
 80067d8:	4a29      	ldr	r2, [pc, #164]	; (8006880 <__sflush_r+0x108>)
 80067da:	40ca      	lsrs	r2, r1
 80067dc:	07d6      	lsls	r6, r2, #31
 80067de:	d544      	bpl.n	800686a <__sflush_r+0xf2>
 80067e0:	2200      	movs	r2, #0
 80067e2:	6062      	str	r2, [r4, #4]
 80067e4:	6922      	ldr	r2, [r4, #16]
 80067e6:	04d9      	lsls	r1, r3, #19
 80067e8:	6022      	str	r2, [r4, #0]
 80067ea:	d504      	bpl.n	80067f6 <__sflush_r+0x7e>
 80067ec:	1c42      	adds	r2, r0, #1
 80067ee:	d101      	bne.n	80067f4 <__sflush_r+0x7c>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b903      	cbnz	r3, 80067f6 <__sflush_r+0x7e>
 80067f4:	6560      	str	r0, [r4, #84]	; 0x54
 80067f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067f8:	602f      	str	r7, [r5, #0]
 80067fa:	2900      	cmp	r1, #0
 80067fc:	d0c9      	beq.n	8006792 <__sflush_r+0x1a>
 80067fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006802:	4299      	cmp	r1, r3
 8006804:	d002      	beq.n	800680c <__sflush_r+0x94>
 8006806:	4628      	mov	r0, r5
 8006808:	f000 f994 	bl	8006b34 <_free_r>
 800680c:	2000      	movs	r0, #0
 800680e:	6360      	str	r0, [r4, #52]	; 0x34
 8006810:	e7c0      	b.n	8006794 <__sflush_r+0x1c>
 8006812:	2301      	movs	r3, #1
 8006814:	4628      	mov	r0, r5
 8006816:	47b0      	blx	r6
 8006818:	1c41      	adds	r1, r0, #1
 800681a:	d1c8      	bne.n	80067ae <__sflush_r+0x36>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d0c5      	beq.n	80067ae <__sflush_r+0x36>
 8006822:	2b1d      	cmp	r3, #29
 8006824:	d001      	beq.n	800682a <__sflush_r+0xb2>
 8006826:	2b16      	cmp	r3, #22
 8006828:	d101      	bne.n	800682e <__sflush_r+0xb6>
 800682a:	602f      	str	r7, [r5, #0]
 800682c:	e7b1      	b.n	8006792 <__sflush_r+0x1a>
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006834:	81a3      	strh	r3, [r4, #12]
 8006836:	e7ad      	b.n	8006794 <__sflush_r+0x1c>
 8006838:	690f      	ldr	r7, [r1, #16]
 800683a:	2f00      	cmp	r7, #0
 800683c:	d0a9      	beq.n	8006792 <__sflush_r+0x1a>
 800683e:	0793      	lsls	r3, r2, #30
 8006840:	bf18      	it	ne
 8006842:	2300      	movne	r3, #0
 8006844:	680e      	ldr	r6, [r1, #0]
 8006846:	bf08      	it	eq
 8006848:	694b      	ldreq	r3, [r1, #20]
 800684a:	eba6 0807 	sub.w	r8, r6, r7
 800684e:	600f      	str	r7, [r1, #0]
 8006850:	608b      	str	r3, [r1, #8]
 8006852:	f1b8 0f00 	cmp.w	r8, #0
 8006856:	dd9c      	ble.n	8006792 <__sflush_r+0x1a>
 8006858:	4643      	mov	r3, r8
 800685a:	463a      	mov	r2, r7
 800685c:	6a21      	ldr	r1, [r4, #32]
 800685e:	4628      	mov	r0, r5
 8006860:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006862:	47b0      	blx	r6
 8006864:	2800      	cmp	r0, #0
 8006866:	dc06      	bgt.n	8006876 <__sflush_r+0xfe>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800686e:	81a3      	strh	r3, [r4, #12]
 8006870:	f04f 30ff 	mov.w	r0, #4294967295
 8006874:	e78e      	b.n	8006794 <__sflush_r+0x1c>
 8006876:	4407      	add	r7, r0
 8006878:	eba8 0800 	sub.w	r8, r8, r0
 800687c:	e7e9      	b.n	8006852 <__sflush_r+0xda>
 800687e:	bf00      	nop
 8006880:	20400001 	.word	0x20400001

08006884 <_fflush_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	690b      	ldr	r3, [r1, #16]
 8006888:	4605      	mov	r5, r0
 800688a:	460c      	mov	r4, r1
 800688c:	b1db      	cbz	r3, 80068c6 <_fflush_r+0x42>
 800688e:	b118      	cbz	r0, 8006898 <_fflush_r+0x14>
 8006890:	6983      	ldr	r3, [r0, #24]
 8006892:	b90b      	cbnz	r3, 8006898 <_fflush_r+0x14>
 8006894:	f000 f860 	bl	8006958 <__sinit>
 8006898:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <_fflush_r+0x48>)
 800689a:	429c      	cmp	r4, r3
 800689c:	d109      	bne.n	80068b2 <_fflush_r+0x2e>
 800689e:	686c      	ldr	r4, [r5, #4]
 80068a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068a4:	b17b      	cbz	r3, 80068c6 <_fflush_r+0x42>
 80068a6:	4621      	mov	r1, r4
 80068a8:	4628      	mov	r0, r5
 80068aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ae:	f7ff bf63 	b.w	8006778 <__sflush_r>
 80068b2:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <_fflush_r+0x4c>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	d101      	bne.n	80068bc <_fflush_r+0x38>
 80068b8:	68ac      	ldr	r4, [r5, #8]
 80068ba:	e7f1      	b.n	80068a0 <_fflush_r+0x1c>
 80068bc:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <_fflush_r+0x50>)
 80068be:	429c      	cmp	r4, r3
 80068c0:	bf08      	it	eq
 80068c2:	68ec      	ldreq	r4, [r5, #12]
 80068c4:	e7ec      	b.n	80068a0 <_fflush_r+0x1c>
 80068c6:	2000      	movs	r0, #0
 80068c8:	bd38      	pop	{r3, r4, r5, pc}
 80068ca:	bf00      	nop
 80068cc:	08007504 	.word	0x08007504
 80068d0:	08007524 	.word	0x08007524
 80068d4:	080074e4 	.word	0x080074e4

080068d8 <std>:
 80068d8:	2300      	movs	r3, #0
 80068da:	b510      	push	{r4, lr}
 80068dc:	4604      	mov	r4, r0
 80068de:	e9c0 3300 	strd	r3, r3, [r0]
 80068e2:	6083      	str	r3, [r0, #8]
 80068e4:	8181      	strh	r1, [r0, #12]
 80068e6:	6643      	str	r3, [r0, #100]	; 0x64
 80068e8:	81c2      	strh	r2, [r0, #14]
 80068ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068ee:	6183      	str	r3, [r0, #24]
 80068f0:	4619      	mov	r1, r3
 80068f2:	2208      	movs	r2, #8
 80068f4:	305c      	adds	r0, #92	; 0x5c
 80068f6:	f7ff fdfa 	bl	80064ee <memset>
 80068fa:	4b05      	ldr	r3, [pc, #20]	; (8006910 <std+0x38>)
 80068fc:	6224      	str	r4, [r4, #32]
 80068fe:	6263      	str	r3, [r4, #36]	; 0x24
 8006900:	4b04      	ldr	r3, [pc, #16]	; (8006914 <std+0x3c>)
 8006902:	62a3      	str	r3, [r4, #40]	; 0x28
 8006904:	4b04      	ldr	r3, [pc, #16]	; (8006918 <std+0x40>)
 8006906:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006908:	4b04      	ldr	r3, [pc, #16]	; (800691c <std+0x44>)
 800690a:	6323      	str	r3, [r4, #48]	; 0x30
 800690c:	bd10      	pop	{r4, pc}
 800690e:	bf00      	nop
 8006910:	0800722d 	.word	0x0800722d
 8006914:	0800724f 	.word	0x0800724f
 8006918:	08007287 	.word	0x08007287
 800691c:	080072ab 	.word	0x080072ab

08006920 <_cleanup_r>:
 8006920:	4901      	ldr	r1, [pc, #4]	; (8006928 <_cleanup_r+0x8>)
 8006922:	f000 b885 	b.w	8006a30 <_fwalk_reent>
 8006926:	bf00      	nop
 8006928:	08006885 	.word	0x08006885

0800692c <__sfmoreglue>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	2568      	movs	r5, #104	; 0x68
 8006930:	1e4a      	subs	r2, r1, #1
 8006932:	4355      	muls	r5, r2
 8006934:	460e      	mov	r6, r1
 8006936:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800693a:	f000 f947 	bl	8006bcc <_malloc_r>
 800693e:	4604      	mov	r4, r0
 8006940:	b140      	cbz	r0, 8006954 <__sfmoreglue+0x28>
 8006942:	2100      	movs	r1, #0
 8006944:	e9c0 1600 	strd	r1, r6, [r0]
 8006948:	300c      	adds	r0, #12
 800694a:	60a0      	str	r0, [r4, #8]
 800694c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006950:	f7ff fdcd 	bl	80064ee <memset>
 8006954:	4620      	mov	r0, r4
 8006956:	bd70      	pop	{r4, r5, r6, pc}

08006958 <__sinit>:
 8006958:	6983      	ldr	r3, [r0, #24]
 800695a:	b510      	push	{r4, lr}
 800695c:	4604      	mov	r4, r0
 800695e:	bb33      	cbnz	r3, 80069ae <__sinit+0x56>
 8006960:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006964:	6503      	str	r3, [r0, #80]	; 0x50
 8006966:	4b12      	ldr	r3, [pc, #72]	; (80069b0 <__sinit+0x58>)
 8006968:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <__sinit+0x5c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6282      	str	r2, [r0, #40]	; 0x28
 800696e:	4298      	cmp	r0, r3
 8006970:	bf04      	itt	eq
 8006972:	2301      	moveq	r3, #1
 8006974:	6183      	streq	r3, [r0, #24]
 8006976:	f000 f81f 	bl	80069b8 <__sfp>
 800697a:	6060      	str	r0, [r4, #4]
 800697c:	4620      	mov	r0, r4
 800697e:	f000 f81b 	bl	80069b8 <__sfp>
 8006982:	60a0      	str	r0, [r4, #8]
 8006984:	4620      	mov	r0, r4
 8006986:	f000 f817 	bl	80069b8 <__sfp>
 800698a:	2200      	movs	r2, #0
 800698c:	60e0      	str	r0, [r4, #12]
 800698e:	2104      	movs	r1, #4
 8006990:	6860      	ldr	r0, [r4, #4]
 8006992:	f7ff ffa1 	bl	80068d8 <std>
 8006996:	2201      	movs	r2, #1
 8006998:	2109      	movs	r1, #9
 800699a:	68a0      	ldr	r0, [r4, #8]
 800699c:	f7ff ff9c 	bl	80068d8 <std>
 80069a0:	2202      	movs	r2, #2
 80069a2:	2112      	movs	r1, #18
 80069a4:	68e0      	ldr	r0, [r4, #12]
 80069a6:	f7ff ff97 	bl	80068d8 <std>
 80069aa:	2301      	movs	r3, #1
 80069ac:	61a3      	str	r3, [r4, #24]
 80069ae:	bd10      	pop	{r4, pc}
 80069b0:	080074e0 	.word	0x080074e0
 80069b4:	08006921 	.word	0x08006921

080069b8 <__sfp>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	4b1b      	ldr	r3, [pc, #108]	; (8006a28 <__sfp+0x70>)
 80069bc:	4607      	mov	r7, r0
 80069be:	681e      	ldr	r6, [r3, #0]
 80069c0:	69b3      	ldr	r3, [r6, #24]
 80069c2:	b913      	cbnz	r3, 80069ca <__sfp+0x12>
 80069c4:	4630      	mov	r0, r6
 80069c6:	f7ff ffc7 	bl	8006958 <__sinit>
 80069ca:	3648      	adds	r6, #72	; 0x48
 80069cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	d503      	bpl.n	80069dc <__sfp+0x24>
 80069d4:	6833      	ldr	r3, [r6, #0]
 80069d6:	b133      	cbz	r3, 80069e6 <__sfp+0x2e>
 80069d8:	6836      	ldr	r6, [r6, #0]
 80069da:	e7f7      	b.n	80069cc <__sfp+0x14>
 80069dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069e0:	b16d      	cbz	r5, 80069fe <__sfp+0x46>
 80069e2:	3468      	adds	r4, #104	; 0x68
 80069e4:	e7f4      	b.n	80069d0 <__sfp+0x18>
 80069e6:	2104      	movs	r1, #4
 80069e8:	4638      	mov	r0, r7
 80069ea:	f7ff ff9f 	bl	800692c <__sfmoreglue>
 80069ee:	6030      	str	r0, [r6, #0]
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d1f1      	bne.n	80069d8 <__sfp+0x20>
 80069f4:	230c      	movs	r3, #12
 80069f6:	4604      	mov	r4, r0
 80069f8:	603b      	str	r3, [r7, #0]
 80069fa:	4620      	mov	r0, r4
 80069fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069fe:	4b0b      	ldr	r3, [pc, #44]	; (8006a2c <__sfp+0x74>)
 8006a00:	6665      	str	r5, [r4, #100]	; 0x64
 8006a02:	e9c4 5500 	strd	r5, r5, [r4]
 8006a06:	60a5      	str	r5, [r4, #8]
 8006a08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006a0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006a10:	2208      	movs	r2, #8
 8006a12:	4629      	mov	r1, r5
 8006a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a18:	f7ff fd69 	bl	80064ee <memset>
 8006a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a24:	e7e9      	b.n	80069fa <__sfp+0x42>
 8006a26:	bf00      	nop
 8006a28:	080074e0 	.word	0x080074e0
 8006a2c:	ffff0001 	.word	0xffff0001

08006a30 <_fwalk_reent>:
 8006a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a34:	4680      	mov	r8, r0
 8006a36:	4689      	mov	r9, r1
 8006a38:	2600      	movs	r6, #0
 8006a3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a3e:	b914      	cbnz	r4, 8006a46 <_fwalk_reent+0x16>
 8006a40:	4630      	mov	r0, r6
 8006a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006a4a:	3f01      	subs	r7, #1
 8006a4c:	d501      	bpl.n	8006a52 <_fwalk_reent+0x22>
 8006a4e:	6824      	ldr	r4, [r4, #0]
 8006a50:	e7f5      	b.n	8006a3e <_fwalk_reent+0xe>
 8006a52:	89ab      	ldrh	r3, [r5, #12]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d907      	bls.n	8006a68 <_fwalk_reent+0x38>
 8006a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	d003      	beq.n	8006a68 <_fwalk_reent+0x38>
 8006a60:	4629      	mov	r1, r5
 8006a62:	4640      	mov	r0, r8
 8006a64:	47c8      	blx	r9
 8006a66:	4306      	orrs	r6, r0
 8006a68:	3568      	adds	r5, #104	; 0x68
 8006a6a:	e7ee      	b.n	8006a4a <_fwalk_reent+0x1a>

08006a6c <__swhatbuf_r>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	460e      	mov	r6, r1
 8006a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a74:	b096      	sub	sp, #88	; 0x58
 8006a76:	2900      	cmp	r1, #0
 8006a78:	4614      	mov	r4, r2
 8006a7a:	461d      	mov	r5, r3
 8006a7c:	da07      	bge.n	8006a8e <__swhatbuf_r+0x22>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	89b3      	ldrh	r3, [r6, #12]
 8006a84:	061a      	lsls	r2, r3, #24
 8006a86:	d410      	bmi.n	8006aaa <__swhatbuf_r+0x3e>
 8006a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a8c:	e00e      	b.n	8006aac <__swhatbuf_r+0x40>
 8006a8e:	466a      	mov	r2, sp
 8006a90:	f000 fc32 	bl	80072f8 <_fstat_r>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	dbf2      	blt.n	8006a7e <__swhatbuf_r+0x12>
 8006a98:	9a01      	ldr	r2, [sp, #4]
 8006a9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006aa2:	425a      	negs	r2, r3
 8006aa4:	415a      	adcs	r2, r3
 8006aa6:	602a      	str	r2, [r5, #0]
 8006aa8:	e7ee      	b.n	8006a88 <__swhatbuf_r+0x1c>
 8006aaa:	2340      	movs	r3, #64	; 0x40
 8006aac:	2000      	movs	r0, #0
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	b016      	add	sp, #88	; 0x58
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}

08006ab4 <__smakebuf_r>:
 8006ab4:	898b      	ldrh	r3, [r1, #12]
 8006ab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ab8:	079d      	lsls	r5, r3, #30
 8006aba:	4606      	mov	r6, r0
 8006abc:	460c      	mov	r4, r1
 8006abe:	d507      	bpl.n	8006ad0 <__smakebuf_r+0x1c>
 8006ac0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	6123      	str	r3, [r4, #16]
 8006ac8:	2301      	movs	r3, #1
 8006aca:	6163      	str	r3, [r4, #20]
 8006acc:	b002      	add	sp, #8
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	ab01      	add	r3, sp, #4
 8006ad2:	466a      	mov	r2, sp
 8006ad4:	f7ff ffca 	bl	8006a6c <__swhatbuf_r>
 8006ad8:	9900      	ldr	r1, [sp, #0]
 8006ada:	4605      	mov	r5, r0
 8006adc:	4630      	mov	r0, r6
 8006ade:	f000 f875 	bl	8006bcc <_malloc_r>
 8006ae2:	b948      	cbnz	r0, 8006af8 <__smakebuf_r+0x44>
 8006ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae8:	059a      	lsls	r2, r3, #22
 8006aea:	d4ef      	bmi.n	8006acc <__smakebuf_r+0x18>
 8006aec:	f023 0303 	bic.w	r3, r3, #3
 8006af0:	f043 0302 	orr.w	r3, r3, #2
 8006af4:	81a3      	strh	r3, [r4, #12]
 8006af6:	e7e3      	b.n	8006ac0 <__smakebuf_r+0xc>
 8006af8:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <__smakebuf_r+0x7c>)
 8006afa:	62b3      	str	r3, [r6, #40]	; 0x28
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	6020      	str	r0, [r4, #0]
 8006b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	9b00      	ldr	r3, [sp, #0]
 8006b08:	6120      	str	r0, [r4, #16]
 8006b0a:	6163      	str	r3, [r4, #20]
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	b15b      	cbz	r3, 8006b28 <__smakebuf_r+0x74>
 8006b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b14:	4630      	mov	r0, r6
 8006b16:	f000 fc01 	bl	800731c <_isatty_r>
 8006b1a:	b128      	cbz	r0, 8006b28 <__smakebuf_r+0x74>
 8006b1c:	89a3      	ldrh	r3, [r4, #12]
 8006b1e:	f023 0303 	bic.w	r3, r3, #3
 8006b22:	f043 0301 	orr.w	r3, r3, #1
 8006b26:	81a3      	strh	r3, [r4, #12]
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	431d      	orrs	r5, r3
 8006b2c:	81a5      	strh	r5, [r4, #12]
 8006b2e:	e7cd      	b.n	8006acc <__smakebuf_r+0x18>
 8006b30:	08006921 	.word	0x08006921

08006b34 <_free_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4605      	mov	r5, r0
 8006b38:	2900      	cmp	r1, #0
 8006b3a:	d043      	beq.n	8006bc4 <_free_r+0x90>
 8006b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b40:	1f0c      	subs	r4, r1, #4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	bfb8      	it	lt
 8006b46:	18e4      	addlt	r4, r4, r3
 8006b48:	f000 fc18 	bl	800737c <__malloc_lock>
 8006b4c:	4a1e      	ldr	r2, [pc, #120]	; (8006bc8 <_free_r+0x94>)
 8006b4e:	6813      	ldr	r3, [r2, #0]
 8006b50:	4610      	mov	r0, r2
 8006b52:	b933      	cbnz	r3, 8006b62 <_free_r+0x2e>
 8006b54:	6063      	str	r3, [r4, #4]
 8006b56:	6014      	str	r4, [r2, #0]
 8006b58:	4628      	mov	r0, r5
 8006b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b5e:	f000 bc0e 	b.w	800737e <__malloc_unlock>
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	d90b      	bls.n	8006b7e <_free_r+0x4a>
 8006b66:	6821      	ldr	r1, [r4, #0]
 8006b68:	1862      	adds	r2, r4, r1
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	bf01      	itttt	eq
 8006b6e:	681a      	ldreq	r2, [r3, #0]
 8006b70:	685b      	ldreq	r3, [r3, #4]
 8006b72:	1852      	addeq	r2, r2, r1
 8006b74:	6022      	streq	r2, [r4, #0]
 8006b76:	6063      	str	r3, [r4, #4]
 8006b78:	6004      	str	r4, [r0, #0]
 8006b7a:	e7ed      	b.n	8006b58 <_free_r+0x24>
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	b10a      	cbz	r2, 8006b86 <_free_r+0x52>
 8006b82:	42a2      	cmp	r2, r4
 8006b84:	d9fa      	bls.n	8006b7c <_free_r+0x48>
 8006b86:	6819      	ldr	r1, [r3, #0]
 8006b88:	1858      	adds	r0, r3, r1
 8006b8a:	42a0      	cmp	r0, r4
 8006b8c:	d10b      	bne.n	8006ba6 <_free_r+0x72>
 8006b8e:	6820      	ldr	r0, [r4, #0]
 8006b90:	4401      	add	r1, r0
 8006b92:	1858      	adds	r0, r3, r1
 8006b94:	4282      	cmp	r2, r0
 8006b96:	6019      	str	r1, [r3, #0]
 8006b98:	d1de      	bne.n	8006b58 <_free_r+0x24>
 8006b9a:	6810      	ldr	r0, [r2, #0]
 8006b9c:	6852      	ldr	r2, [r2, #4]
 8006b9e:	4401      	add	r1, r0
 8006ba0:	6019      	str	r1, [r3, #0]
 8006ba2:	605a      	str	r2, [r3, #4]
 8006ba4:	e7d8      	b.n	8006b58 <_free_r+0x24>
 8006ba6:	d902      	bls.n	8006bae <_free_r+0x7a>
 8006ba8:	230c      	movs	r3, #12
 8006baa:	602b      	str	r3, [r5, #0]
 8006bac:	e7d4      	b.n	8006b58 <_free_r+0x24>
 8006bae:	6820      	ldr	r0, [r4, #0]
 8006bb0:	1821      	adds	r1, r4, r0
 8006bb2:	428a      	cmp	r2, r1
 8006bb4:	bf01      	itttt	eq
 8006bb6:	6811      	ldreq	r1, [r2, #0]
 8006bb8:	6852      	ldreq	r2, [r2, #4]
 8006bba:	1809      	addeq	r1, r1, r0
 8006bbc:	6021      	streq	r1, [r4, #0]
 8006bbe:	6062      	str	r2, [r4, #4]
 8006bc0:	605c      	str	r4, [r3, #4]
 8006bc2:	e7c9      	b.n	8006b58 <_free_r+0x24>
 8006bc4:	bd38      	pop	{r3, r4, r5, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20001060 	.word	0x20001060

08006bcc <_malloc_r>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	1ccd      	adds	r5, r1, #3
 8006bd0:	f025 0503 	bic.w	r5, r5, #3
 8006bd4:	3508      	adds	r5, #8
 8006bd6:	2d0c      	cmp	r5, #12
 8006bd8:	bf38      	it	cc
 8006bda:	250c      	movcc	r5, #12
 8006bdc:	2d00      	cmp	r5, #0
 8006bde:	4606      	mov	r6, r0
 8006be0:	db01      	blt.n	8006be6 <_malloc_r+0x1a>
 8006be2:	42a9      	cmp	r1, r5
 8006be4:	d903      	bls.n	8006bee <_malloc_r+0x22>
 8006be6:	230c      	movs	r3, #12
 8006be8:	6033      	str	r3, [r6, #0]
 8006bea:	2000      	movs	r0, #0
 8006bec:	bd70      	pop	{r4, r5, r6, pc}
 8006bee:	f000 fbc5 	bl	800737c <__malloc_lock>
 8006bf2:	4a21      	ldr	r2, [pc, #132]	; (8006c78 <_malloc_r+0xac>)
 8006bf4:	6814      	ldr	r4, [r2, #0]
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	b991      	cbnz	r1, 8006c20 <_malloc_r+0x54>
 8006bfa:	4c20      	ldr	r4, [pc, #128]	; (8006c7c <_malloc_r+0xb0>)
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	b91b      	cbnz	r3, 8006c08 <_malloc_r+0x3c>
 8006c00:	4630      	mov	r0, r6
 8006c02:	f000 fb03 	bl	800720c <_sbrk_r>
 8006c06:	6020      	str	r0, [r4, #0]
 8006c08:	4629      	mov	r1, r5
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f000 fafe 	bl	800720c <_sbrk_r>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d124      	bne.n	8006c5e <_malloc_r+0x92>
 8006c14:	230c      	movs	r3, #12
 8006c16:	4630      	mov	r0, r6
 8006c18:	6033      	str	r3, [r6, #0]
 8006c1a:	f000 fbb0 	bl	800737e <__malloc_unlock>
 8006c1e:	e7e4      	b.n	8006bea <_malloc_r+0x1e>
 8006c20:	680b      	ldr	r3, [r1, #0]
 8006c22:	1b5b      	subs	r3, r3, r5
 8006c24:	d418      	bmi.n	8006c58 <_malloc_r+0x8c>
 8006c26:	2b0b      	cmp	r3, #11
 8006c28:	d90f      	bls.n	8006c4a <_malloc_r+0x7e>
 8006c2a:	600b      	str	r3, [r1, #0]
 8006c2c:	18cc      	adds	r4, r1, r3
 8006c2e:	50cd      	str	r5, [r1, r3]
 8006c30:	4630      	mov	r0, r6
 8006c32:	f000 fba4 	bl	800737e <__malloc_unlock>
 8006c36:	f104 000b 	add.w	r0, r4, #11
 8006c3a:	1d23      	adds	r3, r4, #4
 8006c3c:	f020 0007 	bic.w	r0, r0, #7
 8006c40:	1ac3      	subs	r3, r0, r3
 8006c42:	d0d3      	beq.n	8006bec <_malloc_r+0x20>
 8006c44:	425a      	negs	r2, r3
 8006c46:	50e2      	str	r2, [r4, r3]
 8006c48:	e7d0      	b.n	8006bec <_malloc_r+0x20>
 8006c4a:	684b      	ldr	r3, [r1, #4]
 8006c4c:	428c      	cmp	r4, r1
 8006c4e:	bf16      	itet	ne
 8006c50:	6063      	strne	r3, [r4, #4]
 8006c52:	6013      	streq	r3, [r2, #0]
 8006c54:	460c      	movne	r4, r1
 8006c56:	e7eb      	b.n	8006c30 <_malloc_r+0x64>
 8006c58:	460c      	mov	r4, r1
 8006c5a:	6849      	ldr	r1, [r1, #4]
 8006c5c:	e7cc      	b.n	8006bf8 <_malloc_r+0x2c>
 8006c5e:	1cc4      	adds	r4, r0, #3
 8006c60:	f024 0403 	bic.w	r4, r4, #3
 8006c64:	42a0      	cmp	r0, r4
 8006c66:	d005      	beq.n	8006c74 <_malloc_r+0xa8>
 8006c68:	1a21      	subs	r1, r4, r0
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f000 face 	bl	800720c <_sbrk_r>
 8006c70:	3001      	adds	r0, #1
 8006c72:	d0cf      	beq.n	8006c14 <_malloc_r+0x48>
 8006c74:	6025      	str	r5, [r4, #0]
 8006c76:	e7db      	b.n	8006c30 <_malloc_r+0x64>
 8006c78:	20001060 	.word	0x20001060
 8006c7c:	20001064 	.word	0x20001064

08006c80 <__sfputc_r>:
 8006c80:	6893      	ldr	r3, [r2, #8]
 8006c82:	b410      	push	{r4}
 8006c84:	3b01      	subs	r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	6093      	str	r3, [r2, #8]
 8006c8a:	da07      	bge.n	8006c9c <__sfputc_r+0x1c>
 8006c8c:	6994      	ldr	r4, [r2, #24]
 8006c8e:	42a3      	cmp	r3, r4
 8006c90:	db01      	blt.n	8006c96 <__sfputc_r+0x16>
 8006c92:	290a      	cmp	r1, #10
 8006c94:	d102      	bne.n	8006c9c <__sfputc_r+0x1c>
 8006c96:	bc10      	pop	{r4}
 8006c98:	f7ff bcae 	b.w	80065f8 <__swbuf_r>
 8006c9c:	6813      	ldr	r3, [r2, #0]
 8006c9e:	1c58      	adds	r0, r3, #1
 8006ca0:	6010      	str	r0, [r2, #0]
 8006ca2:	7019      	strb	r1, [r3, #0]
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	bc10      	pop	{r4}
 8006ca8:	4770      	bx	lr

08006caa <__sfputs_r>:
 8006caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cac:	4606      	mov	r6, r0
 8006cae:	460f      	mov	r7, r1
 8006cb0:	4614      	mov	r4, r2
 8006cb2:	18d5      	adds	r5, r2, r3
 8006cb4:	42ac      	cmp	r4, r5
 8006cb6:	d101      	bne.n	8006cbc <__sfputs_r+0x12>
 8006cb8:	2000      	movs	r0, #0
 8006cba:	e007      	b.n	8006ccc <__sfputs_r+0x22>
 8006cbc:	463a      	mov	r2, r7
 8006cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f7ff ffdc 	bl	8006c80 <__sfputc_r>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d1f3      	bne.n	8006cb4 <__sfputs_r+0xa>
 8006ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cd0 <_vfiprintf_r>:
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	460c      	mov	r4, r1
 8006cd6:	b09d      	sub	sp, #116	; 0x74
 8006cd8:	4617      	mov	r7, r2
 8006cda:	461d      	mov	r5, r3
 8006cdc:	4606      	mov	r6, r0
 8006cde:	b118      	cbz	r0, 8006ce8 <_vfiprintf_r+0x18>
 8006ce0:	6983      	ldr	r3, [r0, #24]
 8006ce2:	b90b      	cbnz	r3, 8006ce8 <_vfiprintf_r+0x18>
 8006ce4:	f7ff fe38 	bl	8006958 <__sinit>
 8006ce8:	4b7c      	ldr	r3, [pc, #496]	; (8006edc <_vfiprintf_r+0x20c>)
 8006cea:	429c      	cmp	r4, r3
 8006cec:	d158      	bne.n	8006da0 <_vfiprintf_r+0xd0>
 8006cee:	6874      	ldr	r4, [r6, #4]
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	0718      	lsls	r0, r3, #28
 8006cf4:	d55e      	bpl.n	8006db4 <_vfiprintf_r+0xe4>
 8006cf6:	6923      	ldr	r3, [r4, #16]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d05b      	beq.n	8006db4 <_vfiprintf_r+0xe4>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006d00:	2320      	movs	r3, #32
 8006d02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d06:	2330      	movs	r3, #48	; 0x30
 8006d08:	f04f 0b01 	mov.w	fp, #1
 8006d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d10:	9503      	str	r5, [sp, #12]
 8006d12:	46b8      	mov	r8, r7
 8006d14:	4645      	mov	r5, r8
 8006d16:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d1a:	b10b      	cbz	r3, 8006d20 <_vfiprintf_r+0x50>
 8006d1c:	2b25      	cmp	r3, #37	; 0x25
 8006d1e:	d154      	bne.n	8006dca <_vfiprintf_r+0xfa>
 8006d20:	ebb8 0a07 	subs.w	sl, r8, r7
 8006d24:	d00b      	beq.n	8006d3e <_vfiprintf_r+0x6e>
 8006d26:	4653      	mov	r3, sl
 8006d28:	463a      	mov	r2, r7
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f7ff ffbc 	bl	8006caa <__sfputs_r>
 8006d32:	3001      	adds	r0, #1
 8006d34:	f000 80c2 	beq.w	8006ebc <_vfiprintf_r+0x1ec>
 8006d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3a:	4453      	add	r3, sl
 8006d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d3e:	f898 3000 	ldrb.w	r3, [r8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 80ba 	beq.w	8006ebc <_vfiprintf_r+0x1ec>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d52:	9304      	str	r3, [sp, #16]
 8006d54:	9307      	str	r3, [sp, #28]
 8006d56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d5a:	931a      	str	r3, [sp, #104]	; 0x68
 8006d5c:	46a8      	mov	r8, r5
 8006d5e:	2205      	movs	r2, #5
 8006d60:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006d64:	485e      	ldr	r0, [pc, #376]	; (8006ee0 <_vfiprintf_r+0x210>)
 8006d66:	f000 fafb 	bl	8007360 <memchr>
 8006d6a:	9b04      	ldr	r3, [sp, #16]
 8006d6c:	bb78      	cbnz	r0, 8006dce <_vfiprintf_r+0xfe>
 8006d6e:	06d9      	lsls	r1, r3, #27
 8006d70:	bf44      	itt	mi
 8006d72:	2220      	movmi	r2, #32
 8006d74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d78:	071a      	lsls	r2, r3, #28
 8006d7a:	bf44      	itt	mi
 8006d7c:	222b      	movmi	r2, #43	; 0x2b
 8006d7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006d82:	782a      	ldrb	r2, [r5, #0]
 8006d84:	2a2a      	cmp	r2, #42	; 0x2a
 8006d86:	d02a      	beq.n	8006dde <_vfiprintf_r+0x10e>
 8006d88:	46a8      	mov	r8, r5
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	250a      	movs	r5, #10
 8006d8e:	9a07      	ldr	r2, [sp, #28]
 8006d90:	4641      	mov	r1, r8
 8006d92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d96:	3b30      	subs	r3, #48	; 0x30
 8006d98:	2b09      	cmp	r3, #9
 8006d9a:	d969      	bls.n	8006e70 <_vfiprintf_r+0x1a0>
 8006d9c:	b360      	cbz	r0, 8006df8 <_vfiprintf_r+0x128>
 8006d9e:	e024      	b.n	8006dea <_vfiprintf_r+0x11a>
 8006da0:	4b50      	ldr	r3, [pc, #320]	; (8006ee4 <_vfiprintf_r+0x214>)
 8006da2:	429c      	cmp	r4, r3
 8006da4:	d101      	bne.n	8006daa <_vfiprintf_r+0xda>
 8006da6:	68b4      	ldr	r4, [r6, #8]
 8006da8:	e7a2      	b.n	8006cf0 <_vfiprintf_r+0x20>
 8006daa:	4b4f      	ldr	r3, [pc, #316]	; (8006ee8 <_vfiprintf_r+0x218>)
 8006dac:	429c      	cmp	r4, r3
 8006dae:	bf08      	it	eq
 8006db0:	68f4      	ldreq	r4, [r6, #12]
 8006db2:	e79d      	b.n	8006cf0 <_vfiprintf_r+0x20>
 8006db4:	4621      	mov	r1, r4
 8006db6:	4630      	mov	r0, r6
 8006db8:	f7ff fc70 	bl	800669c <__swsetup_r>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d09d      	beq.n	8006cfc <_vfiprintf_r+0x2c>
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	b01d      	add	sp, #116	; 0x74
 8006dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dca:	46a8      	mov	r8, r5
 8006dcc:	e7a2      	b.n	8006d14 <_vfiprintf_r+0x44>
 8006dce:	4a44      	ldr	r2, [pc, #272]	; (8006ee0 <_vfiprintf_r+0x210>)
 8006dd0:	4645      	mov	r5, r8
 8006dd2:	1a80      	subs	r0, r0, r2
 8006dd4:	fa0b f000 	lsl.w	r0, fp, r0
 8006dd8:	4318      	orrs	r0, r3
 8006dda:	9004      	str	r0, [sp, #16]
 8006ddc:	e7be      	b.n	8006d5c <_vfiprintf_r+0x8c>
 8006dde:	9a03      	ldr	r2, [sp, #12]
 8006de0:	1d11      	adds	r1, r2, #4
 8006de2:	6812      	ldr	r2, [r2, #0]
 8006de4:	9103      	str	r1, [sp, #12]
 8006de6:	2a00      	cmp	r2, #0
 8006de8:	db01      	blt.n	8006dee <_vfiprintf_r+0x11e>
 8006dea:	9207      	str	r2, [sp, #28]
 8006dec:	e004      	b.n	8006df8 <_vfiprintf_r+0x128>
 8006dee:	4252      	negs	r2, r2
 8006df0:	f043 0302 	orr.w	r3, r3, #2
 8006df4:	9207      	str	r2, [sp, #28]
 8006df6:	9304      	str	r3, [sp, #16]
 8006df8:	f898 3000 	ldrb.w	r3, [r8]
 8006dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8006dfe:	d10e      	bne.n	8006e1e <_vfiprintf_r+0x14e>
 8006e00:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006e04:	2b2a      	cmp	r3, #42	; 0x2a
 8006e06:	d138      	bne.n	8006e7a <_vfiprintf_r+0x1aa>
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	f108 0802 	add.w	r8, r8, #2
 8006e0e:	1d1a      	adds	r2, r3, #4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	9203      	str	r2, [sp, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	bfb8      	it	lt
 8006e18:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e1c:	9305      	str	r3, [sp, #20]
 8006e1e:	4d33      	ldr	r5, [pc, #204]	; (8006eec <_vfiprintf_r+0x21c>)
 8006e20:	2203      	movs	r2, #3
 8006e22:	f898 1000 	ldrb.w	r1, [r8]
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 fa9a 	bl	8007360 <memchr>
 8006e2c:	b140      	cbz	r0, 8006e40 <_vfiprintf_r+0x170>
 8006e2e:	2340      	movs	r3, #64	; 0x40
 8006e30:	1b40      	subs	r0, r0, r5
 8006e32:	fa03 f000 	lsl.w	r0, r3, r0
 8006e36:	9b04      	ldr	r3, [sp, #16]
 8006e38:	f108 0801 	add.w	r8, r8, #1
 8006e3c:	4303      	orrs	r3, r0
 8006e3e:	9304      	str	r3, [sp, #16]
 8006e40:	f898 1000 	ldrb.w	r1, [r8]
 8006e44:	2206      	movs	r2, #6
 8006e46:	482a      	ldr	r0, [pc, #168]	; (8006ef0 <_vfiprintf_r+0x220>)
 8006e48:	f108 0701 	add.w	r7, r8, #1
 8006e4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e50:	f000 fa86 	bl	8007360 <memchr>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d037      	beq.n	8006ec8 <_vfiprintf_r+0x1f8>
 8006e58:	4b26      	ldr	r3, [pc, #152]	; (8006ef4 <_vfiprintf_r+0x224>)
 8006e5a:	bb1b      	cbnz	r3, 8006ea4 <_vfiprintf_r+0x1d4>
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	3307      	adds	r3, #7
 8006e60:	f023 0307 	bic.w	r3, r3, #7
 8006e64:	3308      	adds	r3, #8
 8006e66:	9303      	str	r3, [sp, #12]
 8006e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6a:	444b      	add	r3, r9
 8006e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6e:	e750      	b.n	8006d12 <_vfiprintf_r+0x42>
 8006e70:	fb05 3202 	mla	r2, r5, r2, r3
 8006e74:	2001      	movs	r0, #1
 8006e76:	4688      	mov	r8, r1
 8006e78:	e78a      	b.n	8006d90 <_vfiprintf_r+0xc0>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	250a      	movs	r5, #10
 8006e7e:	4619      	mov	r1, r3
 8006e80:	f108 0801 	add.w	r8, r8, #1
 8006e84:	9305      	str	r3, [sp, #20]
 8006e86:	4640      	mov	r0, r8
 8006e88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e8c:	3a30      	subs	r2, #48	; 0x30
 8006e8e:	2a09      	cmp	r2, #9
 8006e90:	d903      	bls.n	8006e9a <_vfiprintf_r+0x1ca>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0c3      	beq.n	8006e1e <_vfiprintf_r+0x14e>
 8006e96:	9105      	str	r1, [sp, #20]
 8006e98:	e7c1      	b.n	8006e1e <_vfiprintf_r+0x14e>
 8006e9a:	fb05 2101 	mla	r1, r5, r1, r2
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4680      	mov	r8, r0
 8006ea2:	e7f0      	b.n	8006e86 <_vfiprintf_r+0x1b6>
 8006ea4:	ab03      	add	r3, sp, #12
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	4622      	mov	r2, r4
 8006eaa:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <_vfiprintf_r+0x228>)
 8006eac:	a904      	add	r1, sp, #16
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f3af 8000 	nop.w
 8006eb4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006eb8:	4681      	mov	r9, r0
 8006eba:	d1d5      	bne.n	8006e68 <_vfiprintf_r+0x198>
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	065b      	lsls	r3, r3, #25
 8006ec0:	f53f af7e 	bmi.w	8006dc0 <_vfiprintf_r+0xf0>
 8006ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ec6:	e77d      	b.n	8006dc4 <_vfiprintf_r+0xf4>
 8006ec8:	ab03      	add	r3, sp, #12
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	4622      	mov	r2, r4
 8006ece:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <_vfiprintf_r+0x228>)
 8006ed0:	a904      	add	r1, sp, #16
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f000 f888 	bl	8006fe8 <_printf_i>
 8006ed8:	e7ec      	b.n	8006eb4 <_vfiprintf_r+0x1e4>
 8006eda:	bf00      	nop
 8006edc:	08007504 	.word	0x08007504
 8006ee0:	08007544 	.word	0x08007544
 8006ee4:	08007524 	.word	0x08007524
 8006ee8:	080074e4 	.word	0x080074e4
 8006eec:	0800754a 	.word	0x0800754a
 8006ef0:	0800754e 	.word	0x0800754e
 8006ef4:	00000000 	.word	0x00000000
 8006ef8:	08006cab 	.word	0x08006cab

08006efc <_printf_common>:
 8006efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f00:	4691      	mov	r9, r2
 8006f02:	461f      	mov	r7, r3
 8006f04:	688a      	ldr	r2, [r1, #8]
 8006f06:	690b      	ldr	r3, [r1, #16]
 8006f08:	4606      	mov	r6, r0
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	bfb8      	it	lt
 8006f0e:	4613      	movlt	r3, r2
 8006f10:	f8c9 3000 	str.w	r3, [r9]
 8006f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f18:	460c      	mov	r4, r1
 8006f1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f1e:	b112      	cbz	r2, 8006f26 <_printf_common+0x2a>
 8006f20:	3301      	adds	r3, #1
 8006f22:	f8c9 3000 	str.w	r3, [r9]
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	0699      	lsls	r1, r3, #26
 8006f2a:	bf42      	ittt	mi
 8006f2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006f30:	3302      	addmi	r3, #2
 8006f32:	f8c9 3000 	strmi.w	r3, [r9]
 8006f36:	6825      	ldr	r5, [r4, #0]
 8006f38:	f015 0506 	ands.w	r5, r5, #6
 8006f3c:	d107      	bne.n	8006f4e <_printf_common+0x52>
 8006f3e:	f104 0a19 	add.w	sl, r4, #25
 8006f42:	68e3      	ldr	r3, [r4, #12]
 8006f44:	f8d9 2000 	ldr.w	r2, [r9]
 8006f48:	1a9b      	subs	r3, r3, r2
 8006f4a:	42ab      	cmp	r3, r5
 8006f4c:	dc29      	bgt.n	8006fa2 <_printf_common+0xa6>
 8006f4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006f52:	6822      	ldr	r2, [r4, #0]
 8006f54:	3300      	adds	r3, #0
 8006f56:	bf18      	it	ne
 8006f58:	2301      	movne	r3, #1
 8006f5a:	0692      	lsls	r2, r2, #26
 8006f5c:	d42e      	bmi.n	8006fbc <_printf_common+0xc0>
 8006f5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f62:	4639      	mov	r1, r7
 8006f64:	4630      	mov	r0, r6
 8006f66:	47c0      	blx	r8
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d021      	beq.n	8006fb0 <_printf_common+0xb4>
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	68e5      	ldr	r5, [r4, #12]
 8006f70:	f003 0306 	and.w	r3, r3, #6
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	bf18      	it	ne
 8006f78:	2500      	movne	r5, #0
 8006f7a:	f8d9 2000 	ldr.w	r2, [r9]
 8006f7e:	f04f 0900 	mov.w	r9, #0
 8006f82:	bf08      	it	eq
 8006f84:	1aad      	subeq	r5, r5, r2
 8006f86:	68a3      	ldr	r3, [r4, #8]
 8006f88:	6922      	ldr	r2, [r4, #16]
 8006f8a:	bf08      	it	eq
 8006f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f90:	4293      	cmp	r3, r2
 8006f92:	bfc4      	itt	gt
 8006f94:	1a9b      	subgt	r3, r3, r2
 8006f96:	18ed      	addgt	r5, r5, r3
 8006f98:	341a      	adds	r4, #26
 8006f9a:	454d      	cmp	r5, r9
 8006f9c:	d11a      	bne.n	8006fd4 <_printf_common+0xd8>
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	e008      	b.n	8006fb4 <_printf_common+0xb8>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	4652      	mov	r2, sl
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	4630      	mov	r0, r6
 8006faa:	47c0      	blx	r8
 8006fac:	3001      	adds	r0, #1
 8006fae:	d103      	bne.n	8006fb8 <_printf_common+0xbc>
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb8:	3501      	adds	r5, #1
 8006fba:	e7c2      	b.n	8006f42 <_printf_common+0x46>
 8006fbc:	2030      	movs	r0, #48	; 0x30
 8006fbe:	18e1      	adds	r1, r4, r3
 8006fc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fca:	4422      	add	r2, r4
 8006fcc:	3302      	adds	r3, #2
 8006fce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fd2:	e7c4      	b.n	8006f5e <_printf_common+0x62>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	4639      	mov	r1, r7
 8006fda:	4630      	mov	r0, r6
 8006fdc:	47c0      	blx	r8
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d0e6      	beq.n	8006fb0 <_printf_common+0xb4>
 8006fe2:	f109 0901 	add.w	r9, r9, #1
 8006fe6:	e7d8      	b.n	8006f9a <_printf_common+0x9e>

08006fe8 <_printf_i>:
 8006fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	7e09      	ldrb	r1, [r1, #24]
 8006ff4:	b085      	sub	sp, #20
 8006ff6:	296e      	cmp	r1, #110	; 0x6e
 8006ff8:	4617      	mov	r7, r2
 8006ffa:	4606      	mov	r6, r0
 8006ffc:	4698      	mov	r8, r3
 8006ffe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007000:	f000 80b3 	beq.w	800716a <_printf_i+0x182>
 8007004:	d822      	bhi.n	800704c <_printf_i+0x64>
 8007006:	2963      	cmp	r1, #99	; 0x63
 8007008:	d036      	beq.n	8007078 <_printf_i+0x90>
 800700a:	d80a      	bhi.n	8007022 <_printf_i+0x3a>
 800700c:	2900      	cmp	r1, #0
 800700e:	f000 80b9 	beq.w	8007184 <_printf_i+0x19c>
 8007012:	2958      	cmp	r1, #88	; 0x58
 8007014:	f000 8083 	beq.w	800711e <_printf_i+0x136>
 8007018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800701c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007020:	e032      	b.n	8007088 <_printf_i+0xa0>
 8007022:	2964      	cmp	r1, #100	; 0x64
 8007024:	d001      	beq.n	800702a <_printf_i+0x42>
 8007026:	2969      	cmp	r1, #105	; 0x69
 8007028:	d1f6      	bne.n	8007018 <_printf_i+0x30>
 800702a:	6820      	ldr	r0, [r4, #0]
 800702c:	6813      	ldr	r3, [r2, #0]
 800702e:	0605      	lsls	r5, r0, #24
 8007030:	f103 0104 	add.w	r1, r3, #4
 8007034:	d52a      	bpl.n	800708c <_printf_i+0xa4>
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6011      	str	r1, [r2, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	da03      	bge.n	8007046 <_printf_i+0x5e>
 800703e:	222d      	movs	r2, #45	; 0x2d
 8007040:	425b      	negs	r3, r3
 8007042:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007046:	486f      	ldr	r0, [pc, #444]	; (8007204 <_printf_i+0x21c>)
 8007048:	220a      	movs	r2, #10
 800704a:	e039      	b.n	80070c0 <_printf_i+0xd8>
 800704c:	2973      	cmp	r1, #115	; 0x73
 800704e:	f000 809d 	beq.w	800718c <_printf_i+0x1a4>
 8007052:	d808      	bhi.n	8007066 <_printf_i+0x7e>
 8007054:	296f      	cmp	r1, #111	; 0x6f
 8007056:	d020      	beq.n	800709a <_printf_i+0xb2>
 8007058:	2970      	cmp	r1, #112	; 0x70
 800705a:	d1dd      	bne.n	8007018 <_printf_i+0x30>
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	f043 0320 	orr.w	r3, r3, #32
 8007062:	6023      	str	r3, [r4, #0]
 8007064:	e003      	b.n	800706e <_printf_i+0x86>
 8007066:	2975      	cmp	r1, #117	; 0x75
 8007068:	d017      	beq.n	800709a <_printf_i+0xb2>
 800706a:	2978      	cmp	r1, #120	; 0x78
 800706c:	d1d4      	bne.n	8007018 <_printf_i+0x30>
 800706e:	2378      	movs	r3, #120	; 0x78
 8007070:	4865      	ldr	r0, [pc, #404]	; (8007208 <_printf_i+0x220>)
 8007072:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007076:	e055      	b.n	8007124 <_printf_i+0x13c>
 8007078:	6813      	ldr	r3, [r2, #0]
 800707a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800707e:	1d19      	adds	r1, r3, #4
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6011      	str	r1, [r2, #0]
 8007084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007088:	2301      	movs	r3, #1
 800708a:	e08c      	b.n	80071a6 <_printf_i+0x1be>
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007092:	6011      	str	r1, [r2, #0]
 8007094:	bf18      	it	ne
 8007096:	b21b      	sxthne	r3, r3
 8007098:	e7cf      	b.n	800703a <_printf_i+0x52>
 800709a:	6813      	ldr	r3, [r2, #0]
 800709c:	6825      	ldr	r5, [r4, #0]
 800709e:	1d18      	adds	r0, r3, #4
 80070a0:	6010      	str	r0, [r2, #0]
 80070a2:	0628      	lsls	r0, r5, #24
 80070a4:	d501      	bpl.n	80070aa <_printf_i+0xc2>
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	e002      	b.n	80070b0 <_printf_i+0xc8>
 80070aa:	0668      	lsls	r0, r5, #25
 80070ac:	d5fb      	bpl.n	80070a6 <_printf_i+0xbe>
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	296f      	cmp	r1, #111	; 0x6f
 80070b2:	bf14      	ite	ne
 80070b4:	220a      	movne	r2, #10
 80070b6:	2208      	moveq	r2, #8
 80070b8:	4852      	ldr	r0, [pc, #328]	; (8007204 <_printf_i+0x21c>)
 80070ba:	2100      	movs	r1, #0
 80070bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070c0:	6865      	ldr	r5, [r4, #4]
 80070c2:	2d00      	cmp	r5, #0
 80070c4:	60a5      	str	r5, [r4, #8]
 80070c6:	f2c0 8095 	blt.w	80071f4 <_printf_i+0x20c>
 80070ca:	6821      	ldr	r1, [r4, #0]
 80070cc:	f021 0104 	bic.w	r1, r1, #4
 80070d0:	6021      	str	r1, [r4, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d13d      	bne.n	8007152 <_printf_i+0x16a>
 80070d6:	2d00      	cmp	r5, #0
 80070d8:	f040 808e 	bne.w	80071f8 <_printf_i+0x210>
 80070dc:	4665      	mov	r5, ip
 80070de:	2a08      	cmp	r2, #8
 80070e0:	d10b      	bne.n	80070fa <_printf_i+0x112>
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	07db      	lsls	r3, r3, #31
 80070e6:	d508      	bpl.n	80070fa <_printf_i+0x112>
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	6862      	ldr	r2, [r4, #4]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	bfde      	ittt	le
 80070f0:	2330      	movle	r3, #48	; 0x30
 80070f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070fa:	ebac 0305 	sub.w	r3, ip, r5
 80070fe:	6123      	str	r3, [r4, #16]
 8007100:	f8cd 8000 	str.w	r8, [sp]
 8007104:	463b      	mov	r3, r7
 8007106:	aa03      	add	r2, sp, #12
 8007108:	4621      	mov	r1, r4
 800710a:	4630      	mov	r0, r6
 800710c:	f7ff fef6 	bl	8006efc <_printf_common>
 8007110:	3001      	adds	r0, #1
 8007112:	d14d      	bne.n	80071b0 <_printf_i+0x1c8>
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	b005      	add	sp, #20
 800711a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800711e:	4839      	ldr	r0, [pc, #228]	; (8007204 <_printf_i+0x21c>)
 8007120:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007124:	6813      	ldr	r3, [r2, #0]
 8007126:	6821      	ldr	r1, [r4, #0]
 8007128:	1d1d      	adds	r5, r3, #4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6015      	str	r5, [r2, #0]
 800712e:	060a      	lsls	r2, r1, #24
 8007130:	d50b      	bpl.n	800714a <_printf_i+0x162>
 8007132:	07ca      	lsls	r2, r1, #31
 8007134:	bf44      	itt	mi
 8007136:	f041 0120 	orrmi.w	r1, r1, #32
 800713a:	6021      	strmi	r1, [r4, #0]
 800713c:	b91b      	cbnz	r3, 8007146 <_printf_i+0x15e>
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	f022 0220 	bic.w	r2, r2, #32
 8007144:	6022      	str	r2, [r4, #0]
 8007146:	2210      	movs	r2, #16
 8007148:	e7b7      	b.n	80070ba <_printf_i+0xd2>
 800714a:	064d      	lsls	r5, r1, #25
 800714c:	bf48      	it	mi
 800714e:	b29b      	uxthmi	r3, r3
 8007150:	e7ef      	b.n	8007132 <_printf_i+0x14a>
 8007152:	4665      	mov	r5, ip
 8007154:	fbb3 f1f2 	udiv	r1, r3, r2
 8007158:	fb02 3311 	mls	r3, r2, r1, r3
 800715c:	5cc3      	ldrb	r3, [r0, r3]
 800715e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007162:	460b      	mov	r3, r1
 8007164:	2900      	cmp	r1, #0
 8007166:	d1f5      	bne.n	8007154 <_printf_i+0x16c>
 8007168:	e7b9      	b.n	80070de <_printf_i+0xf6>
 800716a:	6813      	ldr	r3, [r2, #0]
 800716c:	6825      	ldr	r5, [r4, #0]
 800716e:	1d18      	adds	r0, r3, #4
 8007170:	6961      	ldr	r1, [r4, #20]
 8007172:	6010      	str	r0, [r2, #0]
 8007174:	0628      	lsls	r0, r5, #24
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	d501      	bpl.n	800717e <_printf_i+0x196>
 800717a:	6019      	str	r1, [r3, #0]
 800717c:	e002      	b.n	8007184 <_printf_i+0x19c>
 800717e:	066a      	lsls	r2, r5, #25
 8007180:	d5fb      	bpl.n	800717a <_printf_i+0x192>
 8007182:	8019      	strh	r1, [r3, #0]
 8007184:	2300      	movs	r3, #0
 8007186:	4665      	mov	r5, ip
 8007188:	6123      	str	r3, [r4, #16]
 800718a:	e7b9      	b.n	8007100 <_printf_i+0x118>
 800718c:	6813      	ldr	r3, [r2, #0]
 800718e:	1d19      	adds	r1, r3, #4
 8007190:	6011      	str	r1, [r2, #0]
 8007192:	681d      	ldr	r5, [r3, #0]
 8007194:	6862      	ldr	r2, [r4, #4]
 8007196:	2100      	movs	r1, #0
 8007198:	4628      	mov	r0, r5
 800719a:	f000 f8e1 	bl	8007360 <memchr>
 800719e:	b108      	cbz	r0, 80071a4 <_printf_i+0x1bc>
 80071a0:	1b40      	subs	r0, r0, r5
 80071a2:	6060      	str	r0, [r4, #4]
 80071a4:	6863      	ldr	r3, [r4, #4]
 80071a6:	6123      	str	r3, [r4, #16]
 80071a8:	2300      	movs	r3, #0
 80071aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ae:	e7a7      	b.n	8007100 <_printf_i+0x118>
 80071b0:	6923      	ldr	r3, [r4, #16]
 80071b2:	462a      	mov	r2, r5
 80071b4:	4639      	mov	r1, r7
 80071b6:	4630      	mov	r0, r6
 80071b8:	47c0      	blx	r8
 80071ba:	3001      	adds	r0, #1
 80071bc:	d0aa      	beq.n	8007114 <_printf_i+0x12c>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	079b      	lsls	r3, r3, #30
 80071c2:	d413      	bmi.n	80071ec <_printf_i+0x204>
 80071c4:	68e0      	ldr	r0, [r4, #12]
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	4298      	cmp	r0, r3
 80071ca:	bfb8      	it	lt
 80071cc:	4618      	movlt	r0, r3
 80071ce:	e7a3      	b.n	8007118 <_printf_i+0x130>
 80071d0:	2301      	movs	r3, #1
 80071d2:	464a      	mov	r2, r9
 80071d4:	4639      	mov	r1, r7
 80071d6:	4630      	mov	r0, r6
 80071d8:	47c0      	blx	r8
 80071da:	3001      	adds	r0, #1
 80071dc:	d09a      	beq.n	8007114 <_printf_i+0x12c>
 80071de:	3501      	adds	r5, #1
 80071e0:	68e3      	ldr	r3, [r4, #12]
 80071e2:	9a03      	ldr	r2, [sp, #12]
 80071e4:	1a9b      	subs	r3, r3, r2
 80071e6:	42ab      	cmp	r3, r5
 80071e8:	dcf2      	bgt.n	80071d0 <_printf_i+0x1e8>
 80071ea:	e7eb      	b.n	80071c4 <_printf_i+0x1dc>
 80071ec:	2500      	movs	r5, #0
 80071ee:	f104 0919 	add.w	r9, r4, #25
 80071f2:	e7f5      	b.n	80071e0 <_printf_i+0x1f8>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1ac      	bne.n	8007152 <_printf_i+0x16a>
 80071f8:	7803      	ldrb	r3, [r0, #0]
 80071fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007202:	e76c      	b.n	80070de <_printf_i+0xf6>
 8007204:	08007555 	.word	0x08007555
 8007208:	08007566 	.word	0x08007566

0800720c <_sbrk_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	2300      	movs	r3, #0
 8007210:	4c05      	ldr	r4, [pc, #20]	; (8007228 <_sbrk_r+0x1c>)
 8007212:	4605      	mov	r5, r0
 8007214:	4608      	mov	r0, r1
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	f7fa f90a 	bl	8001430 <_sbrk>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_sbrk_r+0x1a>
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	b103      	cbz	r3, 8007226 <_sbrk_r+0x1a>
 8007224:	602b      	str	r3, [r5, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	200012f0 	.word	0x200012f0

0800722c <__sread>:
 800722c:	b510      	push	{r4, lr}
 800722e:	460c      	mov	r4, r1
 8007230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007234:	f000 f8a4 	bl	8007380 <_read_r>
 8007238:	2800      	cmp	r0, #0
 800723a:	bfab      	itete	ge
 800723c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800723e:	89a3      	ldrhlt	r3, [r4, #12]
 8007240:	181b      	addge	r3, r3, r0
 8007242:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007246:	bfac      	ite	ge
 8007248:	6563      	strge	r3, [r4, #84]	; 0x54
 800724a:	81a3      	strhlt	r3, [r4, #12]
 800724c:	bd10      	pop	{r4, pc}

0800724e <__swrite>:
 800724e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007252:	461f      	mov	r7, r3
 8007254:	898b      	ldrh	r3, [r1, #12]
 8007256:	4605      	mov	r5, r0
 8007258:	05db      	lsls	r3, r3, #23
 800725a:	460c      	mov	r4, r1
 800725c:	4616      	mov	r6, r2
 800725e:	d505      	bpl.n	800726c <__swrite+0x1e>
 8007260:	2302      	movs	r3, #2
 8007262:	2200      	movs	r2, #0
 8007264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007268:	f000 f868 	bl	800733c <_lseek_r>
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	4632      	mov	r2, r6
 8007270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007274:	81a3      	strh	r3, [r4, #12]
 8007276:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800727a:	463b      	mov	r3, r7
 800727c:	4628      	mov	r0, r5
 800727e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007282:	f000 b817 	b.w	80072b4 <_write_r>

08007286 <__sseek>:
 8007286:	b510      	push	{r4, lr}
 8007288:	460c      	mov	r4, r1
 800728a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728e:	f000 f855 	bl	800733c <_lseek_r>
 8007292:	1c43      	adds	r3, r0, #1
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	bf15      	itete	ne
 8007298:	6560      	strne	r0, [r4, #84]	; 0x54
 800729a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800729e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072a2:	81a3      	strheq	r3, [r4, #12]
 80072a4:	bf18      	it	ne
 80072a6:	81a3      	strhne	r3, [r4, #12]
 80072a8:	bd10      	pop	{r4, pc}

080072aa <__sclose>:
 80072aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ae:	f000 b813 	b.w	80072d8 <_close_r>
	...

080072b4 <_write_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	4605      	mov	r5, r0
 80072b8:	4608      	mov	r0, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	2200      	movs	r2, #0
 80072be:	4c05      	ldr	r4, [pc, #20]	; (80072d4 <_write_r+0x20>)
 80072c0:	6022      	str	r2, [r4, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	f7fa f867 	bl	8001396 <_write>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_write_r+0x1e>
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_write_r+0x1e>
 80072d0:	602b      	str	r3, [r5, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	200012f0 	.word	0x200012f0

080072d8 <_close_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	2300      	movs	r3, #0
 80072dc:	4c05      	ldr	r4, [pc, #20]	; (80072f4 <_close_r+0x1c>)
 80072de:	4605      	mov	r5, r0
 80072e0:	4608      	mov	r0, r1
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	f7fa f873 	bl	80013ce <_close>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d102      	bne.n	80072f2 <_close_r+0x1a>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	b103      	cbz	r3, 80072f2 <_close_r+0x1a>
 80072f0:	602b      	str	r3, [r5, #0]
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	200012f0 	.word	0x200012f0

080072f8 <_fstat_r>:
 80072f8:	b538      	push	{r3, r4, r5, lr}
 80072fa:	2300      	movs	r3, #0
 80072fc:	4c06      	ldr	r4, [pc, #24]	; (8007318 <_fstat_r+0x20>)
 80072fe:	4605      	mov	r5, r0
 8007300:	4608      	mov	r0, r1
 8007302:	4611      	mov	r1, r2
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	f7fa f86d 	bl	80013e4 <_fstat>
 800730a:	1c43      	adds	r3, r0, #1
 800730c:	d102      	bne.n	8007314 <_fstat_r+0x1c>
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	b103      	cbz	r3, 8007314 <_fstat_r+0x1c>
 8007312:	602b      	str	r3, [r5, #0]
 8007314:	bd38      	pop	{r3, r4, r5, pc}
 8007316:	bf00      	nop
 8007318:	200012f0 	.word	0x200012f0

0800731c <_isatty_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	2300      	movs	r3, #0
 8007320:	4c05      	ldr	r4, [pc, #20]	; (8007338 <_isatty_r+0x1c>)
 8007322:	4605      	mov	r5, r0
 8007324:	4608      	mov	r0, r1
 8007326:	6023      	str	r3, [r4, #0]
 8007328:	f7fa f86b 	bl	8001402 <_isatty>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_isatty_r+0x1a>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	b103      	cbz	r3, 8007336 <_isatty_r+0x1a>
 8007334:	602b      	str	r3, [r5, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	200012f0 	.word	0x200012f0

0800733c <_lseek_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4605      	mov	r5, r0
 8007340:	4608      	mov	r0, r1
 8007342:	4611      	mov	r1, r2
 8007344:	2200      	movs	r2, #0
 8007346:	4c05      	ldr	r4, [pc, #20]	; (800735c <_lseek_r+0x20>)
 8007348:	6022      	str	r2, [r4, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	f7fa f863 	bl	8001416 <_lseek>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_lseek_r+0x1e>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	b103      	cbz	r3, 800735a <_lseek_r+0x1e>
 8007358:	602b      	str	r3, [r5, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	200012f0 	.word	0x200012f0

08007360 <memchr>:
 8007360:	b510      	push	{r4, lr}
 8007362:	b2c9      	uxtb	r1, r1
 8007364:	4402      	add	r2, r0
 8007366:	4290      	cmp	r0, r2
 8007368:	4603      	mov	r3, r0
 800736a:	d101      	bne.n	8007370 <memchr+0x10>
 800736c:	2300      	movs	r3, #0
 800736e:	e003      	b.n	8007378 <memchr+0x18>
 8007370:	781c      	ldrb	r4, [r3, #0]
 8007372:	3001      	adds	r0, #1
 8007374:	428c      	cmp	r4, r1
 8007376:	d1f6      	bne.n	8007366 <memchr+0x6>
 8007378:	4618      	mov	r0, r3
 800737a:	bd10      	pop	{r4, pc}

0800737c <__malloc_lock>:
 800737c:	4770      	bx	lr

0800737e <__malloc_unlock>:
 800737e:	4770      	bx	lr

08007380 <_read_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4605      	mov	r5, r0
 8007384:	4608      	mov	r0, r1
 8007386:	4611      	mov	r1, r2
 8007388:	2200      	movs	r2, #0
 800738a:	4c05      	ldr	r4, [pc, #20]	; (80073a0 <_read_r+0x20>)
 800738c:	6022      	str	r2, [r4, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	f7f9 ffe4 	bl	800135c <_read>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d102      	bne.n	800739e <_read_r+0x1e>
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	b103      	cbz	r3, 800739e <_read_r+0x1e>
 800739c:	602b      	str	r3, [r5, #0]
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	200012f0 	.word	0x200012f0

080073a4 <_init>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	bf00      	nop
 80073a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073aa:	bc08      	pop	{r3}
 80073ac:	469e      	mov	lr, r3
 80073ae:	4770      	bx	lr

080073b0 <_fini>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr
